
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000021dc  00002270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000361  00800124  00800124  00002294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00002304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002afe  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbc  00000000  00000000  0000501a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001535  00000000  00000000  00005fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b28  00000000  00000000  0000750c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e6  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002841  00000000  00000000  0000891a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000b15b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_1>
       8:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_2>
       c:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__vector_3>
      10:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_4>
      14:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__vector_9>
      28:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__vector_10>
      2c:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_11>
      30:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__vector_12>
      34:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__vector_13>
      38:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_14>
      3c:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_15>
      40:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_16>
      44:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_17>
      48:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__vector_18>
      4c:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_19>
      50:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__vector_20>
      54:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__vector_21>
      58:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ec ed       	ldi	r30, 0xDC	; 220
      70:	f1 e2       	ldi	r31, 0x21	; 33
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 32       	cpi	r26, 0x24	; 36
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a4 e2       	ldi	r26, 0x24	; 36
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a5 38       	cpi	r26, 0x85	; 133
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
      92:	0c 94 ec 10 	jmp	0x21d8	; 0x21d8 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:
//LCD Lcd1 = initLCD();
USART usart1 = initUSART(&Queue1,0);

int main(void)
{
	initialize(); //also usart & interrupt inits
      9a:	0e 94 5f 00 	call	0xbe	; 0xbe <initialize>
	
    
	
	
	INSTALL(&usart1,USART_,IRQ_USART0_RX); //interrupt handler on receiver
      9e:	48 e0       	ldi	r20, 0x08	; 8
      a0:	68 e2       	ldi	r22, 0x28	; 40
      a2:	70 e1       	ldi	r23, 0x10	; 16
      a4:	80 e0       	ldi	r24, 0x00	; 0
      a6:	91 e0       	ldi	r25, 0x01	; 1
      a8:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <install>
	
	//update_screen_north(10);
	//updatescreen(&Queue1,2);
	//printAt(1,9);
	//react(&Queue1,1);
	return TINYTIMBER(&Queue1,init,9);
      ac:	49 e0       	ldi	r20, 0x09	; 9
      ae:	50 e0       	ldi	r21, 0x00	; 0
      b0:	60 ed       	ldi	r22, 0xD0	; 208
      b2:	73 e0       	ldi	r23, 0x03	; 3
      b4:	84 e2       	ldi	r24, 0x24	; 36
      b6:	91 e0       	ldi	r25, 0x01	; 1
      b8:	0e 94 0c 10 	call	0x2018	; 0x2018 <tinytimber>
}
      bc:	08 95       	ret

000000be <initialize>:
#define BAUD 9600 // target baud
#define MYUBBR FOSC/16/BAUD-1

void initialize(void)
{
	CLKPR = 0x80;
      be:	e1 e6       	ldi	r30, 0x61	; 97
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 e8       	ldi	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
	CLKPR = 0x00;
      c6:	10 82       	st	Z, r1

	PORTB = 208;
      c8:	20 ed       	ldi	r18, 0xD0	; 208
      ca:	25 b9       	out	0x05, r18	; 5
	PORTE = 12;
      cc:	9c e0       	ldi	r25, 0x0C	; 12
      ce:	9e b9       	out	0x0e, r25	; 14
	EIMSK = 192;
      d0:	80 ec       	ldi	r24, 0xC0	; 192
      d2:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 = 208;
      d4:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	PCMSK0 = 12;
      d8:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>

	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
      dc:	97 eb       	ldi	r25, 0xB7	; 183
      de:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      e2:	97 e0       	ldi	r25, 0x07	; 7
      e4:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
      e8:	9f e0       	ldi	r25, 0x0F	; 15
      ea:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      ee:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	
	//USART lab 5
	//baud rate
	//UBRR0H = (unsigned char) (MYUBBR>>8);
	//UBRR0L = (unsigned char) MYUBBR;
	UBRR0 = 51;
      f2:	83 e3       	ldi	r24, 0x33	; 51
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//enable receive and transmit
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
      fe:	88 e9       	ldi	r24, 0x98	; 152
     100:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//frame format
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
     104:	86 e0       	ldi	r24, 0x06	; 6
     106:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     10a:	08 95       	ret

0000010c <writeChar>:
}

void writeChar(char ch, int pos)
{
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	64 97       	sbiw	r28, 0x14	; 20
     116:	0f b6       	in	r0, 0x3f	; 63
     118:	f8 94       	cli
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	cd bf       	out	0x3d, r28	; 61
	int numbers[10] = {
     120:	94 e1       	ldi	r25, 0x14	; 20
     122:	e0 e1       	ldi	r30, 0x10	; 16
     124:	f1 e0       	ldi	r31, 0x01	; 1
     126:	de 01       	movw	r26, r28
     128:	11 96       	adiw	r26, 0x01	; 1
     12a:	01 90       	ld	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	9a 95       	dec	r25
     130:	e1 f7       	brne	.-8      	; 0x12a <writeChar+0x1e>
		0x1B41,
		0x1F41,
		0x0111,
		0x1F51,
		0x0B51};
	if (pos >= 0 && pos <= 5)
     132:	66 30       	cpi	r22, 0x06	; 6
     134:	71 05       	cpc	r23, r1
     136:	08 f0       	brcs	.+2      	; 0x13a <writeChar+0x2e>
     138:	43 c1       	rjmp	.+646    	; 0x3c0 <writeChar+0x2b4>
	{
		if (ch < 0 || ch > 9)
     13a:	8a 30       	cpi	r24, 0x0A	; 10
     13c:	20 f0       	brcs	.+8      	; 0x146 <writeChar+0x3a>
		{
			ch = ch - '0';
     13e:	80 53       	subi	r24, 0x30	; 48
		}
		if (ch >= 0 && ch <= 9)
     140:	8a 30       	cpi	r24, 0x0A	; 10
     142:	08 f0       	brcs	.+2      	; 0x146 <writeChar+0x3a>
     144:	3d c1       	rjmp	.+634    	; 0x3c0 <writeChar+0x2b4>
		{
			int mask = 0xF;
			int mask2 = 0xF0;
			int towrite = numbers[ch];
     146:	e8 2f       	mov	r30, r24
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	ee 0f       	add	r30, r30
     14c:	ff 1f       	adc	r31, r31
     14e:	ec 0f       	add	r30, r28
     150:	fd 1f       	adc	r31, r29
     152:	81 81       	ldd	r24, Z+1	; 0x01
     154:	92 81       	ldd	r25, Z+2	; 0x02

			if (pos == 0)
     156:	61 15       	cp	r22, r1
     158:	71 05       	cpc	r23, r1
     15a:	71 f5       	brne	.+92     	; 0x1b8 <writeChar+0xac>
			{
				LCDDR0 = (mask & towrite) | (LCDDR0)&mask2;
     15c:	ec ee       	ldi	r30, 0xEC	; 236
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	20 81       	ld	r18, Z
     162:	38 2f       	mov	r19, r24
     164:	3f 70       	andi	r19, 0x0F	; 15
     166:	20 7f       	andi	r18, 0xF0	; 240
     168:	23 2b       	or	r18, r19
     16a:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     16c:	ac 01       	movw	r20, r24
     16e:	55 95       	asr	r21
     170:	47 95       	ror	r20
     172:	55 95       	asr	r21
     174:	47 95       	ror	r20
     176:	55 95       	asr	r21
     178:	47 95       	ror	r20
     17a:	55 95       	asr	r21
     17c:	47 95       	ror	r20
				LCDDR5 = (mask & towrite) | (LCDDR5)&mask2;
     17e:	e1 ef       	ldi	r30, 0xF1	; 241
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	20 81       	ld	r18, Z
     184:	4f 70       	andi	r20, 0x0F	; 15
     186:	20 7f       	andi	r18, 0xF0	; 240
     188:	24 2b       	or	r18, r20
     18a:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) | (LCDDR10)&mask2;
     18c:	e6 ef       	ldi	r30, 0xF6	; 246
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	20 81       	ld	r18, Z
     192:	39 2f       	mov	r19, r25
     194:	3f 70       	andi	r19, 0x0F	; 15
     196:	20 7f       	andi	r18, 0xF0	; 240
     198:	23 2b       	or	r18, r19
     19a:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     19c:	80 e1       	ldi	r24, 0x10	; 16
     19e:	98 02       	muls	r25, r24
     1a0:	81 2d       	mov	r24, r1
     1a2:	99 0b       	sbc	r25, r25
     1a4:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) | (LCDDR15)&mask2;
     1a6:	eb ef       	ldi	r30, 0xFB	; 251
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	20 81       	ld	r18, Z
     1ac:	38 2f       	mov	r19, r24
     1ae:	3f 70       	andi	r19, 0x0F	; 15
     1b0:	20 7f       	andi	r18, 0xF0	; 240
     1b2:	23 2b       	or	r18, r19
     1b4:	20 83       	st	Z, r18
     1b6:	66 c0       	rjmp	.+204    	; 0x284 <writeChar+0x178>
			}
			if (pos == 1)
     1b8:	61 30       	cpi	r22, 0x01	; 1
     1ba:	71 05       	cpc	r23, r1
     1bc:	91 f5       	brne	.+100    	; 0x222 <writeChar+0x116>
			{
				LCDDR0 = (mask & towrite) << 4 | LCDDR0 & mask;
     1be:	ec ee       	ldi	r30, 0xEC	; 236
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	20 81       	ld	r18, Z
     1c4:	38 2f       	mov	r19, r24
     1c6:	32 95       	swap	r19
     1c8:	30 7f       	andi	r19, 0xF0	; 240
     1ca:	2f 70       	andi	r18, 0x0F	; 15
     1cc:	23 2b       	or	r18, r19
     1ce:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR5 = (mask & towrite) << 4 | LCDDR5 & mask;
     1d0:	e1 ef       	ldi	r30, 0xF1	; 241
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	40 81       	ld	r20, Z
     1d6:	9c 01       	movw	r18, r24
     1d8:	20 7f       	andi	r18, 0xF0	; 240
     1da:	33 27       	eor	r19, r19
     1dc:	34 2f       	mov	r19, r20
     1de:	3f 70       	andi	r19, 0x0F	; 15
     1e0:	23 2b       	or	r18, r19
     1e2:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) << 4 | LCDDR10 & mask;
     1e4:	e6 ef       	ldi	r30, 0xF6	; 246
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	40 81       	ld	r20, Z
     1ea:	9c 01       	movw	r18, r24
     1ec:	32 95       	swap	r19
     1ee:	22 95       	swap	r18
     1f0:	2f 70       	andi	r18, 0x0F	; 15
     1f2:	23 27       	eor	r18, r19
     1f4:	3f 70       	andi	r19, 0x0F	; 15
     1f6:	23 27       	eor	r18, r19
     1f8:	20 7f       	andi	r18, 0xF0	; 240
     1fa:	33 27       	eor	r19, r19
     1fc:	34 2f       	mov	r19, r20
     1fe:	3f 70       	andi	r19, 0x0F	; 15
     200:	23 2b       	or	r18, r19
     202:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     204:	80 e1       	ldi	r24, 0x10	; 16
     206:	98 02       	muls	r25, r24
     208:	81 2d       	mov	r24, r1
     20a:	99 0b       	sbc	r25, r25
     20c:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) << 4 | LCDDR15 & mask;
     20e:	eb ef       	ldi	r30, 0xFB	; 251
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	20 81       	ld	r18, Z
     214:	38 2f       	mov	r19, r24
     216:	32 95       	swap	r19
     218:	30 7f       	andi	r19, 0xF0	; 240
     21a:	2f 70       	andi	r18, 0x0F	; 15
     21c:	23 2b       	or	r18, r19
     21e:	20 83       	st	Z, r18
     220:	69 c0       	rjmp	.+210    	; 0x2f4 <writeChar+0x1e8>
			}
			if (pos == 2)
     222:	62 30       	cpi	r22, 0x02	; 2
     224:	71 05       	cpc	r23, r1
     226:	71 f5       	brne	.+92     	; 0x284 <writeChar+0x178>
			{
				LCDDR1 = (mask & towrite) | (LCDDR1)&mask2;
     228:	ed ee       	ldi	r30, 0xED	; 237
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	20 81       	ld	r18, Z
     22e:	38 2f       	mov	r19, r24
     230:	3f 70       	andi	r19, 0x0F	; 15
     232:	20 7f       	andi	r18, 0xF0	; 240
     234:	23 2b       	or	r18, r19
     236:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     238:	ac 01       	movw	r20, r24
     23a:	55 95       	asr	r21
     23c:	47 95       	ror	r20
     23e:	55 95       	asr	r21
     240:	47 95       	ror	r20
     242:	55 95       	asr	r21
     244:	47 95       	ror	r20
     246:	55 95       	asr	r21
     248:	47 95       	ror	r20
				LCDDR6 = (mask & towrite) | (LCDDR6)&mask2;
     24a:	e2 ef       	ldi	r30, 0xF2	; 242
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	20 81       	ld	r18, Z
     250:	4f 70       	andi	r20, 0x0F	; 15
     252:	20 7f       	andi	r18, 0xF0	; 240
     254:	24 2b       	or	r18, r20
     256:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) | (LCDDR11)&mask2;
     258:	e7 ef       	ldi	r30, 0xF7	; 247
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	20 81       	ld	r18, Z
     25e:	39 2f       	mov	r19, r25
     260:	3f 70       	andi	r19, 0x0F	; 15
     262:	20 7f       	andi	r18, 0xF0	; 240
     264:	23 2b       	or	r18, r19
     266:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     268:	80 e1       	ldi	r24, 0x10	; 16
     26a:	98 02       	muls	r25, r24
     26c:	81 2d       	mov	r24, r1
     26e:	99 0b       	sbc	r25, r25
     270:	11 24       	eor	r1, r1
				LCDDR16 = (mask & towrite) | (LCDDR16)&mask2;
     272:	ec ef       	ldi	r30, 0xFC	; 252
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	20 81       	ld	r18, Z
     278:	38 2f       	mov	r19, r24
     27a:	3f 70       	andi	r19, 0x0F	; 15
     27c:	20 7f       	andi	r18, 0xF0	; 240
     27e:	23 2b       	or	r18, r19
     280:	20 83       	st	Z, r18
     282:	67 c0       	rjmp	.+206    	; 0x352 <writeChar+0x246>
			}
			if (pos == 3)
     284:	63 30       	cpi	r22, 0x03	; 3
     286:	71 05       	cpc	r23, r1
     288:	a9 f5       	brne	.+106    	; 0x2f4 <writeChar+0x1e8>
			{
				LCDDR1 = (mask & towrite) << 4 | LCDDR1 & mask;
     28a:	ed ee       	ldi	r30, 0xED	; 237
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	20 81       	ld	r18, Z
     290:	38 2f       	mov	r19, r24
     292:	32 95       	swap	r19
     294:	30 7f       	andi	r19, 0xF0	; 240
     296:	2f 70       	andi	r18, 0x0F	; 15
     298:	23 2b       	or	r18, r19
     29a:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR6 = (mask & towrite) << 4 | LCDDR6 & mask;
     29c:	e2 ef       	ldi	r30, 0xF2	; 242
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	40 81       	ld	r20, Z
     2a2:	9c 01       	movw	r18, r24
     2a4:	20 7f       	andi	r18, 0xF0	; 240
     2a6:	33 27       	eor	r19, r19
     2a8:	34 2f       	mov	r19, r20
     2aa:	3f 70       	andi	r19, 0x0F	; 15
     2ac:	23 2b       	or	r18, r19
     2ae:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) << 4 | LCDDR11 & mask;
     2b0:	e7 ef       	ldi	r30, 0xF7	; 247
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	40 81       	ld	r20, Z
     2b6:	9c 01       	movw	r18, r24
     2b8:	32 95       	swap	r19
     2ba:	22 95       	swap	r18
     2bc:	2f 70       	andi	r18, 0x0F	; 15
     2be:	23 27       	eor	r18, r19
     2c0:	3f 70       	andi	r19, 0x0F	; 15
     2c2:	23 27       	eor	r18, r19
     2c4:	20 7f       	andi	r18, 0xF0	; 240
     2c6:	33 27       	eor	r19, r19
     2c8:	34 2f       	mov	r19, r20
     2ca:	3f 70       	andi	r19, 0x0F	; 15
     2cc:	23 2b       	or	r18, r19
     2ce:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR16 = (mask & towrite) << 4 | LCDDR16 & mask;
     2d0:	ec ef       	ldi	r30, 0xFC	; 252
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	20 81       	ld	r18, Z
     2d6:	89 2f       	mov	r24, r25
     2d8:	99 27       	eor	r25, r25
     2da:	82 95       	swap	r24
     2dc:	8f 70       	andi	r24, 0x0F	; 15
     2de:	82 95       	swap	r24
     2e0:	92 95       	swap	r25
     2e2:	90 7f       	andi	r25, 0xF0	; 240
     2e4:	98 27       	eor	r25, r24
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	98 27       	eor	r25, r24
     2ea:	92 2f       	mov	r25, r18
     2ec:	9f 70       	andi	r25, 0x0F	; 15
     2ee:	89 2b       	or	r24, r25
     2f0:	80 83       	st	Z, r24
     2f2:	66 c0       	rjmp	.+204    	; 0x3c0 <writeChar+0x2b4>
			}
			if (pos == 4)
     2f4:	64 30       	cpi	r22, 0x04	; 4
     2f6:	71 05       	cpc	r23, r1
     2f8:	61 f5       	brne	.+88     	; 0x352 <writeChar+0x246>
			{
				LCDDR2 = (mask & towrite) | LCDDR2 & mask2;
     2fa:	ee ee       	ldi	r30, 0xEE	; 238
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	20 81       	ld	r18, Z
     300:	38 2f       	mov	r19, r24
     302:	3f 70       	andi	r19, 0x0F	; 15
     304:	20 7f       	andi	r18, 0xF0	; 240
     306:	23 2b       	or	r18, r19
     308:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     30a:	9c 01       	movw	r18, r24
     30c:	35 95       	asr	r19
     30e:	27 95       	ror	r18
     310:	35 95       	asr	r19
     312:	27 95       	ror	r18
     314:	35 95       	asr	r19
     316:	27 95       	ror	r18
     318:	35 95       	asr	r19
     31a:	27 95       	ror	r18
				LCDDR7 = (mask & towrite) | LCDDR7 & mask2;
     31c:	e3 ef       	ldi	r30, 0xF3	; 243
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	80 81       	ld	r24, Z
     322:	2f 70       	andi	r18, 0x0F	; 15
     324:	80 7f       	andi	r24, 0xF0	; 240
     326:	82 2b       	or	r24, r18
     328:	80 83       	st	Z, r24
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite) | LCDDR12 & mask2;
     32a:	e8 ef       	ldi	r30, 0xF8	; 248
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	29 2f       	mov	r18, r25
     332:	2f 70       	andi	r18, 0x0F	; 15
     334:	80 7f       	andi	r24, 0xF0	; 240
     336:	82 2b       	or	r24, r18
     338:	80 83       	st	Z, r24
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite) | LCDDR17 & mask2;
     33a:	ed ef       	ldi	r30, 0xFD	; 253
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	80 81       	ld	r24, Z
     340:	95 95       	asr	r25
     342:	95 95       	asr	r25
     344:	95 95       	asr	r25
     346:	95 95       	asr	r25
     348:	9f 70       	andi	r25, 0x0F	; 15
     34a:	80 7f       	andi	r24, 0xF0	; 240
     34c:	89 2b       	or	r24, r25
     34e:	80 83       	st	Z, r24
     350:	37 c0       	rjmp	.+110    	; 0x3c0 <writeChar+0x2b4>
			}
			if (pos == 5)
     352:	65 30       	cpi	r22, 0x05	; 5
     354:	71 05       	cpc	r23, r1
     356:	a1 f5       	brne	.+104    	; 0x3c0 <writeChar+0x2b4>
			{
				LCDDR2 = (mask & towrite) << 4 | LCDDR2 & mask;
     358:	ee ee       	ldi	r30, 0xEE	; 238
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	20 81       	ld	r18, Z
     35e:	38 2f       	mov	r19, r24
     360:	32 95       	swap	r19
     362:	30 7f       	andi	r19, 0xF0	; 240
     364:	2f 70       	andi	r18, 0x0F	; 15
     366:	23 2b       	or	r18, r19
     368:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) << 4 | LCDDR7 & mask;
     36a:	e3 ef       	ldi	r30, 0xF3	; 243
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	40 81       	ld	r20, Z
     370:	9c 01       	movw	r18, r24
     372:	20 7f       	andi	r18, 0xF0	; 240
     374:	33 27       	eor	r19, r19
     376:	34 2f       	mov	r19, r20
     378:	3f 70       	andi	r19, 0x0F	; 15
     37a:	23 2b       	or	r18, r19
     37c:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite) << 4 | LCDDR12 & mask;
     37e:	e8 ef       	ldi	r30, 0xF8	; 248
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	40 81       	ld	r20, Z
     384:	9c 01       	movw	r18, r24
     386:	32 95       	swap	r19
     388:	22 95       	swap	r18
     38a:	2f 70       	andi	r18, 0x0F	; 15
     38c:	23 27       	eor	r18, r19
     38e:	3f 70       	andi	r19, 0x0F	; 15
     390:	23 27       	eor	r18, r19
     392:	20 7f       	andi	r18, 0xF0	; 240
     394:	33 27       	eor	r19, r19
     396:	34 2f       	mov	r19, r20
     398:	3f 70       	andi	r19, 0x0F	; 15
     39a:	23 2b       	or	r18, r19
     39c:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite) << 4 | LCDDR17 & mask;
     39e:	ed ef       	ldi	r30, 0xFD	; 253
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	20 81       	ld	r18, Z
     3a4:	89 2f       	mov	r24, r25
     3a6:	99 27       	eor	r25, r25
     3a8:	82 95       	swap	r24
     3aa:	8f 70       	andi	r24, 0x0F	; 15
     3ac:	82 95       	swap	r24
     3ae:	92 95       	swap	r25
     3b0:	90 7f       	andi	r25, 0xF0	; 240
     3b2:	98 27       	eor	r25, r24
     3b4:	80 7f       	andi	r24, 0xF0	; 240
     3b6:	98 27       	eor	r25, r24
     3b8:	92 2f       	mov	r25, r18
     3ba:	9f 70       	andi	r25, 0x0F	; 15
     3bc:	89 2b       	or	r24, r25
     3be:	80 83       	st	Z, r24
			}
		}
	}
}
     3c0:	64 96       	adiw	r28, 0x14	; 20
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <printAt>:

void printAt(long num, int pos)
{
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	d6 2f       	mov	r29, r22
     3dc:	8a 01       	movw	r16, r20
	int pp = pos;
	writeChar((char)num % 100 / 10 + '0', pp);
     3de:	89 e2       	ldi	r24, 0x29	; 41
     3e0:	68 9f       	mul	r22, r24
     3e2:	81 2d       	mov	r24, r1
     3e4:	11 24       	eor	r1, r1
     3e6:	82 95       	swap	r24
     3e8:	8f 70       	andi	r24, 0x0F	; 15
     3ea:	96 2f       	mov	r25, r22
     3ec:	24 e6       	ldi	r18, 0x64	; 100
     3ee:	82 9f       	mul	r24, r18
     3f0:	90 19       	sub	r25, r0
     3f2:	11 24       	eor	r1, r1
     3f4:	cd ec       	ldi	r28, 0xCD	; 205
     3f6:	9c 9f       	mul	r25, r28
     3f8:	81 2d       	mov	r24, r1
     3fa:	11 24       	eor	r1, r1
     3fc:	86 95       	lsr	r24
     3fe:	86 95       	lsr	r24
     400:	86 95       	lsr	r24
     402:	ba 01       	movw	r22, r20
     404:	80 5d       	subi	r24, 0xD0	; 208
     406:	0e 94 86 00 	call	0x10c	; 0x10c <writeChar>
	pp++;
	writeChar((char)num % 10 + '0', pp);
     40a:	b8 01       	movw	r22, r16
     40c:	6f 5f       	subi	r22, 0xFF	; 255
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	dc 9f       	mul	r29, r28
     412:	c1 2d       	mov	r28, r1
     414:	11 24       	eor	r1, r1
     416:	c6 95       	lsr	r28
     418:	c6 95       	lsr	r28
     41a:	c6 95       	lsr	r28
     41c:	cc 0f       	add	r28, r28
     41e:	8c 2f       	mov	r24, r28
     420:	88 0f       	add	r24, r24
     422:	88 0f       	add	r24, r24
     424:	c8 0f       	add	r28, r24
     426:	8d 2f       	mov	r24, r29
     428:	8c 1b       	sub	r24, r28
     42a:	80 5d       	subi	r24, 0xD0	; 208
     42c:	0e 94 86 00 	call	0x10c	; 0x10c <writeChar>
}
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <update_screen_north>:

void update_screen_north(Queue *self)
{
	printAt(self->north, 0);
     43a:	fc 01       	movw	r30, r24
     43c:	64 81       	ldd	r22, Z+4	; 0x04
     43e:	75 81       	ldd	r23, Z+5	; 0x05
     440:	07 2e       	mov	r0, r23
     442:	00 0c       	add	r0, r0
     444:	88 0b       	sbc	r24, r24
     446:	99 0b       	sbc	r25, r25
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <printAt>
     450:	08 95       	ret

00000452 <update_screen_onbridge>:
}
void update_screen_onbridge(Queue *self)
{
	printAt(self->onbridge,2);
     452:	fc 01       	movw	r30, r24
     454:	64 85       	ldd	r22, Z+12	; 0x0c
     456:	75 85       	ldd	r23, Z+13	; 0x0d
     458:	07 2e       	mov	r0, r23
     45a:	00 0c       	add	r0, r0
     45c:	88 0b       	sbc	r24, r24
     45e:	99 0b       	sbc	r25, r25
     460:	42 e0       	ldi	r20, 0x02	; 2
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <printAt>
     468:	08 95       	ret

0000046a <update_screen_south>:
}
void update_screen_south(Queue *self)
{
	printAt(self->south, 4);
     46a:	fc 01       	movw	r30, r24
     46c:	66 81       	ldd	r22, Z+6	; 0x06
     46e:	77 81       	ldd	r23, Z+7	; 0x07
     470:	07 2e       	mov	r0, r23
     472:	00 0c       	add	r0, r0
     474:	88 0b       	sbc	r24, r24
     476:	99 0b       	sbc	r25, r25
     478:	44 e0       	ldi	r20, 0x04	; 4
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <printAt>
     480:	08 95       	ret

00000482 <transmitter>:
		ASYNC(self,react,3);
	}
	
	
	AFTER(SEC(1),self,testloop,0);
}
     482:	fc 01       	movw	r30, r24
     484:	60 87       	std	Z+8, r22	; 0x08
     486:	71 87       	std	Z+9, r23	; 0x09
     488:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     48c:	08 95       	ret

0000048e <carfinished>:
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	fc 01       	movw	r30, r24
     49c:	c4 84       	ldd	r12, Z+12	; 0x0c
     49e:	d5 84       	ldd	r13, Z+13	; 0x0d
     4a0:	f1 e0       	ldi	r31, 0x01	; 1
     4a2:	cf 1a       	sub	r12, r31
     4a4:	d1 08       	sbc	r13, r1
     4a6:	fc 01       	movw	r30, r24
     4a8:	d5 86       	std	Z+13, r13	; 0x0d
     4aa:	c4 86       	std	Z+12, r12	; 0x0c
     4ac:	0f 2e       	mov	r0, r31
     4ae:	f9 e2       	ldi	r31, 0x29	; 41
     4b0:	ef 2e       	mov	r14, r31
     4b2:	f2 e0       	ldi	r31, 0x02	; 2
     4b4:	ff 2e       	mov	r15, r31
     4b6:	f0 2d       	mov	r31, r0
     4b8:	8c 01       	movw	r16, r24
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	a9 01       	movw	r20, r18
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	cb 01       	movw	r24, r22
     4c6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	df 90       	pop	r13
     4d4:	cf 90       	pop	r12
     4d6:	08 95       	ret

000004d8 <react>:
#include "LCD.h"
//#include "TinyTimber.h"
#include <avr/io.h>


void react(Queue *self,int action) {//react to the interrupt
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	ec 01       	movw	r28, r24
	switch(action) {
     4ea:	61 30       	cpi	r22, 0x01	; 1
     4ec:	71 05       	cpc	r23, r1
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <react+0x1a>
     4f0:	49 c0       	rjmp	.+146    	; 0x584 <__stack+0x85>
     4f2:	1c f4       	brge	.+6      	; 0x4fa <react+0x22>
     4f4:	67 2b       	or	r22, r23
     4f6:	51 f0       	breq	.+20     	; 0x50c <__stack+0xd>
     4f8:	4a c1       	rjmp	.+660    	; 0x78e <__stack+0x28f>
     4fa:	62 30       	cpi	r22, 0x02	; 2
     4fc:	71 05       	cpc	r23, r1
     4fe:	09 f4       	brne	.+2      	; 0x502 <__stack+0x3>
     500:	a7 c0       	rjmp	.+334    	; 0x650 <__stack+0x151>
     502:	63 30       	cpi	r22, 0x03	; 3
     504:	71 05       	cpc	r23, r1
     506:	09 f4       	brne	.+2      	; 0x50a <__stack+0xb>
     508:	df c0       	rjmp	.+446    	; 0x6c8 <__stack+0x1c9>
     50a:	41 c1       	rjmp	.+642    	; 0x78e <__stack+0x28f>
		case 0: //north queue +1 
			self->north +=1;
     50c:	cc 80       	ldd	r12, Y+4	; 0x04
     50e:	dd 80       	ldd	r13, Y+5	; 0x05
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	c8 1a       	sub	r12, r24
     514:	d8 0a       	sbc	r13, r24
     516:	dd 82       	std	Y+5, r13	; 0x05
     518:	cc 82       	std	Y+4, r12	; 0x04
			ASYNC(self,update_screen_north,self->north); //update lcd
     51a:	0f 2e       	mov	r0, r31
     51c:	fd e1       	ldi	r31, 0x1D	; 29
     51e:	ef 2e       	mov	r14, r31
     520:	f2 e0       	ldi	r31, 0x02	; 2
     522:	ff 2e       	mov	r15, r31
     524:	f0 2d       	mov	r31, r0
     526:	8e 01       	movw	r16, r28
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	a9 01       	movw	r20, r18
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	cb 01       	movw	r24, r22
     534:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			if(self->south == 0 && self->onbridge == 0) {
     538:	8e 81       	ldd	r24, Y+6	; 0x06
     53a:	9f 81       	ldd	r25, Y+7	; 0x07
     53c:	89 2b       	or	r24, r25
     53e:	09 f0       	breq	.+2      	; 0x542 <__stack+0x43>
     540:	26 c1       	rjmp	.+588    	; 0x78e <__stack+0x28f>
     542:	ac 85       	ldd	r26, Y+12	; 0x0c
     544:	bd 85       	ldd	r27, Y+13	; 0x0d
     546:	10 97       	sbiw	r26, 0x00	; 0
     548:	39 f4       	brne	.+14     	; 0x558 <__stack+0x59>
	//testloop(self);
	//ASYNC(self,react,1);

}
void transmitter(Queue *self,int lights) {
	self->direction = lights; //only for test
     54a:	89 e0       	ldi	r24, 0x09	; 9
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	99 87       	std	Y+9, r25	; 0x09
     550:	88 87       	std	Y+8, r24	; 0x08
	UDR0 = lights;//send
     552:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     556:	1b c1       	rjmp	.+566    	; 0x78e <__stack+0x28f>
			self->north +=1;
			ASYNC(self,update_screen_north,self->north); //update lcd
			if(self->south == 0 && self->onbridge == 0) {
				transmitter(self,9);
			} else if(self->south == 0) {
				AFTER(SEC(self->onbridge),self,transmitter,9);
     558:	22 e1       	ldi	r18, 0x12	; 18
     55a:	3a e7       	ldi	r19, 0x7A	; 122
     55c:	0e 94 95 10 	call	0x212a	; 0x212a <__usmulhisi3>
     560:	0f 2e       	mov	r0, r31
     562:	f9 e0       	ldi	r31, 0x09	; 9
     564:	cf 2e       	mov	r12, r31
     566:	d1 2c       	mov	r13, r1
     568:	f0 2d       	mov	r31, r0
     56a:	0f 2e       	mov	r0, r31
     56c:	f1 e4       	ldi	r31, 0x41	; 65
     56e:	ef 2e       	mov	r14, r31
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	ff 2e       	mov	r15, r31
     574:	f0 2d       	mov	r31, r0
     576:	8e 01       	movw	r16, r28
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	a9 01       	movw	r20, r18
     57e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
     582:	05 c1       	rjmp	.+522    	; 0x78e <__stack+0x28f>
			}
			break;
		case 1: //north queue -1 car
			self->north -=1;
     584:	cc 80       	ldd	r12, Y+4	; 0x04
     586:	dd 80       	ldd	r13, Y+5	; 0x05
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	c8 1a       	sub	r12, r24
     58c:	d1 08       	sbc	r13, r1
     58e:	dd 82       	std	Y+5, r13	; 0x05
     590:	cc 82       	std	Y+4, r12	; 0x04
			self->counter +=1; //count up send from this direction to prevent infinity
     592:	8a 85       	ldd	r24, Y+10	; 0x0a
     594:	9b 85       	ldd	r25, Y+11	; 0x0b
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	9b 87       	std	Y+11, r25	; 0x0b
     59a:	8a 87       	std	Y+10, r24	; 0x0a
			
			ASYNC(self,update_screen_north,self->north);
     59c:	0f 2e       	mov	r0, r31
     59e:	fd e1       	ldi	r31, 0x1D	; 29
     5a0:	ef 2e       	mov	r14, r31
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	ff 2e       	mov	r15, r31
     5a6:	f0 2d       	mov	r31, r0
     5a8:	8e 01       	movw	r16, r28
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	a9 01       	movw	r20, r18
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	cb 01       	movw	r24, r22
     5b6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			
			self->onbridge +=1; //one car entered bridge
     5ba:	cc 84       	ldd	r12, Y+12	; 0x0c
     5bc:	dd 84       	ldd	r13, Y+13	; 0x0d
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	c8 1a       	sub	r12, r24
     5c2:	d8 0a       	sbc	r13, r24
     5c4:	dd 86       	std	Y+13, r13	; 0x0d
     5c6:	cc 86       	std	Y+12, r12	; 0x0c
			ASYNC(self,update_screen_onbridge,self->onbridge);
     5c8:	0f 2e       	mov	r0, r31
     5ca:	f9 e2       	ldi	r31, 0x29	; 41
     5cc:	ef 2e       	mov	r14, r31
     5ce:	f2 e0       	ldi	r31, 0x02	; 2
     5d0:	ff 2e       	mov	r15, r31
     5d2:	f0 2d       	mov	r31, r0
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	a9 01       	movw	r20, r18
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	cb 01       	movw	r24, r22
     5e0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			
			AFTER(SEC(5),self,carfinished,0); //after 5 seconds it has passed remove from bridge
     5e4:	c1 2c       	mov	r12, r1
     5e6:	d1 2c       	mov	r13, r1
     5e8:	0f 2e       	mov	r0, r31
     5ea:	f7 e4       	ldi	r31, 0x47	; 71
     5ec:	ef 2e       	mov	r14, r31
     5ee:	f2 e0       	ldi	r31, 0x02	; 2
     5f0:	ff 2e       	mov	r15, r31
     5f2:	f0 2d       	mov	r31, r0
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	a9 01       	movw	r20, r18
     5fa:	6a e5       	ldi	r22, 0x5A	; 90
     5fc:	72 e6       	ldi	r23, 0x62	; 98
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			
			if (self->north == 0 || self->counter >= 20) { //empty queue just switch, or if 20 cars already passed this way
     606:	8c 81       	ldd	r24, Y+4	; 0x04
     608:	9d 81       	ldd	r25, Y+5	; 0x05
     60a:	89 2b       	or	r24, r25
     60c:	29 f0       	breq	.+10     	; 0x618 <__stack+0x119>
     60e:	8a 85       	ldd	r24, Y+10	; 0x0a
     610:	9b 85       	ldd	r25, Y+11	; 0x0b
     612:	44 97       	sbiw	r24, 0x14	; 20
     614:	0c f4       	brge	.+2      	; 0x618 <__stack+0x119>
     616:	bb c0       	rjmp	.+374    	; 0x78e <__stack+0x28f>
	//testloop(self);
	//ASYNC(self,react,1);

}
void transmitter(Queue *self,int lights) {
	self->direction = lights; //only for test
     618:	19 86       	std	Y+9, r1	; 0x09
     61a:	18 86       	std	Y+8, r1	; 0x08
	UDR0 = lights;//send
     61c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			
			AFTER(SEC(5),self,carfinished,0); //after 5 seconds it has passed remove from bridge
			
			if (self->north == 0 || self->counter >= 20) { //empty queue just switch, or if 20 cars already passed this way
				transmitter(self,0);
				AFTER(SEC(6),self,transmitter,6); //After 5 sec allow in other direction
     620:	0f 2e       	mov	r0, r31
     622:	f6 e0       	ldi	r31, 0x06	; 6
     624:	cf 2e       	mov	r12, r31
     626:	d1 2c       	mov	r13, r1
     628:	f0 2d       	mov	r31, r0
     62a:	0f 2e       	mov	r0, r31
     62c:	f1 e4       	ldi	r31, 0x41	; 65
     62e:	ef 2e       	mov	r14, r31
     630:	f2 e0       	ldi	r31, 0x02	; 2
     632:	ff 2e       	mov	r15, r31
     634:	f0 2d       	mov	r31, r0
     636:	8e 01       	movw	r16, r28
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	a9 01       	movw	r20, r18
     63e:	6c e6       	ldi	r22, 0x6C	; 108
     640:	7c ed       	ldi	r23, 0xDC	; 220
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
				self->counter = 0;
     64a:	1b 86       	std	Y+11, r1	; 0x0b
     64c:	1a 86       	std	Y+10, r1	; 0x0a
     64e:	9f c0       	rjmp	.+318    	; 0x78e <__stack+0x28f>
			}
			
			
			break;
		case 2: //south queue +1 car
			self->south +=1;
     650:	ce 80       	ldd	r12, Y+6	; 0x06
     652:	df 80       	ldd	r13, Y+7	; 0x07
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	c8 1a       	sub	r12, r24
     658:	d8 0a       	sbc	r13, r24
     65a:	df 82       	std	Y+7, r13	; 0x07
     65c:	ce 82       	std	Y+6, r12	; 0x06
			
			ASYNC(self,update_screen_south,self->south);
     65e:	0f 2e       	mov	r0, r31
     660:	f5 e3       	ldi	r31, 0x35	; 53
     662:	ef 2e       	mov	r14, r31
     664:	f2 e0       	ldi	r31, 0x02	; 2
     666:	ff 2e       	mov	r15, r31
     668:	f0 2d       	mov	r31, r0
     66a:	8e 01       	movw	r16, r28
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	a9 01       	movw	r20, r18
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	cb 01       	movw	r24, r22
     678:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			
			if(self->north == 0 && self->onbridge == 0) {
     67c:	8c 81       	ldd	r24, Y+4	; 0x04
     67e:	9d 81       	ldd	r25, Y+5	; 0x05
     680:	89 2b       	or	r24, r25
     682:	09 f0       	breq	.+2      	; 0x686 <__stack+0x187>
     684:	84 c0       	rjmp	.+264    	; 0x78e <__stack+0x28f>
     686:	ac 85       	ldd	r26, Y+12	; 0x0c
     688:	bd 85       	ldd	r27, Y+13	; 0x0d
     68a:	10 97       	sbiw	r26, 0x00	; 0
     68c:	39 f4       	brne	.+14     	; 0x69c <__stack+0x19d>
	//testloop(self);
	//ASYNC(self,react,1);

}
void transmitter(Queue *self,int lights) {
	self->direction = lights; //only for test
     68e:	86 e0       	ldi	r24, 0x06	; 6
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	99 87       	std	Y+9, r25	; 0x09
     694:	88 87       	std	Y+8, r24	; 0x08
	UDR0 = lights;//send
     696:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     69a:	79 c0       	rjmp	.+242    	; 0x78e <__stack+0x28f>
			
			if(self->north == 0 && self->onbridge == 0) {
				transmitter(self,6);
			} 
			else if(self->north == 0) {
				AFTER(SEC(self->onbridge),self,transmitter,6);
     69c:	22 e1       	ldi	r18, 0x12	; 18
     69e:	3a e7       	ldi	r19, 0x7A	; 122
     6a0:	0e 94 95 10 	call	0x212a	; 0x212a <__usmulhisi3>
     6a4:	0f 2e       	mov	r0, r31
     6a6:	f6 e0       	ldi	r31, 0x06	; 6
     6a8:	cf 2e       	mov	r12, r31
     6aa:	d1 2c       	mov	r13, r1
     6ac:	f0 2d       	mov	r31, r0
     6ae:	0f 2e       	mov	r0, r31
     6b0:	f1 e4       	ldi	r31, 0x41	; 65
     6b2:	ef 2e       	mov	r14, r31
     6b4:	f2 e0       	ldi	r31, 0x02	; 2
     6b6:	ff 2e       	mov	r15, r31
     6b8:	f0 2d       	mov	r31, r0
     6ba:	8e 01       	movw	r16, r28
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	a9 01       	movw	r20, r18
     6c2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
     6c6:	63 c0       	rjmp	.+198    	; 0x78e <__stack+0x28f>
			}
			break;
		case 3: //south queue -1 car
			self->south -=1;
     6c8:	ce 80       	ldd	r12, Y+6	; 0x06
     6ca:	df 80       	ldd	r13, Y+7	; 0x07
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	c8 1a       	sub	r12, r24
     6d0:	d1 08       	sbc	r13, r1
     6d2:	df 82       	std	Y+7, r13	; 0x07
     6d4:	ce 82       	std	Y+6, r12	; 0x06
			ASYNC(self,update_screen_south,self->south);
     6d6:	0f 2e       	mov	r0, r31
     6d8:	f5 e3       	ldi	r31, 0x35	; 53
     6da:	ef 2e       	mov	r14, r31
     6dc:	f2 e0       	ldi	r31, 0x02	; 2
     6de:	ff 2e       	mov	r15, r31
     6e0:	f0 2d       	mov	r31, r0
     6e2:	8e 01       	movw	r16, r28
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	a9 01       	movw	r20, r18
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	cb 01       	movw	r24, r22
     6f0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			
			self->counter +=1; //count up send from this direction to prevent infinity
     6f4:	8a 85       	ldd	r24, Y+10	; 0x0a
     6f6:	9b 85       	ldd	r25, Y+11	; 0x0b
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	9b 87       	std	Y+11, r25	; 0x0b
     6fc:	8a 87       	std	Y+10, r24	; 0x0a
			
			self->onbridge +=1; //one car entered bridge
     6fe:	cc 84       	ldd	r12, Y+12	; 0x0c
     700:	dd 84       	ldd	r13, Y+13	; 0x0d
     702:	8f ef       	ldi	r24, 0xFF	; 255
     704:	c8 1a       	sub	r12, r24
     706:	d8 0a       	sbc	r13, r24
     708:	dd 86       	std	Y+13, r13	; 0x0d
     70a:	cc 86       	std	Y+12, r12	; 0x0c
			ASYNC(self,update_screen_onbridge,self->onbridge);
     70c:	0f 2e       	mov	r0, r31
     70e:	f9 e2       	ldi	r31, 0x29	; 41
     710:	ef 2e       	mov	r14, r31
     712:	f2 e0       	ldi	r31, 0x02	; 2
     714:	ff 2e       	mov	r15, r31
     716:	f0 2d       	mov	r31, r0
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	a9 01       	movw	r20, r18
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	cb 01       	movw	r24, r22
     724:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			
			AFTER(SEC(5),self,carfinished,self);
     728:	6e 01       	movw	r12, r28
     72a:	0f 2e       	mov	r0, r31
     72c:	f7 e4       	ldi	r31, 0x47	; 71
     72e:	ef 2e       	mov	r14, r31
     730:	f2 e0       	ldi	r31, 0x02	; 2
     732:	ff 2e       	mov	r15, r31
     734:	f0 2d       	mov	r31, r0
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	a9 01       	movw	r20, r18
     73c:	6a e5       	ldi	r22, 0x5A	; 90
     73e:	72 e6       	ldi	r23, 0x62	; 98
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			
			if (self->south == 0 || self->counter >= 20) { 
     748:	8e 81       	ldd	r24, Y+6	; 0x06
     74a:	9f 81       	ldd	r25, Y+7	; 0x07
     74c:	89 2b       	or	r24, r25
     74e:	21 f0       	breq	.+8      	; 0x758 <__stack+0x259>
     750:	8a 85       	ldd	r24, Y+10	; 0x0a
     752:	9b 85       	ldd	r25, Y+11	; 0x0b
     754:	44 97       	sbiw	r24, 0x14	; 20
     756:	dc f0       	brlt	.+54     	; 0x78e <__stack+0x28f>
	//testloop(self);
	//ASYNC(self,react,1);

}
void transmitter(Queue *self,int lights) {
	self->direction = lights; //only for test
     758:	19 86       	std	Y+9, r1	; 0x09
     75a:	18 86       	std	Y+8, r1	; 0x08
	UDR0 = lights;//send
     75c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			
			AFTER(SEC(5),self,carfinished,self);
			
			if (self->south == 0 || self->counter >= 20) { 
				transmitter(self,0);
				AFTER(SEC(6),self,transmitter,9); // tell simulator
     760:	0f 2e       	mov	r0, r31
     762:	f9 e0       	ldi	r31, 0x09	; 9
     764:	cf 2e       	mov	r12, r31
     766:	d1 2c       	mov	r13, r1
     768:	f0 2d       	mov	r31, r0
     76a:	0f 2e       	mov	r0, r31
     76c:	f1 e4       	ldi	r31, 0x41	; 65
     76e:	ef 2e       	mov	r14, r31
     770:	f2 e0       	ldi	r31, 0x02	; 2
     772:	ff 2e       	mov	r15, r31
     774:	f0 2d       	mov	r31, r0
     776:	8e 01       	movw	r16, r28
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	a9 01       	movw	r20, r18
     77e:	6c e6       	ldi	r22, 0x6C	; 108
     780:	7c ed       	ldi	r23, 0xDC	; 220
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
				self->counter = 0;
     78a:	1b 86       	std	Y+11, r1	; 0x0b
     78c:	1a 86       	std	Y+10, r1	; 0x0a
				
			}
			
			break;
	}
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	08 95       	ret

000007a0 <init>:
	}
	
	
	AFTER(SEC(1),self,testloop,0);
}
void init(Queue *self, int lights) {
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ec 01       	movw	r28, r24
	update_screen_north(self);
     7a6:	0e 94 1d 02 	call	0x43a	; 0x43a <update_screen_north>
	update_screen_onbridge(self);
     7aa:	ce 01       	movw	r24, r28
     7ac:	0e 94 29 02 	call	0x452	; 0x452 <update_screen_onbridge>
	update_screen_south(self);
     7b0:	ce 01       	movw	r24, r28
     7b2:	0e 94 35 02 	call	0x46a	; 0x46a <update_screen_south>
	//testloop(self);
	//ASYNC(self,react,1);

}
void transmitter(Queue *self,int lights) {
	self->direction = lights; //only for test
     7b6:	89 e0       	ldi	r24, 0x09	; 9
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	99 87       	std	Y+9, r25	; 0x09
     7bc:	88 87       	std	Y+8, r24	; 0x08
	UDR0 = lights;//send
     7be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	update_screen_south(self);
	transmitter(self,9);
	//testloop(self);
	//ASYNC(self,react,1);

}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <initialize+0x6>
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <initialize+0x8>
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	85 e2       	ldi	r24, 0x25	; 37
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	25 e0       	ldi	r18, 0x05	; 5
     7da:	33 e0       	ldi	r19, 0x03	; 3
     7dc:	fc 01       	movw	r30, r24
     7de:	70 97       	sbiw	r30, 0x10	; 16
     7e0:	91 83       	std	Z+1, r25	; 0x01
     7e2:	80 83       	st	Z, r24
     7e4:	40 96       	adiw	r24, 0x10	; 16
     7e6:	82 17       	cp	r24, r18
     7e8:	93 07       	cpc	r25, r19
     7ea:	c1 f7       	brne	.-16     	; 0x7dc <initialize+0x14>
     7ec:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <messages+0xe1>
     7f0:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <messages+0xe0>
     7f4:	e0 e6       	ldi	r30, 0x60	; 96
     7f6:	f1 e0       	ldi	r31, 0x01	; 1
     7f8:	8d e7       	ldi	r24, 0x7D	; 125
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	80 83       	st	Z, r24
     800:	8a e9       	ldi	r24, 0x9A	; 154
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	96 8f       	std	Z+30, r25	; 0x1e
     806:	85 8f       	std	Z+29, r24	; 0x1d
     808:	a7 eb       	ldi	r26, 0xB7	; 183
     80a:	b1 e0       	ldi	r27, 0x01	; 1
     80c:	b3 af       	std	Z+59, r27	; 0x3b
     80e:	a2 af       	std	Z+58, r26	; 0x3a
     810:	1d 92       	st	X+, r1
     812:	1c 92       	st	X, r1
     814:	fa 83       	std	Y+2, r31	; 0x02
     816:	e9 83       	std	Y+1, r30	; 0x01
     818:	e1 e6       	ldi	r30, 0x61	; 97
     81a:	f3 e0       	ldi	r31, 0x03	; 3
     81c:	fc 83       	std	Y+4, r31	; 0x04
     81e:	eb 83       	std	Y+3, r30	; 0x03
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	06 96       	adiw	r24, 0x06	; 6
     826:	0e 94 ab 10 	call	0x2156	; 0x2156 <setjmp>
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	9c 81       	ldd	r25, Y+4	; 0x04
     82e:	e9 81       	ldd	r30, Y+1	; 0x01
     830:	fa 81       	ldd	r31, Y+2	; 0x02
     832:	97 8b       	std	Z+23, r25	; 0x17
     834:	86 8b       	std	Z+22, r24	; 0x16
     836:	91 8f       	std	Z+25, r25	; 0x19
     838:	80 8f       	std	Z+24, r24	; 0x18
     83a:	84 e8       	ldi	r24, 0x84	; 132
     83c:	9f e0       	ldi	r25, 0x0F	; 15
     83e:	94 8f       	std	Z+28, r25	; 0x1c
     840:	83 8f       	std	Z+27, r24	; 0x1b
     842:	15 82       	std	Z+5, r1	; 0x05
     844:	14 82       	std	Z+4, r1	; 0x04
     846:	7d 96       	adiw	r30, 0x1d	; 29
     848:	fa 83       	std	Y+2, r31	; 0x02
     84a:	e9 83       	std	Y+1, r30	; 0x01
     84c:	eb 81       	ldd	r30, Y+3	; 0x03
     84e:	fc 81       	ldd	r31, Y+4	; 0x04
     850:	e0 5a       	subi	r30, 0xA0	; 160
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	fc 83       	std	Y+4, r31	; 0x04
     856:	eb 83       	std	Y+3, r30	; 0x03
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	9a 81       	ldd	r25, Y+2	; 0x02
     85c:	84 5d       	subi	r24, 0xD4	; 212
     85e:	91 40       	sbci	r25, 0x01	; 1
     860:	f9 f6       	brne	.-66     	; 0x820 <initialize+0x58>
     862:	e8 ef       	ldi	r30, 0xF8	; 248
     864:	f1 e0       	ldi	r31, 0x01	; 1
     866:	11 82       	std	Z+1, r1	; 0x01
     868:	10 82       	st	Z, r1
     86a:	15 82       	std	Z+5, r1	; 0x05
     86c:	14 82       	std	Z+4, r1	; 0x04
     86e:	13 82       	std	Z+3, r1	; 0x03
     870:	12 82       	std	Z+2, r1	; 0x02
     872:	e1 e6       	ldi	r30, 0x61	; 97
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 e8       	ldi	r24, 0x80	; 128
     878:	80 83       	st	Z, r24
     87a:	10 82       	st	Z, r1
     87c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     880:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     884:	84 e0       	ldi	r24, 0x04	; 4
     886:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <dispatch>:
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <dispatch+0x6>
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	9a 83       	std	Y+2, r25	; 0x02
     8aa:	89 83       	std	Y+1, r24	; 0x01
     8ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current>
     8b0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current+0x1>
     8b4:	06 96       	adiw	r24, 0x06	; 6
     8b6:	0e 94 ab 10 	call	0x2156	; 0x2156 <setjmp>
     8ba:	89 2b       	or	r24, r25
     8bc:	59 f4       	brne	.+22     	; 0x8d4 <dispatch+0x36>
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	9a 81       	ldd	r25, Y+2	; 0x02
     8c2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <current+0x1>
     8c6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <current>
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	06 96       	adiw	r24, 0x06	; 6
     8d0:	0e 94 cb 10 	call	0x2196	; 0x2196 <longjmp>
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <schedule>:
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <msgQ>
     8ea:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <msgQ+0x1>
     8ee:	30 97       	sbiw	r30, 0x00	; 0
     8f0:	61 f1       	breq	.+88     	; 0x94a <schedule+0x6c>
     8f2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <threadPool>
     8f6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <threadPool+0x1>
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	31 f1       	breq	.+76     	; 0x94a <schedule+0x6c>
     8fe:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <activeStack>
     902:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <activeStack+0x1>
     906:	aa 81       	ldd	r26, Y+2	; 0x02
     908:	bb 81       	ldd	r27, Y+3	; 0x03
     90a:	10 97       	sbiw	r26, 0x00	; 0
     90c:	79 f0       	breq	.+30     	; 0x92c <schedule+0x4e>
     90e:	46 81       	ldd	r20, Z+6	; 0x06
     910:	57 81       	ldd	r21, Z+7	; 0x07
     912:	60 85       	ldd	r22, Z+8	; 0x08
     914:	71 85       	ldd	r23, Z+9	; 0x09
     916:	16 96       	adiw	r26, 0x06	; 6
     918:	0d 91       	ld	r16, X+
     91a:	1d 91       	ld	r17, X+
     91c:	2d 91       	ld	r18, X+
     91e:	3c 91       	ld	r19, X
     920:	19 97       	sbiw	r26, 0x09	; 9
     922:	40 1b       	sub	r20, r16
     924:	51 0b       	sbc	r21, r17
     926:	62 0b       	sbc	r22, r18
     928:	73 0b       	sbc	r23, r19
     92a:	7a f4       	brpl	.+30     	; 0x94a <schedule+0x6c>
     92c:	fc 01       	movw	r30, r24
     92e:	20 81       	ld	r18, Z
     930:	31 81       	ldd	r19, Z+1	; 0x01
     932:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <threadPool+0x1>
     936:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <threadPool>
     93a:	d1 83       	std	Z+1, r29	; 0x01
     93c:	c0 83       	st	Z, r28
     93e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <activeStack+0x1>
     942:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <activeStack>
     946:	0e 94 4f 04 	call	0x89e	; 0x89e <dispatch>
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <__vector_1>:
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
     976:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
     97a:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
     97e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     982:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     986:	c9 01       	movw	r24, r18
     988:	03 2e       	mov	r0, r19
     98a:	00 0c       	add	r0, r0
     98c:	aa 0b       	sbc	r26, r26
     98e:	bb 0b       	sbc	r27, r27
     990:	dc 01       	movw	r26, r24
     992:	99 27       	eor	r25, r25
     994:	88 27       	eor	r24, r24
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	84 2b       	or	r24, r20
     99c:	95 2b       	or	r25, r21
     99e:	a6 2b       	or	r26, r22
     9a0:	b7 2b       	or	r27, r23
     9a2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     9a6:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     9aa:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     9ae:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     9b2:	b0 9b       	sbis	0x16, 0	; 22
     9b4:	1b c0       	rjmp	.+54     	; 0x9ec <__vector_1+0x98>
     9b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     9ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     9be:	c9 01       	movw	r24, r18
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	09 2e       	mov	r0, r25
     9c4:	00 0c       	add	r0, r0
     9c6:	aa 0b       	sbc	r26, r26
     9c8:	bb 0b       	sbc	r27, r27
     9ca:	dc 01       	movw	r26, r24
     9cc:	99 27       	eor	r25, r25
     9ce:	88 27       	eor	r24, r24
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	84 2b       	or	r24, r20
     9d6:	95 2b       	or	r25, r21
     9d8:	a6 2b       	or	r26, r22
     9da:	b7 2b       	or	r27, r23
     9dc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     9e0:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     9e4:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     9e8:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     9ec:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable>
     9f0:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x1>
     9f4:	30 97       	sbiw	r30, 0x00	; 0
     9f6:	39 f0       	breq	.+14     	; 0xa06 <__vector_1+0xb2>
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable>
     a00:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x1>
     a04:	09 95       	icall
     a06:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
     a0a:	ff 91       	pop	r31
     a0c:	ef 91       	pop	r30
     a0e:	bf 91       	pop	r27
     a10:	af 91       	pop	r26
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	7f 91       	pop	r23
     a18:	6f 91       	pop	r22
     a1a:	5f 91       	pop	r21
     a1c:	4f 91       	pop	r20
     a1e:	3f 91       	pop	r19
     a20:	2f 91       	pop	r18
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <__vector_2>:
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
     a4e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
     a52:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
     a56:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a5a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a5e:	c9 01       	movw	r24, r18
     a60:	03 2e       	mov	r0, r19
     a62:	00 0c       	add	r0, r0
     a64:	aa 0b       	sbc	r26, r26
     a66:	bb 0b       	sbc	r27, r27
     a68:	dc 01       	movw	r26, r24
     a6a:	99 27       	eor	r25, r25
     a6c:	88 27       	eor	r24, r24
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	84 2b       	or	r24, r20
     a74:	95 2b       	or	r25, r21
     a76:	a6 2b       	or	r26, r22
     a78:	b7 2b       	or	r27, r23
     a7a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     a7e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     a82:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     a86:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     a8a:	b0 9b       	sbis	0x16, 0	; 22
     a8c:	1b c0       	rjmp	.+54     	; 0xac4 <__vector_2+0x98>
     a8e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a92:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a96:	c9 01       	movw	r24, r18
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	09 2e       	mov	r0, r25
     a9c:	00 0c       	add	r0, r0
     a9e:	aa 0b       	sbc	r26, r26
     aa0:	bb 0b       	sbc	r27, r27
     aa2:	dc 01       	movw	r26, r24
     aa4:	99 27       	eor	r25, r25
     aa6:	88 27       	eor	r24, r24
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	84 2b       	or	r24, r20
     aae:	95 2b       	or	r25, r21
     ab0:	a6 2b       	or	r26, r22
     ab2:	b7 2b       	or	r27, r23
     ab4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     ab8:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     abc:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     ac0:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     ac4:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x2>
     ac8:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x3>
     acc:	30 97       	sbiw	r30, 0x00	; 0
     ace:	39 f0       	breq	.+14     	; 0xade <__vector_2+0xb2>
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x2>
     ad8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x3>
     adc:	09 95       	icall
     ade:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
     ae2:	ff 91       	pop	r31
     ae4:	ef 91       	pop	r30
     ae6:	bf 91       	pop	r27
     ae8:	af 91       	pop	r26
     aea:	9f 91       	pop	r25
     aec:	8f 91       	pop	r24
     aee:	7f 91       	pop	r23
     af0:	6f 91       	pop	r22
     af2:	5f 91       	pop	r21
     af4:	4f 91       	pop	r20
     af6:	3f 91       	pop	r19
     af8:	2f 91       	pop	r18
     afa:	0f 90       	pop	r0
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	0f 90       	pop	r0
     b00:	1f 90       	pop	r1
     b02:	18 95       	reti

00000b04 <__vector_3>:
     b04:	1f 92       	push	r1
     b06:	0f 92       	push	r0
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	0f 92       	push	r0
     b0c:	11 24       	eor	r1, r1
     b0e:	2f 93       	push	r18
     b10:	3f 93       	push	r19
     b12:	4f 93       	push	r20
     b14:	5f 93       	push	r21
     b16:	6f 93       	push	r22
     b18:	7f 93       	push	r23
     b1a:	8f 93       	push	r24
     b1c:	9f 93       	push	r25
     b1e:	af 93       	push	r26
     b20:	bf 93       	push	r27
     b22:	ef 93       	push	r30
     b24:	ff 93       	push	r31
     b26:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
     b2a:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
     b2e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b32:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b36:	c9 01       	movw	r24, r18
     b38:	03 2e       	mov	r0, r19
     b3a:	00 0c       	add	r0, r0
     b3c:	aa 0b       	sbc	r26, r26
     b3e:	bb 0b       	sbc	r27, r27
     b40:	dc 01       	movw	r26, r24
     b42:	99 27       	eor	r25, r25
     b44:	88 27       	eor	r24, r24
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	84 2b       	or	r24, r20
     b4c:	95 2b       	or	r25, r21
     b4e:	a6 2b       	or	r26, r22
     b50:	b7 2b       	or	r27, r23
     b52:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     b56:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     b5a:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     b5e:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     b62:	b0 9b       	sbis	0x16, 0	; 22
     b64:	1b c0       	rjmp	.+54     	; 0xb9c <__vector_3+0x98>
     b66:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b6a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b6e:	c9 01       	movw	r24, r18
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	09 2e       	mov	r0, r25
     b74:	00 0c       	add	r0, r0
     b76:	aa 0b       	sbc	r26, r26
     b78:	bb 0b       	sbc	r27, r27
     b7a:	dc 01       	movw	r26, r24
     b7c:	99 27       	eor	r25, r25
     b7e:	88 27       	eor	r24, r24
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	84 2b       	or	r24, r20
     b86:	95 2b       	or	r25, r21
     b88:	a6 2b       	or	r26, r22
     b8a:	b7 2b       	or	r27, r23
     b8c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     b90:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     b94:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     b98:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     b9c:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x4>
     ba0:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x5>
     ba4:	30 97       	sbiw	r30, 0x00	; 0
     ba6:	39 f0       	breq	.+14     	; 0xbb6 <__vector_3+0xb2>
     ba8:	62 e0       	ldi	r22, 0x02	; 2
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x4>
     bb0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x5>
     bb4:	09 95       	icall
     bb6:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
     bba:	ff 91       	pop	r31
     bbc:	ef 91       	pop	r30
     bbe:	bf 91       	pop	r27
     bc0:	af 91       	pop	r26
     bc2:	9f 91       	pop	r25
     bc4:	8f 91       	pop	r24
     bc6:	7f 91       	pop	r23
     bc8:	6f 91       	pop	r22
     bca:	5f 91       	pop	r21
     bcc:	4f 91       	pop	r20
     bce:	3f 91       	pop	r19
     bd0:	2f 91       	pop	r18
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	0f 90       	pop	r0
     bd8:	1f 90       	pop	r1
     bda:	18 95       	reti

00000bdc <__vector_4>:
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	6f 93       	push	r22
     bf0:	7f 93       	push	r23
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
     bfe:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
     c02:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
     c06:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     c0a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c0e:	c9 01       	movw	r24, r18
     c10:	03 2e       	mov	r0, r19
     c12:	00 0c       	add	r0, r0
     c14:	aa 0b       	sbc	r26, r26
     c16:	bb 0b       	sbc	r27, r27
     c18:	dc 01       	movw	r26, r24
     c1a:	99 27       	eor	r25, r25
     c1c:	88 27       	eor	r24, r24
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	84 2b       	or	r24, r20
     c24:	95 2b       	or	r25, r21
     c26:	a6 2b       	or	r26, r22
     c28:	b7 2b       	or	r27, r23
     c2a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     c2e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     c32:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     c36:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     c3a:	b0 9b       	sbis	0x16, 0	; 22
     c3c:	1b c0       	rjmp	.+54     	; 0xc74 <__vector_4+0x98>
     c3e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     c42:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c46:	c9 01       	movw	r24, r18
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	09 2e       	mov	r0, r25
     c4c:	00 0c       	add	r0, r0
     c4e:	aa 0b       	sbc	r26, r26
     c50:	bb 0b       	sbc	r27, r27
     c52:	dc 01       	movw	r26, r24
     c54:	99 27       	eor	r25, r25
     c56:	88 27       	eor	r24, r24
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	84 2b       	or	r24, r20
     c5e:	95 2b       	or	r25, r21
     c60:	a6 2b       	or	r26, r22
     c62:	b7 2b       	or	r27, r23
     c64:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     c68:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     c6c:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     c70:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     c74:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x6>
     c78:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x7>
     c7c:	30 97       	sbiw	r30, 0x00	; 0
     c7e:	39 f0       	breq	.+14     	; 0xc8e <__vector_4+0xb2>
     c80:	63 e0       	ldi	r22, 0x03	; 3
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x6>
     c88:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x7>
     c8c:	09 95       	icall
     c8e:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
     c92:	ff 91       	pop	r31
     c94:	ef 91       	pop	r30
     c96:	bf 91       	pop	r27
     c98:	af 91       	pop	r26
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	7f 91       	pop	r23
     ca0:	6f 91       	pop	r22
     ca2:	5f 91       	pop	r21
     ca4:	4f 91       	pop	r20
     ca6:	3f 91       	pop	r19
     ca8:	2f 91       	pop	r18
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0
     cb0:	1f 90       	pop	r1
     cb2:	18 95       	reti

00000cb4 <__vector_5>:
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	2f 93       	push	r18
     cc0:	3f 93       	push	r19
     cc2:	4f 93       	push	r20
     cc4:	5f 93       	push	r21
     cc6:	6f 93       	push	r22
     cc8:	7f 93       	push	r23
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
     cd6:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
     cda:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
     cde:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ce2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ce6:	c9 01       	movw	r24, r18
     ce8:	03 2e       	mov	r0, r19
     cea:	00 0c       	add	r0, r0
     cec:	aa 0b       	sbc	r26, r26
     cee:	bb 0b       	sbc	r27, r27
     cf0:	dc 01       	movw	r26, r24
     cf2:	99 27       	eor	r25, r25
     cf4:	88 27       	eor	r24, r24
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	84 2b       	or	r24, r20
     cfc:	95 2b       	or	r25, r21
     cfe:	a6 2b       	or	r26, r22
     d00:	b7 2b       	or	r27, r23
     d02:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     d06:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     d0a:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     d0e:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     d12:	b0 9b       	sbis	0x16, 0	; 22
     d14:	1b c0       	rjmp	.+54     	; 0xd4c <__vector_5+0x98>
     d16:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     d1a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d1e:	c9 01       	movw	r24, r18
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	09 2e       	mov	r0, r25
     d24:	00 0c       	add	r0, r0
     d26:	aa 0b       	sbc	r26, r26
     d28:	bb 0b       	sbc	r27, r27
     d2a:	dc 01       	movw	r26, r24
     d2c:	99 27       	eor	r25, r25
     d2e:	88 27       	eor	r24, r24
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	84 2b       	or	r24, r20
     d36:	95 2b       	or	r25, r21
     d38:	a6 2b       	or	r26, r22
     d3a:	b7 2b       	or	r27, r23
     d3c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     d40:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     d44:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     d48:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     d4c:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x8>
     d50:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x9>
     d54:	30 97       	sbiw	r30, 0x00	; 0
     d56:	39 f0       	breq	.+14     	; 0xd66 <__vector_5+0xb2>
     d58:	64 e0       	ldi	r22, 0x04	; 4
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x8>
     d60:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x9>
     d64:	09 95       	icall
     d66:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__vector_10>:
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
     dae:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
     db2:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
     db6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     dba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     dbe:	c9 01       	movw	r24, r18
     dc0:	03 2e       	mov	r0, r19
     dc2:	00 0c       	add	r0, r0
     dc4:	aa 0b       	sbc	r26, r26
     dc6:	bb 0b       	sbc	r27, r27
     dc8:	dc 01       	movw	r26, r24
     dca:	99 27       	eor	r25, r25
     dcc:	88 27       	eor	r24, r24
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	84 2b       	or	r24, r20
     dd4:	95 2b       	or	r25, r21
     dd6:	a6 2b       	or	r26, r22
     dd8:	b7 2b       	or	r27, r23
     dda:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     dde:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     de2:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     de6:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     dea:	b0 9b       	sbis	0x16, 0	; 22
     dec:	1b c0       	rjmp	.+54     	; 0xe24 <__vector_10+0x98>
     dee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     df2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     df6:	c9 01       	movw	r24, r18
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	09 2e       	mov	r0, r25
     dfc:	00 0c       	add	r0, r0
     dfe:	aa 0b       	sbc	r26, r26
     e00:	bb 0b       	sbc	r27, r27
     e02:	dc 01       	movw	r26, r24
     e04:	99 27       	eor	r25, r25
     e06:	88 27       	eor	r24, r24
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	84 2b       	or	r24, r20
     e0e:	95 2b       	or	r25, r21
     e10:	a6 2b       	or	r26, r22
     e12:	b7 2b       	or	r27, r23
     e14:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     e18:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     e1c:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     e20:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     e24:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0xa>
     e28:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0xb>
     e2c:	30 97       	sbiw	r30, 0x00	; 0
     e2e:	39 f0       	breq	.+14     	; 0xe3e <__vector_10+0xb2>
     e30:	65 e0       	ldi	r22, 0x05	; 5
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0xa>
     e38:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0xb>
     e3c:	09 95       	icall
     e3e:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
     e42:	ff 91       	pop	r31
     e44:	ef 91       	pop	r30
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <__vector_11>:
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
     e8a:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
     e8e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e92:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e96:	c9 01       	movw	r24, r18
     e98:	03 2e       	mov	r0, r19
     e9a:	00 0c       	add	r0, r0
     e9c:	aa 0b       	sbc	r26, r26
     e9e:	bb 0b       	sbc	r27, r27
     ea0:	dc 01       	movw	r26, r24
     ea2:	99 27       	eor	r25, r25
     ea4:	88 27       	eor	r24, r24
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	84 2b       	or	r24, r20
     eac:	95 2b       	or	r25, r21
     eae:	a6 2b       	or	r26, r22
     eb0:	b7 2b       	or	r27, r23
     eb2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     eb6:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     eba:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     ebe:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     ec2:	b0 9b       	sbis	0x16, 0	; 22
     ec4:	1b c0       	rjmp	.+54     	; 0xefc <__vector_11+0x98>
     ec6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     eca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ece:	c9 01       	movw	r24, r18
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	09 2e       	mov	r0, r25
     ed4:	00 0c       	add	r0, r0
     ed6:	aa 0b       	sbc	r26, r26
     ed8:	bb 0b       	sbc	r27, r27
     eda:	dc 01       	movw	r26, r24
     edc:	99 27       	eor	r25, r25
     ede:	88 27       	eor	r24, r24
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	84 2b       	or	r24, r20
     ee6:	95 2b       	or	r25, r21
     ee8:	a6 2b       	or	r26, r22
     eea:	b7 2b       	or	r27, r23
     eec:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     ef0:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     ef4:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     ef8:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     efc:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0xc>
     f00:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0xd>
     f04:	30 97       	sbiw	r30, 0x00	; 0
     f06:	39 f0       	breq	.+14     	; 0xf16 <__vector_11+0xb2>
     f08:	66 e0       	ldi	r22, 0x06	; 6
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0xc>
     f10:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0xd>
     f14:	09 95       	icall
     f16:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
     f1a:	ff 91       	pop	r31
     f1c:	ef 91       	pop	r30
     f1e:	bf 91       	pop	r27
     f20:	af 91       	pop	r26
     f22:	9f 91       	pop	r25
     f24:	8f 91       	pop	r24
     f26:	7f 91       	pop	r23
     f28:	6f 91       	pop	r22
     f2a:	5f 91       	pop	r21
     f2c:	4f 91       	pop	r20
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti

00000f3c <__vector_12>:
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
     f5e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
     f62:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
     f66:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f6a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f6e:	c9 01       	movw	r24, r18
     f70:	03 2e       	mov	r0, r19
     f72:	00 0c       	add	r0, r0
     f74:	aa 0b       	sbc	r26, r26
     f76:	bb 0b       	sbc	r27, r27
     f78:	dc 01       	movw	r26, r24
     f7a:	99 27       	eor	r25, r25
     f7c:	88 27       	eor	r24, r24
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	84 2b       	or	r24, r20
     f84:	95 2b       	or	r25, r21
     f86:	a6 2b       	or	r26, r22
     f88:	b7 2b       	or	r27, r23
     f8a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     f8e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     f92:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     f96:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     f9a:	b0 9b       	sbis	0x16, 0	; 22
     f9c:	1b c0       	rjmp	.+54     	; 0xfd4 <__vector_12+0x98>
     f9e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     fa2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     fa6:	c9 01       	movw	r24, r18
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	09 2e       	mov	r0, r25
     fac:	00 0c       	add	r0, r0
     fae:	aa 0b       	sbc	r26, r26
     fb0:	bb 0b       	sbc	r27, r27
     fb2:	dc 01       	movw	r26, r24
     fb4:	99 27       	eor	r25, r25
     fb6:	88 27       	eor	r24, r24
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	84 2b       	or	r24, r20
     fbe:	95 2b       	or	r25, r21
     fc0:	a6 2b       	or	r26, r22
     fc2:	b7 2b       	or	r27, r23
     fc4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
     fc8:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
     fcc:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
     fd0:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
     fd4:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0xe>
     fd8:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0xf>
     fdc:	30 97       	sbiw	r30, 0x00	; 0
     fde:	39 f0       	breq	.+14     	; 0xfee <__vector_12+0xb2>
     fe0:	67 e0       	ldi	r22, 0x07	; 7
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0xe>
     fe8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0xf>
     fec:	09 95       	icall
     fee:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <__vector_13>:
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
    1036:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    103a:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    103e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1042:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1046:	c9 01       	movw	r24, r18
    1048:	03 2e       	mov	r0, r19
    104a:	00 0c       	add	r0, r0
    104c:	aa 0b       	sbc	r26, r26
    104e:	bb 0b       	sbc	r27, r27
    1050:	dc 01       	movw	r26, r24
    1052:	99 27       	eor	r25, r25
    1054:	88 27       	eor	r24, r24
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	84 2b       	or	r24, r20
    105c:	95 2b       	or	r25, r21
    105e:	a6 2b       	or	r26, r22
    1060:	b7 2b       	or	r27, r23
    1062:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    1066:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    106a:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    106e:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    1072:	b0 9b       	sbis	0x16, 0	; 22
    1074:	1b c0       	rjmp	.+54     	; 0x10ac <__vector_13+0x98>
    1076:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    107a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    107e:	c9 01       	movw	r24, r18
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	09 2e       	mov	r0, r25
    1084:	00 0c       	add	r0, r0
    1086:	aa 0b       	sbc	r26, r26
    1088:	bb 0b       	sbc	r27, r27
    108a:	dc 01       	movw	r26, r24
    108c:	99 27       	eor	r25, r25
    108e:	88 27       	eor	r24, r24
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	84 2b       	or	r24, r20
    1096:	95 2b       	or	r25, r21
    1098:	a6 2b       	or	r26, r22
    109a:	b7 2b       	or	r27, r23
    109c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    10a0:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    10a4:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    10a8:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    10ac:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0x10>
    10b0:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x11>
    10b4:	30 97       	sbiw	r30, 0x00	; 0
    10b6:	39 f0       	breq	.+14     	; 0x10c6 <__vector_13+0xb2>
    10b8:	68 e0       	ldi	r22, 0x08	; 8
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0x10>
    10c0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x11>
    10c4:	09 95       	icall
    10c6:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    10ca:	ff 91       	pop	r31
    10cc:	ef 91       	pop	r30
    10ce:	bf 91       	pop	r27
    10d0:	af 91       	pop	r26
    10d2:	9f 91       	pop	r25
    10d4:	8f 91       	pop	r24
    10d6:	7f 91       	pop	r23
    10d8:	6f 91       	pop	r22
    10da:	5f 91       	pop	r21
    10dc:	4f 91       	pop	r20
    10de:	3f 91       	pop	r19
    10e0:	2f 91       	pop	r18
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <__vector_14>:
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	2f 93       	push	r18
    10f8:	3f 93       	push	r19
    10fa:	4f 93       	push	r20
    10fc:	5f 93       	push	r21
    10fe:	6f 93       	push	r22
    1100:	7f 93       	push	r23
    1102:	8f 93       	push	r24
    1104:	9f 93       	push	r25
    1106:	af 93       	push	r26
    1108:	bf 93       	push	r27
    110a:	ef 93       	push	r30
    110c:	ff 93       	push	r31
    110e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    1112:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    1116:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    111a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    111e:	c9 01       	movw	r24, r18
    1120:	03 2e       	mov	r0, r19
    1122:	00 0c       	add	r0, r0
    1124:	aa 0b       	sbc	r26, r26
    1126:	bb 0b       	sbc	r27, r27
    1128:	dc 01       	movw	r26, r24
    112a:	99 27       	eor	r25, r25
    112c:	88 27       	eor	r24, r24
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	84 2b       	or	r24, r20
    1134:	95 2b       	or	r25, r21
    1136:	a6 2b       	or	r26, r22
    1138:	b7 2b       	or	r27, r23
    113a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    113e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    1142:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    1146:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    114a:	b0 9b       	sbis	0x16, 0	; 22
    114c:	1b c0       	rjmp	.+54     	; 0x1184 <__vector_14+0x98>
    114e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1152:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1156:	c9 01       	movw	r24, r18
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	09 2e       	mov	r0, r25
    115c:	00 0c       	add	r0, r0
    115e:	aa 0b       	sbc	r26, r26
    1160:	bb 0b       	sbc	r27, r27
    1162:	dc 01       	movw	r26, r24
    1164:	99 27       	eor	r25, r25
    1166:	88 27       	eor	r24, r24
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	84 2b       	or	r24, r20
    116e:	95 2b       	or	r25, r21
    1170:	a6 2b       	or	r26, r22
    1172:	b7 2b       	or	r27, r23
    1174:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    1178:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    117c:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    1180:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    1184:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x12>
    1188:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x13>
    118c:	30 97       	sbiw	r30, 0x00	; 0
    118e:	39 f0       	breq	.+14     	; 0x119e <__vector_14+0xb2>
    1190:	69 e0       	ldi	r22, 0x09	; 9
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x12>
    1198:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x13>
    119c:	09 95       	icall
    119e:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    11a2:	ff 91       	pop	r31
    11a4:	ef 91       	pop	r30
    11a6:	bf 91       	pop	r27
    11a8:	af 91       	pop	r26
    11aa:	9f 91       	pop	r25
    11ac:	8f 91       	pop	r24
    11ae:	7f 91       	pop	r23
    11b0:	6f 91       	pop	r22
    11b2:	5f 91       	pop	r21
    11b4:	4f 91       	pop	r20
    11b6:	3f 91       	pop	r19
    11b8:	2f 91       	pop	r18
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <__vector_15>:
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	11 24       	eor	r1, r1
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
    11e6:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    11ea:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    11ee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    11f2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    11f6:	c9 01       	movw	r24, r18
    11f8:	03 2e       	mov	r0, r19
    11fa:	00 0c       	add	r0, r0
    11fc:	aa 0b       	sbc	r26, r26
    11fe:	bb 0b       	sbc	r27, r27
    1200:	dc 01       	movw	r26, r24
    1202:	99 27       	eor	r25, r25
    1204:	88 27       	eor	r24, r24
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	84 2b       	or	r24, r20
    120c:	95 2b       	or	r25, r21
    120e:	a6 2b       	or	r26, r22
    1210:	b7 2b       	or	r27, r23
    1212:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    1216:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    121a:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    121e:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    1222:	b0 9b       	sbis	0x16, 0	; 22
    1224:	1b c0       	rjmp	.+54     	; 0x125c <__vector_15+0x98>
    1226:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    122a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    122e:	c9 01       	movw	r24, r18
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	09 2e       	mov	r0, r25
    1234:	00 0c       	add	r0, r0
    1236:	aa 0b       	sbc	r26, r26
    1238:	bb 0b       	sbc	r27, r27
    123a:	dc 01       	movw	r26, r24
    123c:	99 27       	eor	r25, r25
    123e:	88 27       	eor	r24, r24
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	84 2b       	or	r24, r20
    1246:	95 2b       	or	r25, r21
    1248:	a6 2b       	or	r26, r22
    124a:	b7 2b       	or	r27, r23
    124c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    1250:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    1254:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    1258:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    125c:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x14>
    1260:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x15>
    1264:	30 97       	sbiw	r30, 0x00	; 0
    1266:	39 f0       	breq	.+14     	; 0x1276 <__vector_15+0xb2>
    1268:	6a e0       	ldi	r22, 0x0A	; 10
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x14>
    1270:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x15>
    1274:	09 95       	icall
    1276:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    127a:	ff 91       	pop	r31
    127c:	ef 91       	pop	r30
    127e:	bf 91       	pop	r27
    1280:	af 91       	pop	r26
    1282:	9f 91       	pop	r25
    1284:	8f 91       	pop	r24
    1286:	7f 91       	pop	r23
    1288:	6f 91       	pop	r22
    128a:	5f 91       	pop	r21
    128c:	4f 91       	pop	r20
    128e:	3f 91       	pop	r19
    1290:	2f 91       	pop	r18
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	0f 90       	pop	r0
    1298:	1f 90       	pop	r1
    129a:	18 95       	reti

0000129c <__vector_16>:
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	2f 93       	push	r18
    12a8:	3f 93       	push	r19
    12aa:	4f 93       	push	r20
    12ac:	5f 93       	push	r21
    12ae:	6f 93       	push	r22
    12b0:	7f 93       	push	r23
    12b2:	8f 93       	push	r24
    12b4:	9f 93       	push	r25
    12b6:	af 93       	push	r26
    12b8:	bf 93       	push	r27
    12ba:	ef 93       	push	r30
    12bc:	ff 93       	push	r31
    12be:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    12c2:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    12c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    12ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    12ce:	c9 01       	movw	r24, r18
    12d0:	03 2e       	mov	r0, r19
    12d2:	00 0c       	add	r0, r0
    12d4:	aa 0b       	sbc	r26, r26
    12d6:	bb 0b       	sbc	r27, r27
    12d8:	dc 01       	movw	r26, r24
    12da:	99 27       	eor	r25, r25
    12dc:	88 27       	eor	r24, r24
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	84 2b       	or	r24, r20
    12e4:	95 2b       	or	r25, r21
    12e6:	a6 2b       	or	r26, r22
    12e8:	b7 2b       	or	r27, r23
    12ea:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    12ee:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    12f2:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    12f6:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    12fa:	b0 9b       	sbis	0x16, 0	; 22
    12fc:	1b c0       	rjmp	.+54     	; 0x1334 <__vector_16+0x98>
    12fe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1302:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1306:	c9 01       	movw	r24, r18
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	09 2e       	mov	r0, r25
    130c:	00 0c       	add	r0, r0
    130e:	aa 0b       	sbc	r26, r26
    1310:	bb 0b       	sbc	r27, r27
    1312:	dc 01       	movw	r26, r24
    1314:	99 27       	eor	r25, r25
    1316:	88 27       	eor	r24, r24
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	84 2b       	or	r24, r20
    131e:	95 2b       	or	r25, r21
    1320:	a6 2b       	or	r26, r22
    1322:	b7 2b       	or	r27, r23
    1324:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    1328:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    132c:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    1330:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    1334:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x16>
    1338:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x17>
    133c:	30 97       	sbiw	r30, 0x00	; 0
    133e:	39 f0       	breq	.+14     	; 0x134e <__vector_16+0xb2>
    1340:	6b e0       	ldi	r22, 0x0B	; 11
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x16>
    1348:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x17>
    134c:	09 95       	icall
    134e:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    1352:	ff 91       	pop	r31
    1354:	ef 91       	pop	r30
    1356:	bf 91       	pop	r27
    1358:	af 91       	pop	r26
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	7f 91       	pop	r23
    1360:	6f 91       	pop	r22
    1362:	5f 91       	pop	r21
    1364:	4f 91       	pop	r20
    1366:	3f 91       	pop	r19
    1368:	2f 91       	pop	r18
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_17>:
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	11 24       	eor	r1, r1
    137e:	2f 93       	push	r18
    1380:	3f 93       	push	r19
    1382:	4f 93       	push	r20
    1384:	5f 93       	push	r21
    1386:	6f 93       	push	r22
    1388:	7f 93       	push	r23
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25
    138e:	af 93       	push	r26
    1390:	bf 93       	push	r27
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
    1396:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    139a:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    139e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    13a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    13a6:	c9 01       	movw	r24, r18
    13a8:	03 2e       	mov	r0, r19
    13aa:	00 0c       	add	r0, r0
    13ac:	aa 0b       	sbc	r26, r26
    13ae:	bb 0b       	sbc	r27, r27
    13b0:	dc 01       	movw	r26, r24
    13b2:	99 27       	eor	r25, r25
    13b4:	88 27       	eor	r24, r24
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	84 2b       	or	r24, r20
    13bc:	95 2b       	or	r25, r21
    13be:	a6 2b       	or	r26, r22
    13c0:	b7 2b       	or	r27, r23
    13c2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    13c6:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    13ca:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    13ce:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    13d2:	b0 9b       	sbis	0x16, 0	; 22
    13d4:	1b c0       	rjmp	.+54     	; 0x140c <__vector_17+0x98>
    13d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    13da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    13de:	c9 01       	movw	r24, r18
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	09 2e       	mov	r0, r25
    13e4:	00 0c       	add	r0, r0
    13e6:	aa 0b       	sbc	r26, r26
    13e8:	bb 0b       	sbc	r27, r27
    13ea:	dc 01       	movw	r26, r24
    13ec:	99 27       	eor	r25, r25
    13ee:	88 27       	eor	r24, r24
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	84 2b       	or	r24, r20
    13f6:	95 2b       	or	r25, r21
    13f8:	a6 2b       	or	r26, r22
    13fa:	b7 2b       	or	r27, r23
    13fc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    1400:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    1404:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    1408:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    140c:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x18>
    1410:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x19>
    1414:	30 97       	sbiw	r30, 0x00	; 0
    1416:	39 f0       	breq	.+14     	; 0x1426 <__vector_17+0xb2>
    1418:	6c e0       	ldi	r22, 0x0C	; 12
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x18>
    1420:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x19>
    1424:	09 95       	icall
    1426:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    142a:	ff 91       	pop	r31
    142c:	ef 91       	pop	r30
    142e:	bf 91       	pop	r27
    1430:	af 91       	pop	r26
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	7f 91       	pop	r23
    1438:	6f 91       	pop	r22
    143a:	5f 91       	pop	r21
    143c:	4f 91       	pop	r20
    143e:	3f 91       	pop	r19
    1440:	2f 91       	pop	r18
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	1f 90       	pop	r1
    144a:	18 95       	reti

0000144c <__vector_18>:
    144c:	1f 92       	push	r1
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	2f 93       	push	r18
    1458:	3f 93       	push	r19
    145a:	4f 93       	push	r20
    145c:	5f 93       	push	r21
    145e:	6f 93       	push	r22
    1460:	7f 93       	push	r23
    1462:	8f 93       	push	r24
    1464:	9f 93       	push	r25
    1466:	af 93       	push	r26
    1468:	bf 93       	push	r27
    146a:	ef 93       	push	r30
    146c:	ff 93       	push	r31
    146e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    1472:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    1476:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    147a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    147e:	c9 01       	movw	r24, r18
    1480:	03 2e       	mov	r0, r19
    1482:	00 0c       	add	r0, r0
    1484:	aa 0b       	sbc	r26, r26
    1486:	bb 0b       	sbc	r27, r27
    1488:	dc 01       	movw	r26, r24
    148a:	99 27       	eor	r25, r25
    148c:	88 27       	eor	r24, r24
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	84 2b       	or	r24, r20
    1494:	95 2b       	or	r25, r21
    1496:	a6 2b       	or	r26, r22
    1498:	b7 2b       	or	r27, r23
    149a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    149e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    14a2:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    14a6:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    14aa:	b0 9b       	sbis	0x16, 0	; 22
    14ac:	1b c0       	rjmp	.+54     	; 0x14e4 <__vector_18+0x98>
    14ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    14b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    14b6:	c9 01       	movw	r24, r18
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	09 2e       	mov	r0, r25
    14bc:	00 0c       	add	r0, r0
    14be:	aa 0b       	sbc	r26, r26
    14c0:	bb 0b       	sbc	r27, r27
    14c2:	dc 01       	movw	r26, r24
    14c4:	99 27       	eor	r25, r25
    14c6:	88 27       	eor	r24, r24
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	84 2b       	or	r24, r20
    14ce:	95 2b       	or	r25, r21
    14d0:	a6 2b       	or	r26, r22
    14d2:	b7 2b       	or	r27, r23
    14d4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    14d8:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    14dc:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    14e0:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    14e4:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x1a>
    14e8:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x1b>
    14ec:	30 97       	sbiw	r30, 0x00	; 0
    14ee:	39 f0       	breq	.+14     	; 0x14fe <__vector_18+0xb2>
    14f0:	6d e0       	ldi	r22, 0x0D	; 13
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x1a>
    14f8:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x1b>
    14fc:	09 95       	icall
    14fe:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    1502:	ff 91       	pop	r31
    1504:	ef 91       	pop	r30
    1506:	bf 91       	pop	r27
    1508:	af 91       	pop	r26
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	7f 91       	pop	r23
    1510:	6f 91       	pop	r22
    1512:	5f 91       	pop	r21
    1514:	4f 91       	pop	r20
    1516:	3f 91       	pop	r19
    1518:	2f 91       	pop	r18
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <__vector_19>:
    1524:	1f 92       	push	r1
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	2f 93       	push	r18
    1530:	3f 93       	push	r19
    1532:	4f 93       	push	r20
    1534:	5f 93       	push	r21
    1536:	6f 93       	push	r22
    1538:	7f 93       	push	r23
    153a:	8f 93       	push	r24
    153c:	9f 93       	push	r25
    153e:	af 93       	push	r26
    1540:	bf 93       	push	r27
    1542:	ef 93       	push	r30
    1544:	ff 93       	push	r31
    1546:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    154a:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    154e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1552:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1556:	c9 01       	movw	r24, r18
    1558:	03 2e       	mov	r0, r19
    155a:	00 0c       	add	r0, r0
    155c:	aa 0b       	sbc	r26, r26
    155e:	bb 0b       	sbc	r27, r27
    1560:	dc 01       	movw	r26, r24
    1562:	99 27       	eor	r25, r25
    1564:	88 27       	eor	r24, r24
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	84 2b       	or	r24, r20
    156c:	95 2b       	or	r25, r21
    156e:	a6 2b       	or	r26, r22
    1570:	b7 2b       	or	r27, r23
    1572:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    1576:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    157a:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    157e:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    1582:	b0 9b       	sbis	0x16, 0	; 22
    1584:	1b c0       	rjmp	.+54     	; 0x15bc <__vector_19+0x98>
    1586:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    158a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    158e:	c9 01       	movw	r24, r18
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	09 2e       	mov	r0, r25
    1594:	00 0c       	add	r0, r0
    1596:	aa 0b       	sbc	r26, r26
    1598:	bb 0b       	sbc	r27, r27
    159a:	dc 01       	movw	r26, r24
    159c:	99 27       	eor	r25, r25
    159e:	88 27       	eor	r24, r24
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	84 2b       	or	r24, r20
    15a6:	95 2b       	or	r25, r21
    15a8:	a6 2b       	or	r26, r22
    15aa:	b7 2b       	or	r27, r23
    15ac:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    15b0:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    15b4:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    15b8:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    15bc:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x1c>
    15c0:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x1d>
    15c4:	30 97       	sbiw	r30, 0x00	; 0
    15c6:	39 f0       	breq	.+14     	; 0x15d6 <__vector_19+0xb2>
    15c8:	6e e0       	ldi	r22, 0x0E	; 14
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x1c>
    15d0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x1d>
    15d4:	09 95       	icall
    15d6:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    15da:	ff 91       	pop	r31
    15dc:	ef 91       	pop	r30
    15de:	bf 91       	pop	r27
    15e0:	af 91       	pop	r26
    15e2:	9f 91       	pop	r25
    15e4:	8f 91       	pop	r24
    15e6:	7f 91       	pop	r23
    15e8:	6f 91       	pop	r22
    15ea:	5f 91       	pop	r21
    15ec:	4f 91       	pop	r20
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	1f 90       	pop	r1
    15fa:	18 95       	reti

000015fc <__vector_20>:
    15fc:	1f 92       	push	r1
    15fe:	0f 92       	push	r0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	0f 92       	push	r0
    1604:	11 24       	eor	r1, r1
    1606:	2f 93       	push	r18
    1608:	3f 93       	push	r19
    160a:	4f 93       	push	r20
    160c:	5f 93       	push	r21
    160e:	6f 93       	push	r22
    1610:	7f 93       	push	r23
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
    1616:	af 93       	push	r26
    1618:	bf 93       	push	r27
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
    161e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    1622:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    1626:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    162a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    162e:	c9 01       	movw	r24, r18
    1630:	03 2e       	mov	r0, r19
    1632:	00 0c       	add	r0, r0
    1634:	aa 0b       	sbc	r26, r26
    1636:	bb 0b       	sbc	r27, r27
    1638:	dc 01       	movw	r26, r24
    163a:	99 27       	eor	r25, r25
    163c:	88 27       	eor	r24, r24
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	84 2b       	or	r24, r20
    1644:	95 2b       	or	r25, r21
    1646:	a6 2b       	or	r26, r22
    1648:	b7 2b       	or	r27, r23
    164a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    164e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    1652:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    1656:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    165a:	b0 9b       	sbis	0x16, 0	; 22
    165c:	1b c0       	rjmp	.+54     	; 0x1694 <__vector_20+0x98>
    165e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1662:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1666:	c9 01       	movw	r24, r18
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	09 2e       	mov	r0, r25
    166c:	00 0c       	add	r0, r0
    166e:	aa 0b       	sbc	r26, r26
    1670:	bb 0b       	sbc	r27, r27
    1672:	dc 01       	movw	r26, r24
    1674:	99 27       	eor	r25, r25
    1676:	88 27       	eor	r24, r24
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	84 2b       	or	r24, r20
    167e:	95 2b       	or	r25, r21
    1680:	a6 2b       	or	r26, r22
    1682:	b7 2b       	or	r27, r23
    1684:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    1688:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    168c:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    1690:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    1694:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x1e>
    1698:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x1f>
    169c:	30 97       	sbiw	r30, 0x00	; 0
    169e:	39 f0       	breq	.+14     	; 0x16ae <__vector_20+0xb2>
    16a0:	6f e0       	ldi	r22, 0x0F	; 15
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x1e>
    16a8:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x1f>
    16ac:	09 95       	icall
    16ae:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    16b2:	ff 91       	pop	r31
    16b4:	ef 91       	pop	r30
    16b6:	bf 91       	pop	r27
    16b8:	af 91       	pop	r26
    16ba:	9f 91       	pop	r25
    16bc:	8f 91       	pop	r24
    16be:	7f 91       	pop	r23
    16c0:	6f 91       	pop	r22
    16c2:	5f 91       	pop	r21
    16c4:	4f 91       	pop	r20
    16c6:	3f 91       	pop	r19
    16c8:	2f 91       	pop	r18
    16ca:	0f 90       	pop	r0
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	0f 90       	pop	r0
    16d0:	1f 90       	pop	r1
    16d2:	18 95       	reti

000016d4 <__vector_21>:
    16d4:	1f 92       	push	r1
    16d6:	0f 92       	push	r0
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	0f 92       	push	r0
    16dc:	11 24       	eor	r1, r1
    16de:	2f 93       	push	r18
    16e0:	3f 93       	push	r19
    16e2:	4f 93       	push	r20
    16e4:	5f 93       	push	r21
    16e6:	6f 93       	push	r22
    16e8:	7f 93       	push	r23
    16ea:	8f 93       	push	r24
    16ec:	9f 93       	push	r25
    16ee:	af 93       	push	r26
    16f0:	bf 93       	push	r27
    16f2:	ef 93       	push	r30
    16f4:	ff 93       	push	r31
    16f6:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    16fa:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    16fe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1702:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1706:	c9 01       	movw	r24, r18
    1708:	03 2e       	mov	r0, r19
    170a:	00 0c       	add	r0, r0
    170c:	aa 0b       	sbc	r26, r26
    170e:	bb 0b       	sbc	r27, r27
    1710:	dc 01       	movw	r26, r24
    1712:	99 27       	eor	r25, r25
    1714:	88 27       	eor	r24, r24
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	84 2b       	or	r24, r20
    171c:	95 2b       	or	r25, r21
    171e:	a6 2b       	or	r26, r22
    1720:	b7 2b       	or	r27, r23
    1722:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    1726:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    172a:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    172e:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    1732:	b0 9b       	sbis	0x16, 0	; 22
    1734:	1b c0       	rjmp	.+54     	; 0x176c <__vector_21+0x98>
    1736:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    173a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    173e:	c9 01       	movw	r24, r18
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	09 2e       	mov	r0, r25
    1744:	00 0c       	add	r0, r0
    1746:	aa 0b       	sbc	r26, r26
    1748:	bb 0b       	sbc	r27, r27
    174a:	dc 01       	movw	r26, r24
    174c:	99 27       	eor	r25, r25
    174e:	88 27       	eor	r24, r24
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	84 2b       	or	r24, r20
    1756:	95 2b       	or	r25, r21
    1758:	a6 2b       	or	r26, r22
    175a:	b7 2b       	or	r27, r23
    175c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    1760:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    1764:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    1768:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    176c:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x20>
    1770:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x21>
    1774:	30 97       	sbiw	r30, 0x00	; 0
    1776:	39 f0       	breq	.+14     	; 0x1786 <__vector_21+0xb2>
    1778:	60 e1       	ldi	r22, 0x10	; 16
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x20>
    1780:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x21>
    1784:	09 95       	icall
    1786:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_22>:
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    17d2:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    17d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    17da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    17de:	c9 01       	movw	r24, r18
    17e0:	03 2e       	mov	r0, r19
    17e2:	00 0c       	add	r0, r0
    17e4:	aa 0b       	sbc	r26, r26
    17e6:	bb 0b       	sbc	r27, r27
    17e8:	dc 01       	movw	r26, r24
    17ea:	99 27       	eor	r25, r25
    17ec:	88 27       	eor	r24, r24
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	84 2b       	or	r24, r20
    17f4:	95 2b       	or	r25, r21
    17f6:	a6 2b       	or	r26, r22
    17f8:	b7 2b       	or	r27, r23
    17fa:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    17fe:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    1802:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    1806:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    180a:	b0 9b       	sbis	0x16, 0	; 22
    180c:	1b c0       	rjmp	.+54     	; 0x1844 <__vector_22+0x98>
    180e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1812:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1816:	c9 01       	movw	r24, r18
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	09 2e       	mov	r0, r25
    181c:	00 0c       	add	r0, r0
    181e:	aa 0b       	sbc	r26, r26
    1820:	bb 0b       	sbc	r27, r27
    1822:	dc 01       	movw	r26, r24
    1824:	99 27       	eor	r25, r25
    1826:	88 27       	eor	r24, r24
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	84 2b       	or	r24, r20
    182e:	95 2b       	or	r25, r21
    1830:	a6 2b       	or	r26, r22
    1832:	b7 2b       	or	r27, r23
    1834:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timestamp>
    1838:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timestamp+0x1>
    183c:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <timestamp+0x2>
    1840:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <timestamp+0x3>
    1844:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x22>
    1848:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x23>
    184c:	30 97       	sbiw	r30, 0x00	; 0
    184e:	39 f0       	breq	.+14     	; 0x185e <__vector_22+0xb2>
    1850:	61 e1       	ldi	r22, 0x11	; 17
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x22>
    1858:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x23>
    185c:	09 95       	icall
    185e:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	7f 91       	pop	r23
    1870:	6f 91       	pop	r22
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	1f 90       	pop	r1
    1882:	18 95       	reti

00001884 <enqueueByDeadline>:
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	7b 01       	movw	r14, r22
    1892:	eb 01       	movw	r28, r22
    1894:	a8 81       	ld	r26, Y
    1896:	b9 81       	ldd	r27, Y+1	; 0x01
    1898:	10 97       	sbiw	r26, 0x00	; 0
    189a:	61 f1       	breq	.+88     	; 0x18f4 <enqueueByDeadline+0x70>
    189c:	fc 01       	movw	r30, r24
    189e:	06 81       	ldd	r16, Z+6	; 0x06
    18a0:	17 81       	ldd	r17, Z+7	; 0x07
    18a2:	20 85       	ldd	r18, Z+8	; 0x08
    18a4:	31 85       	ldd	r19, Z+9	; 0x09
    18a6:	16 96       	adiw	r26, 0x06	; 6
    18a8:	4d 91       	ld	r20, X+
    18aa:	5d 91       	ld	r21, X+
    18ac:	6d 91       	ld	r22, X+
    18ae:	7c 91       	ld	r23, X
    18b0:	19 97       	sbiw	r26, 0x09	; 9
    18b2:	04 17       	cp	r16, r20
    18b4:	15 07       	cpc	r17, r21
    18b6:	26 07       	cpc	r18, r22
    18b8:	37 07       	cpc	r19, r23
    18ba:	14 f4       	brge	.+4      	; 0x18c0 <enqueueByDeadline+0x3c>
    18bc:	1b c0       	rjmp	.+54     	; 0x18f4 <enqueueByDeadline+0x70>
    18be:	df 01       	movw	r26, r30
    18c0:	ed 91       	ld	r30, X+
    18c2:	fc 91       	ld	r31, X
    18c4:	11 97       	sbiw	r26, 0x01	; 1
    18c6:	30 97       	sbiw	r30, 0x00	; 0
    18c8:	49 f0       	breq	.+18     	; 0x18dc <enqueueByDeadline+0x58>
    18ca:	46 81       	ldd	r20, Z+6	; 0x06
    18cc:	57 81       	ldd	r21, Z+7	; 0x07
    18ce:	60 85       	ldd	r22, Z+8	; 0x08
    18d0:	71 85       	ldd	r23, Z+9	; 0x09
    18d2:	04 17       	cp	r16, r20
    18d4:	15 07       	cpc	r17, r21
    18d6:	26 07       	cpc	r18, r22
    18d8:	37 07       	cpc	r19, r23
    18da:	8c f7       	brge	.-30     	; 0x18be <enqueueByDeadline+0x3a>
    18dc:	ec 01       	movw	r28, r24
    18de:	f9 83       	std	Y+1, r31	; 0x01
    18e0:	e8 83       	st	Y, r30
    18e2:	10 97       	sbiw	r26, 0x00	; 0
    18e4:	21 f4       	brne	.+8      	; 0x18ee <enqueueByDeadline+0x6a>
    18e6:	f7 01       	movw	r30, r14
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	80 83       	st	Z, r24
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <enqueueByDeadline+0x78>
    18ee:	8d 93       	st	X+, r24
    18f0:	9c 93       	st	X, r25
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <enqueueByDeadline+0x78>
    18f4:	ec 01       	movw	r28, r24
    18f6:	b9 83       	std	Y+1, r27	; 0x01
    18f8:	a8 83       	st	Y, r26
    18fa:	f5 cf       	rjmp	.-22     	; 0x18e6 <enqueueByDeadline+0x62>
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	08 95       	ret

0000190a <enqueueByBaseline>:
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	7b 01       	movw	r14, r22
    1918:	eb 01       	movw	r28, r22
    191a:	a8 81       	ld	r26, Y
    191c:	b9 81       	ldd	r27, Y+1	; 0x01
    191e:	10 97       	sbiw	r26, 0x00	; 0
    1920:	61 f1       	breq	.+88     	; 0x197a <enqueueByBaseline+0x70>
    1922:	fc 01       	movw	r30, r24
    1924:	02 81       	ldd	r16, Z+2	; 0x02
    1926:	13 81       	ldd	r17, Z+3	; 0x03
    1928:	24 81       	ldd	r18, Z+4	; 0x04
    192a:	35 81       	ldd	r19, Z+5	; 0x05
    192c:	12 96       	adiw	r26, 0x02	; 2
    192e:	4d 91       	ld	r20, X+
    1930:	5d 91       	ld	r21, X+
    1932:	6d 91       	ld	r22, X+
    1934:	7c 91       	ld	r23, X
    1936:	15 97       	sbiw	r26, 0x05	; 5
    1938:	04 17       	cp	r16, r20
    193a:	15 07       	cpc	r17, r21
    193c:	26 07       	cpc	r18, r22
    193e:	37 07       	cpc	r19, r23
    1940:	14 f4       	brge	.+4      	; 0x1946 <enqueueByBaseline+0x3c>
    1942:	1b c0       	rjmp	.+54     	; 0x197a <enqueueByBaseline+0x70>
    1944:	df 01       	movw	r26, r30
    1946:	ed 91       	ld	r30, X+
    1948:	fc 91       	ld	r31, X
    194a:	11 97       	sbiw	r26, 0x01	; 1
    194c:	30 97       	sbiw	r30, 0x00	; 0
    194e:	49 f0       	breq	.+18     	; 0x1962 <enqueueByBaseline+0x58>
    1950:	42 81       	ldd	r20, Z+2	; 0x02
    1952:	53 81       	ldd	r21, Z+3	; 0x03
    1954:	64 81       	ldd	r22, Z+4	; 0x04
    1956:	75 81       	ldd	r23, Z+5	; 0x05
    1958:	04 17       	cp	r16, r20
    195a:	15 07       	cpc	r17, r21
    195c:	26 07       	cpc	r18, r22
    195e:	37 07       	cpc	r19, r23
    1960:	8c f7       	brge	.-30     	; 0x1944 <enqueueByBaseline+0x3a>
    1962:	ec 01       	movw	r28, r24
    1964:	f9 83       	std	Y+1, r31	; 0x01
    1966:	e8 83       	st	Y, r30
    1968:	10 97       	sbiw	r26, 0x00	; 0
    196a:	21 f4       	brne	.+8      	; 0x1974 <enqueueByBaseline+0x6a>
    196c:	f7 01       	movw	r30, r14
    196e:	91 83       	std	Z+1, r25	; 0x01
    1970:	80 83       	st	Z, r24
    1972:	07 c0       	rjmp	.+14     	; 0x1982 <enqueueByBaseline+0x78>
    1974:	8d 93       	st	X+, r24
    1976:	9c 93       	st	X, r25
    1978:	04 c0       	rjmp	.+8      	; 0x1982 <enqueueByBaseline+0x78>
    197a:	ec 01       	movw	r28, r24
    197c:	b9 83       	std	Y+1, r27	; 0x01
    197e:	a8 83       	st	Y, r26
    1980:	f5 cf       	rjmp	.-22     	; 0x196c <enqueueByBaseline+0x62>
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	ff 90       	pop	r15
    198c:	ef 90       	pop	r14
    198e:	08 95       	ret

00001990 <dequeue>:
    1990:	dc 01       	movw	r26, r24
    1992:	ed 91       	ld	r30, X+
    1994:	fc 91       	ld	r31, X
    1996:	11 97       	sbiw	r26, 0x01	; 1
    1998:	30 97       	sbiw	r30, 0x00	; 0
    199a:	59 f4       	brne	.+22     	; 0x19b2 <dequeue+0x22>
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    19a2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    19a6:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	83 bf       	out	0x33, r24	; 51
    19ae:	88 95       	sleep
    19b0:	fd cf       	rjmp	.-6      	; 0x19ac <dequeue+0x1c>
    19b2:	20 81       	ld	r18, Z
    19b4:	31 81       	ldd	r19, Z+1	; 0x01
    19b6:	2d 93       	st	X+, r18
    19b8:	3c 93       	st	X, r19
    19ba:	cf 01       	movw	r24, r30
    19bc:	08 95       	ret

000019be <__vector_9>:
    19be:	1f 92       	push	r1
    19c0:	0f 92       	push	r0
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	0f 92       	push	r0
    19c6:	11 24       	eor	r1, r1
    19c8:	2f 93       	push	r18
    19ca:	3f 93       	push	r19
    19cc:	4f 93       	push	r20
    19ce:	5f 93       	push	r21
    19d0:	6f 93       	push	r22
    19d2:	7f 93       	push	r23
    19d4:	8f 93       	push	r24
    19d6:	9f 93       	push	r25
    19d8:	ef 93       	push	r30
    19da:	ff 93       	push	r31
    19dc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <overflows>
    19e0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <overflows+0x1>
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <overflows+0x1>
    19ea:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <overflows>
    19ee:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <timerQ>
    19f2:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <timerQ+0x1>
    19f6:	30 97       	sbiw	r30, 0x00	; 0
    19f8:	01 f1       	breq	.+64     	; 0x1a3a <__vector_9+0x7c>
    19fa:	42 81       	ldd	r20, Z+2	; 0x02
    19fc:	53 81       	ldd	r21, Z+3	; 0x03
    19fe:	64 81       	ldd	r22, Z+4	; 0x04
    1a00:	75 81       	ldd	r23, Z+5	; 0x05
    1a02:	86 17       	cp	r24, r22
    1a04:	97 07       	cpc	r25, r23
    1a06:	c9 f4       	brne	.+50     	; 0x1a3a <__vector_9+0x7c>
    1a08:	ca 01       	movw	r24, r20
    1a0a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1a0e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1a12:	42 1b       	sub	r20, r18
    1a14:	53 0b       	sbc	r21, r19
    1a16:	41 30       	cpi	r20, 0x01	; 1
    1a18:	51 05       	cpc	r21, r1
    1a1a:	29 f4       	brne	.+10     	; 0x1a26 <__vector_9+0x68>
    1a1c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1a20:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a2a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a2e:	ef e6       	ldi	r30, 0x6F	; 111
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	82 60       	ori	r24, 0x02	; 2
    1a36:	80 83       	st	Z, r24
    1a38:	05 c0       	rjmp	.+10     	; 0x1a44 <__vector_9+0x86>
    1a3a:	ef e6       	ldi	r30, 0x6F	; 111
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	8d 7f       	andi	r24, 0xFD	; 253
    1a42:	80 83       	st	Z, r24
    1a44:	ff 91       	pop	r31
    1a46:	ef 91       	pop	r30
    1a48:	9f 91       	pop	r25
    1a4a:	8f 91       	pop	r24
    1a4c:	7f 91       	pop	r23
    1a4e:	6f 91       	pop	r22
    1a50:	5f 91       	pop	r21
    1a52:	4f 91       	pop	r20
    1a54:	3f 91       	pop	r19
    1a56:	2f 91       	pop	r18
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	0f 90       	pop	r0
    1a5e:	1f 90       	pop	r1
    1a60:	18 95       	reti

00001a62 <__vector_7>:
    1a62:	1f 92       	push	r1
    1a64:	0f 92       	push	r0
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	0f 92       	push	r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	2f 93       	push	r18
    1a76:	3f 93       	push	r19
    1a78:	4f 93       	push	r20
    1a7a:	5f 93       	push	r21
    1a7c:	6f 93       	push	r22
    1a7e:	7f 93       	push	r23
    1a80:	8f 93       	push	r24
    1a82:	9f 93       	push	r25
    1a84:	af 93       	push	r26
    1a86:	bf 93       	push	r27
    1a88:	ef 93       	push	r30
    1a8a:	ff 93       	push	r31
    1a8c:	c0 90 32 01 	lds	r12, 0x0132	; 0x800132 <overflows>
    1a90:	d0 90 33 01 	lds	r13, 0x0133	; 0x800133 <overflows+0x1>
    1a94:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1a98:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1a9c:	b0 99       	sbic	0x16, 0	; 22
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <__vector_7+0x5c>
    1aa0:	0d 2c       	mov	r0, r13
    1aa2:	00 0c       	add	r0, r0
    1aa4:	ee 08       	sbc	r14, r14
    1aa6:	ff 08       	sbc	r15, r15
    1aa8:	d6 01       	movw	r26, r12
    1aaa:	99 27       	eor	r25, r25
    1aac:	88 27       	eor	r24, r24
    1aae:	69 01       	movw	r12, r18
    1ab0:	e1 2c       	mov	r14, r1
    1ab2:	f1 2c       	mov	r15, r1
    1ab4:	c8 2a       	or	r12, r24
    1ab6:	d9 2a       	or	r13, r25
    1ab8:	ea 2a       	or	r14, r26
    1aba:	fb 2a       	or	r15, r27
    1abc:	15 c0       	rjmp	.+42     	; 0x1ae8 <__vector_7+0x86>
    1abe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1ac2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	c8 1a       	sub	r12, r24
    1aca:	d8 0a       	sbc	r13, r24
    1acc:	0d 2c       	mov	r0, r13
    1ace:	00 0c       	add	r0, r0
    1ad0:	ee 08       	sbc	r14, r14
    1ad2:	ff 08       	sbc	r15, r15
    1ad4:	d6 01       	movw	r26, r12
    1ad6:	99 27       	eor	r25, r25
    1ad8:	88 27       	eor	r24, r24
    1ada:	69 01       	movw	r12, r18
    1adc:	e1 2c       	mov	r14, r1
    1ade:	f1 2c       	mov	r15, r1
    1ae0:	c8 2a       	or	r12, r24
    1ae2:	d9 2a       	or	r13, r25
    1ae4:	ea 2a       	or	r14, r26
    1ae6:	fb 2a       	or	r15, r27
    1ae8:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <timerQ>
    1aec:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <timerQ+0x1>
    1af0:	30 97       	sbiw	r30, 0x00	; 0
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <__vector_7+0x94>
    1af4:	42 c0       	rjmp	.+132    	; 0x1b7a <__vector_7+0x118>
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	a4 81       	ldd	r26, Z+4	; 0x04
    1afc:	b5 81       	ldd	r27, Z+5	; 0x05
    1afe:	8c 19       	sub	r24, r12
    1b00:	9d 09       	sbc	r25, r13
    1b02:	ae 09       	sbc	r26, r14
    1b04:	bf 09       	sbc	r27, r15
    1b06:	18 16       	cp	r1, r24
    1b08:	19 06       	cpc	r1, r25
    1b0a:	1a 06       	cpc	r1, r26
    1b0c:	1b 06       	cpc	r1, r27
    1b0e:	ec f1       	brlt	.+122    	; 0x1b8a <__vector_7+0x128>
    1b10:	88 e3       	ldi	r24, 0x38	; 56
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	0e 94 c8 0c 	call	0x1990	; 0x1990 <dequeue>
    1b18:	6a e3       	ldi	r22, 0x3A	; 58
    1b1a:	71 e0       	ldi	r23, 0x01	; 1
    1b1c:	0e 94 42 0c 	call	0x1884	; 0x1884 <enqueueByDeadline>
    1b20:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <timerQ>
    1b24:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <timerQ+0x1>
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	39 f1       	breq	.+78     	; 0x1b7a <__vector_7+0x118>
    1b2c:	82 81       	ldd	r24, Z+2	; 0x02
    1b2e:	93 81       	ldd	r25, Z+3	; 0x03
    1b30:	a4 81       	ldd	r26, Z+4	; 0x04
    1b32:	b5 81       	ldd	r27, Z+5	; 0x05
    1b34:	8c 19       	sub	r24, r12
    1b36:	9d 09       	sbc	r25, r13
    1b38:	ae 09       	sbc	r26, r14
    1b3a:	bf 09       	sbc	r27, r15
    1b3c:	18 16       	cp	r1, r24
    1b3e:	19 06       	cpc	r1, r25
    1b40:	1a 06       	cpc	r1, r26
    1b42:	1b 06       	cpc	r1, r27
    1b44:	2c f7       	brge	.-54     	; 0x1b10 <__vector_7+0xae>
    1b46:	21 c0       	rjmp	.+66     	; 0x1b8a <__vector_7+0x128>
    1b48:	9c 01       	movw	r18, r24
    1b4a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1b4e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1b52:	84 1b       	sub	r24, r20
    1b54:	95 0b       	sbc	r25, r21
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	31 f4       	brne	.+12     	; 0x1b66 <__vector_7+0x104>
    1b5a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1b5e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1b62:	2f 5f       	subi	r18, 0xFF	; 255
    1b64:	3f 4f       	sbci	r19, 0xFF	; 255
    1b66:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b6a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b6e:	ef e6       	ldi	r30, 0x6F	; 111
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	82 60       	ori	r24, 0x02	; 2
    1b76:	80 83       	st	Z, r24
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <__vector_7+0x122>
    1b7a:	ef e6       	ldi	r30, 0x6F	; 111
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8d 7f       	andi	r24, 0xFD	; 253
    1b82:	80 83       	st	Z, r24
    1b84:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    1b88:	0c c0       	rjmp	.+24     	; 0x1ba2 <__vector_7+0x140>
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	93 81       	ldd	r25, Z+3	; 0x03
    1b8e:	a4 81       	ldd	r26, Z+4	; 0x04
    1b90:	b5 81       	ldd	r27, Z+5	; 0x05
    1b92:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    1b96:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    1b9a:	2a 17       	cp	r18, r26
    1b9c:	3b 07       	cpc	r19, r27
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <__vector_7+0x118>
    1ba0:	d3 cf       	rjmp	.-90     	; 0x1b48 <__vector_7+0xe6>
    1ba2:	ff 91       	pop	r31
    1ba4:	ef 91       	pop	r30
    1ba6:	bf 91       	pop	r27
    1ba8:	af 91       	pop	r26
    1baa:	9f 91       	pop	r25
    1bac:	8f 91       	pop	r24
    1bae:	7f 91       	pop	r23
    1bb0:	6f 91       	pop	r22
    1bb2:	5f 91       	pop	r21
    1bb4:	4f 91       	pop	r20
    1bb6:	3f 91       	pop	r19
    1bb8:	2f 91       	pop	r18
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	0f 90       	pop	r0
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	0f 90       	pop	r0
    1bc8:	1f 90       	pop	r1
    1bca:	18 95       	reti

00001bcc <async>:
    1bcc:	3f 92       	push	r3
    1bce:	4f 92       	push	r4
    1bd0:	5f 92       	push	r5
    1bd2:	6f 92       	push	r6
    1bd4:	7f 92       	push	r7
    1bd6:	8f 92       	push	r8
    1bd8:	9f 92       	push	r9
    1bda:	af 92       	push	r10
    1bdc:	bf 92       	push	r11
    1bde:	cf 92       	push	r12
    1be0:	df 92       	push	r13
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	2b 01       	movw	r4, r22
    1bf0:	3c 01       	movw	r6, r24
    1bf2:	49 01       	movw	r8, r18
    1bf4:	5a 01       	movw	r10, r20
    1bf6:	8f b7       	in	r24, 0x3f	; 63
    1bf8:	80 78       	andi	r24, 0x80	; 128
    1bfa:	38 2e       	mov	r3, r24
    1bfc:	f8 94       	cli
    1bfe:	8e e0       	ldi	r24, 0x0E	; 14
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	0e 94 c8 0c 	call	0x1990	; 0x1990 <dequeue>
    1c06:	ec 01       	movw	r28, r24
    1c08:	1b 87       	std	Y+11, r17	; 0x0b
    1c0a:	0a 87       	std	Y+10, r16	; 0x0a
    1c0c:	fd 86       	std	Y+13, r15	; 0x0d
    1c0e:	ec 86       	std	Y+12, r14	; 0x0c
    1c10:	df 86       	std	Y+15, r13	; 0x0f
    1c12:	ce 86       	std	Y+14, r12	; 0x0e
    1c14:	33 20       	and	r3, r3
    1c16:	61 f0       	breq	.+24     	; 0x1c30 <async+0x64>
    1c18:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <current>
    1c1c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <current+0x1>
    1c20:	02 80       	ldd	r0, Z+2	; 0x02
    1c22:	f3 81       	ldd	r31, Z+3	; 0x03
    1c24:	e0 2d       	mov	r30, r0
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	a4 81       	ldd	r26, Z+4	; 0x04
    1c2c:	b5 81       	ldd	r27, Z+5	; 0x05
    1c2e:	08 c0       	rjmp	.+16     	; 0x1c40 <async+0x74>
    1c30:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <timestamp>
    1c34:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <timestamp+0x1>
    1c38:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <timestamp+0x2>
    1c3c:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <timestamp+0x3>
    1c40:	48 0e       	add	r4, r24
    1c42:	59 1e       	adc	r5, r25
    1c44:	6a 1e       	adc	r6, r26
    1c46:	7b 1e       	adc	r7, r27
    1c48:	4a 82       	std	Y+2, r4	; 0x02
    1c4a:	5b 82       	std	Y+3, r5	; 0x03
    1c4c:	6c 82       	std	Y+4, r6	; 0x04
    1c4e:	7d 82       	std	Y+5, r7	; 0x05
    1c50:	18 14       	cp	r1, r8
    1c52:	19 04       	cpc	r1, r9
    1c54:	1a 04       	cpc	r1, r10
    1c56:	1b 04       	cpc	r1, r11
    1c58:	44 f0       	brlt	.+16     	; 0x1c6a <async+0x9e>
    1c5a:	0f 2e       	mov	r0, r31
    1c5c:	88 24       	eor	r8, r8
    1c5e:	8a 94       	dec	r8
    1c60:	98 2c       	mov	r9, r8
    1c62:	a8 2c       	mov	r10, r8
    1c64:	ff e7       	ldi	r31, 0x7F	; 127
    1c66:	bf 2e       	mov	r11, r31
    1c68:	f0 2d       	mov	r31, r0
    1c6a:	84 0c       	add	r8, r4
    1c6c:	95 1c       	adc	r9, r5
    1c6e:	a6 1c       	adc	r10, r6
    1c70:	b7 1c       	adc	r11, r7
    1c72:	8e 82       	std	Y+6, r8	; 0x06
    1c74:	9f 82       	std	Y+7, r9	; 0x07
    1c76:	a8 86       	std	Y+8, r10	; 0x08
    1c78:	b9 86       	std	Y+9, r11	; 0x09
    1c7a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <overflows>
    1c7e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <overflows+0x1>
    1c82:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1c86:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1c8a:	b0 99       	sbic	0x16, 0	; 22
    1c8c:	0e c0       	rjmp	.+28     	; 0x1caa <async+0xde>
    1c8e:	09 2e       	mov	r0, r25
    1c90:	00 0c       	add	r0, r0
    1c92:	aa 0b       	sbc	r26, r26
    1c94:	bb 0b       	sbc	r27, r27
    1c96:	dc 01       	movw	r26, r24
    1c98:	99 27       	eor	r25, r25
    1c9a:	88 27       	eor	r24, r24
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	84 2b       	or	r24, r20
    1ca2:	95 2b       	or	r25, r21
    1ca4:	a6 2b       	or	r26, r22
    1ca6:	b7 2b       	or	r27, r23
    1ca8:	13 c0       	rjmp	.+38     	; 0x1cd0 <async+0x104>
    1caa:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1cae:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	09 2e       	mov	r0, r25
    1cb6:	00 0c       	add	r0, r0
    1cb8:	aa 0b       	sbc	r26, r26
    1cba:	bb 0b       	sbc	r27, r27
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	99 27       	eor	r25, r25
    1cc0:	88 27       	eor	r24, r24
    1cc2:	a9 01       	movw	r20, r18
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	84 2b       	or	r24, r20
    1cca:	95 2b       	or	r25, r21
    1ccc:	a6 2b       	or	r26, r22
    1cce:	b7 2b       	or	r27, r23
    1cd0:	48 1a       	sub	r4, r24
    1cd2:	59 0a       	sbc	r5, r25
    1cd4:	6a 0a       	sbc	r6, r26
    1cd6:	7b 0a       	sbc	r7, r27
    1cd8:	14 14       	cp	r1, r4
    1cda:	15 04       	cpc	r1, r5
    1cdc:	16 04       	cpc	r1, r6
    1cde:	17 04       	cpc	r1, r7
    1ce0:	ac f5       	brge	.+106    	; 0x1d4c <async+0x180>
    1ce2:	68 e3       	ldi	r22, 0x38	; 56
    1ce4:	71 e0       	ldi	r23, 0x01	; 1
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	0e 94 85 0c 	call	0x190a	; 0x190a <enqueueByBaseline>
    1cec:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <timerQ>
    1cf0:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <timerQ+0x1>
    1cf4:	30 97       	sbiw	r30, 0x00	; 0
    1cf6:	21 f1       	breq	.+72     	; 0x1d40 <async+0x174>
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	93 81       	ldd	r25, Z+3	; 0x03
    1cfc:	a4 81       	ldd	r26, Z+4	; 0x04
    1cfe:	b5 81       	ldd	r27, Z+5	; 0x05
    1d00:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <overflows>
    1d04:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <overflows+0x1>
    1d08:	2a 17       	cp	r18, r26
    1d0a:	3b 07       	cpc	r19, r27
    1d0c:	c9 f4       	brne	.+50     	; 0x1d40 <async+0x174>
    1d0e:	9c 01       	movw	r18, r24
    1d10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1d14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1d18:	84 1b       	sub	r24, r20
    1d1a:	95 0b       	sbc	r25, r21
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	31 f4       	brne	.+12     	; 0x1d2c <async+0x160>
    1d20:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1d24:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1d30:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1d34:	ef e6       	ldi	r30, 0x6F	; 111
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	82 60       	ori	r24, 0x02	; 2
    1d3c:	80 83       	st	Z, r24
    1d3e:	41 c0       	rjmp	.+130    	; 0x1dc2 <async+0x1f6>
    1d40:	ef e6       	ldi	r30, 0x6F	; 111
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8d 7f       	andi	r24, 0xFD	; 253
    1d48:	80 83       	st	Z, r24
    1d4a:	3b c0       	rjmp	.+118    	; 0x1dc2 <async+0x1f6>
    1d4c:	6a e3       	ldi	r22, 0x3A	; 58
    1d4e:	71 e0       	ldi	r23, 0x01	; 1
    1d50:	ce 01       	movw	r24, r28
    1d52:	0e 94 42 0c 	call	0x1884	; 0x1884 <enqueueByDeadline>
    1d56:	33 20       	and	r3, r3
    1d58:	b9 f1       	breq	.+110    	; 0x1dc8 <async+0x1fc>
    1d5a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <threadPool>
    1d5e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <threadPool+0x1>
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	81 f1       	breq	.+96     	; 0x1dc6 <async+0x1fa>
    1d66:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <activeStack>
    1d6a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <activeStack+0x1>
    1d6e:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <msgQ>
    1d72:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <msgQ+0x1>
    1d76:	02 81       	ldd	r16, Z+2	; 0x02
    1d78:	13 81       	ldd	r17, Z+3	; 0x03
    1d7a:	d9 01       	movw	r26, r18
    1d7c:	16 96       	adiw	r26, 0x06	; 6
    1d7e:	4d 91       	ld	r20, X+
    1d80:	5d 91       	ld	r21, X+
    1d82:	6d 91       	ld	r22, X+
    1d84:	7c 91       	ld	r23, X
    1d86:	19 97       	sbiw	r26, 0x09	; 9
    1d88:	d8 01       	movw	r26, r16
    1d8a:	16 96       	adiw	r26, 0x06	; 6
    1d8c:	0d 91       	ld	r16, X+
    1d8e:	1d 91       	ld	r17, X+
    1d90:	2d 91       	ld	r18, X+
    1d92:	3c 91       	ld	r19, X
    1d94:	19 97       	sbiw	r26, 0x09	; 9
    1d96:	40 1b       	sub	r20, r16
    1d98:	51 0b       	sbc	r21, r17
    1d9a:	62 0b       	sbc	r22, r18
    1d9c:	73 0b       	sbc	r23, r19
    1d9e:	9a f4       	brpl	.+38     	; 0x1dc6 <async+0x1fa>
    1da0:	dc 01       	movw	r26, r24
    1da2:	2d 91       	ld	r18, X+
    1da4:	3c 91       	ld	r19, X
    1da6:	11 97       	sbiw	r26, 0x01	; 1
    1da8:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <threadPool+0x1>
    1dac:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <threadPool>
    1db0:	ed 93       	st	X+, r30
    1db2:	fc 93       	st	X, r31
    1db4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <activeStack+0x1>
    1db8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <activeStack>
    1dbc:	0e 94 4f 04 	call	0x89e	; 0x89e <dispatch>
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <async+0x1fa>
    1dc2:	33 20       	and	r3, r3
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <async+0x1fc>
    1dc6:	78 94       	sei
    1dc8:	ce 01       	movw	r24, r28
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	ff 90       	pop	r15
    1dd4:	ef 90       	pop	r14
    1dd6:	df 90       	pop	r13
    1dd8:	cf 90       	pop	r12
    1dda:	bf 90       	pop	r11
    1ddc:	af 90       	pop	r10
    1dde:	9f 90       	pop	r9
    1de0:	8f 90       	pop	r8
    1de2:	7f 90       	pop	r7
    1de4:	6f 90       	pop	r6
    1de6:	5f 90       	pop	r5
    1de8:	4f 90       	pop	r4
    1dea:	3f 90       	pop	r3
    1dec:	08 95       	ret

00001dee <sync>:
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	ec 01       	movw	r28, r24
    1e00:	7b 01       	movw	r14, r22
    1e02:	6a 01       	movw	r12, r20
    1e04:	1f b7       	in	r17, 0x3f	; 63
    1e06:	10 78       	andi	r17, 0x80	; 128
    1e08:	f8 94       	cli
    1e0a:	a8 81       	ld	r26, Y
    1e0c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e0e:	10 97       	sbiw	r26, 0x00	; 0
    1e10:	61 f1       	breq	.+88     	; 0x1e6a <sync+0x7c>
    1e12:	14 96       	adiw	r26, 0x04	; 4
    1e14:	ed 91       	ld	r30, X+
    1e16:	fc 91       	ld	r31, X
    1e18:	15 97       	sbiw	r26, 0x05	; 5
    1e1a:	30 97       	sbiw	r30, 0x00	; 0
    1e1c:	41 f0       	breq	.+16     	; 0x1e2e <sync+0x40>
    1e1e:	a0 81       	ld	r26, Z
    1e20:	b1 81       	ldd	r27, Z+1	; 0x01
    1e22:	14 96       	adiw	r26, 0x04	; 4
    1e24:	ed 91       	ld	r30, X+
    1e26:	fc 91       	ld	r31, X
    1e28:	15 97       	sbiw	r26, 0x05	; 5
    1e2a:	30 97       	sbiw	r30, 0x00	; 0
    1e2c:	c1 f7       	brne	.-16     	; 0x1e1e <sync+0x30>
    1e2e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <current>
    1e32:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <current+0x1>
    1e36:	2a 17       	cp	r18, r26
    1e38:	3b 07       	cpc	r19, r27
    1e3a:	21 f0       	breq	.+8      	; 0x1e44 <sync+0x56>
    1e3c:	11 23       	and	r17, r17
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <sync+0x54>
    1e40:	3d c0       	rjmp	.+122    	; 0x1ebc <sync+0xce>
    1e42:	07 c0       	rjmp	.+14     	; 0x1e52 <sync+0x64>
    1e44:	11 23       	and	r17, r17
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <sync+0x5c>
    1e48:	3c c0       	rjmp	.+120    	; 0x1ec2 <sync+0xd4>
    1e4a:	78 94       	sei
    1e4c:	8f ef       	ldi	r24, 0xFF	; 255
    1e4e:	9f ef       	ldi	r25, 0xFF	; 255
    1e50:	52 c0       	rjmp	.+164    	; 0x1ef6 <sync+0x108>
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	9b 81       	ldd	r25, Y+3	; 0x03
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	d1 f1       	breq	.+116    	; 0x1ece <sync+0xe0>
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	15 82       	std	Z+5, r1	; 0x05
    1e5e:	14 82       	std	Z+4, r1	; 0x04
    1e60:	36 c0       	rjmp	.+108    	; 0x1ece <sync+0xe0>
    1e62:	78 94       	sei
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	46 c0       	rjmp	.+140    	; 0x1ef6 <sync+0x108>
    1e6a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current>
    1e6e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current+0x1>
    1e72:	99 83       	std	Y+1, r25	; 0x01
    1e74:	88 83       	st	Y, r24
    1e76:	11 23       	and	r17, r17
    1e78:	29 f0       	breq	.+10     	; 0x1e84 <sync+0x96>
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <sync+0x96>
    1e82:	78 94       	sei
    1e84:	b6 01       	movw	r22, r12
    1e86:	ce 01       	movw	r24, r28
    1e88:	f7 01       	movw	r30, r14
    1e8a:	09 95       	icall
    1e8c:	f8 2e       	mov	r15, r24
    1e8e:	09 2f       	mov	r16, r25
    1e90:	8f b7       	in	r24, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	19 82       	std	Y+1, r1	; 0x01
    1e96:	18 82       	st	Y, r1
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	82 30       	cpi	r24, 0x02	; 2
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	38 f0       	brcs	.+14     	; 0x1eb0 <sync+0xc2>
    1ea2:	1b 82       	std	Y+3, r1	; 0x03
    1ea4:	1a 82       	std	Y+2, r1	; 0x02
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	15 82       	std	Z+5, r1	; 0x05
    1eaa:	14 82       	std	Z+4, r1	; 0x04
    1eac:	0e 94 4f 04 	call	0x89e	; 0x89e <dispatch>
    1eb0:	11 23       	and	r17, r17
    1eb2:	51 f0       	breq	.+20     	; 0x1ec8 <sync+0xda>
    1eb4:	78 94       	sei
    1eb6:	8f 2d       	mov	r24, r15
    1eb8:	90 2f       	mov	r25, r16
    1eba:	1d c0       	rjmp	.+58     	; 0x1ef6 <sync+0x108>
    1ebc:	8f ef       	ldi	r24, 0xFF	; 255
    1ebe:	9f ef       	ldi	r25, 0xFF	; 255
    1ec0:	1a c0       	rjmp	.+52     	; 0x1ef6 <sync+0x108>
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	9f ef       	ldi	r25, 0xFF	; 255
    1ec6:	17 c0       	rjmp	.+46     	; 0x1ef6 <sync+0x108>
    1ec8:	8f 2d       	mov	r24, r15
    1eca:	90 2f       	mov	r25, r16
    1ecc:	14 c0       	rjmp	.+40     	; 0x1ef6 <sync+0x108>
    1ece:	3b 83       	std	Y+3, r19	; 0x03
    1ed0:	2a 83       	std	Y+2, r18	; 0x02
    1ed2:	f9 01       	movw	r30, r18
    1ed4:	d5 83       	std	Z+5, r29	; 0x05
    1ed6:	c4 83       	std	Z+4, r28	; 0x04
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 4f 04 	call	0x89e	; 0x89e <dispatch>
    1ede:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <current>
    1ee2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <current+0x1>
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	89 2b       	or	r24, r25
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <sync+0x102>
    1eee:	b9 cf       	rjmp	.-142    	; 0x1e62 <sync+0x74>
    1ef0:	f9 83       	std	Y+1, r31	; 0x01
    1ef2:	e8 83       	st	Y, r30
    1ef4:	c2 cf       	rjmp	.-124    	; 0x1e7a <sync+0x8c>
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	df 90       	pop	r13
    1f04:	cf 90       	pop	r12
    1f06:	08 95       	ret

00001f08 <run>:
    1f08:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <current>
    1f0c:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <current+0x1>
    1f10:	8a e3       	ldi	r24, 0x3A	; 58
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	0e 94 c8 0c 	call	0x1990	; 0x1990 <dequeue>
    1f18:	ec 01       	movw	r28, r24
    1f1a:	d8 01       	movw	r26, r16
    1f1c:	13 96       	adiw	r26, 0x03	; 3
    1f1e:	9c 93       	st	X, r25
    1f20:	8e 93       	st	-X, r24
    1f22:	12 97       	sbiw	r26, 0x02	; 2
    1f24:	78 94       	sei
    1f26:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f28:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f2a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f2c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f32:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <sync>
    1f36:	8f b7       	in	r24, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <msgPool>
    1f3e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <msgPool+0x1>
    1f42:	99 83       	std	Y+1, r25	; 0x01
    1f44:	88 83       	st	Y, r24
    1f46:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <msgPool+0x1>
    1f4a:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <msgPool>
    1f4e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <activeStack>
    1f52:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <activeStack+0x1>
    1f56:	00 81       	ld	r16, Z
    1f58:	11 81       	ldd	r17, Z+1	; 0x01
    1f5a:	e8 01       	movw	r28, r16
    1f5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f5e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f60:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <msgQ>
    1f64:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <msgQ+0x1>
    1f68:	10 97       	sbiw	r26, 0x00	; 0
    1f6a:	c1 f0       	breq	.+48     	; 0x1f9c <run+0x94>
    1f6c:	21 15       	cp	r18, r1
    1f6e:	31 05       	cpc	r19, r1
    1f70:	59 f2       	breq	.-106    	; 0x1f08 <run>
    1f72:	16 96       	adiw	r26, 0x06	; 6
    1f74:	8d 91       	ld	r24, X+
    1f76:	9d 91       	ld	r25, X+
    1f78:	0d 90       	ld	r0, X+
    1f7a:	bc 91       	ld	r27, X
    1f7c:	a0 2d       	mov	r26, r0
    1f7e:	e9 01       	movw	r28, r18
    1f80:	4e 81       	ldd	r20, Y+6	; 0x06
    1f82:	5f 81       	ldd	r21, Y+7	; 0x07
    1f84:	68 85       	ldd	r22, Y+8	; 0x08
    1f86:	79 85       	ldd	r23, Y+9	; 0x09
    1f88:	84 1b       	sub	r24, r20
    1f8a:	95 0b       	sbc	r25, r21
    1f8c:	a6 0b       	sbc	r26, r22
    1f8e:	b7 0b       	sbc	r27, r23
    1f90:	18 16       	cp	r1, r24
    1f92:	19 06       	cpc	r1, r25
    1f94:	1a 06       	cpc	r1, r26
    1f96:	1b 06       	cpc	r1, r27
    1f98:	0c f0       	brlt	.+2      	; 0x1f9c <run+0x94>
    1f9a:	b6 cf       	rjmp	.-148    	; 0x1f08 <run>
    1f9c:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <activeStack+0x1>
    1fa0:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <activeStack>
    1fa4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <threadPool>
    1fa8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <threadPool+0x1>
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	80 83       	st	Z, r24
    1fb0:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <threadPool+0x1>
    1fb4:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <threadPool>
    1fb8:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <activeStack>
    1fbc:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <activeStack+0x1>
    1fc0:	14 96       	adiw	r26, 0x04	; 4
    1fc2:	ed 91       	ld	r30, X+
    1fc4:	fc 91       	ld	r31, X
    1fc6:	15 97       	sbiw	r26, 0x05	; 5
    1fc8:	30 97       	sbiw	r30, 0x00	; 0
    1fca:	41 f0       	breq	.+16     	; 0x1fdc <run+0xd4>
    1fcc:	a0 81       	ld	r26, Z
    1fce:	b1 81       	ldd	r27, Z+1	; 0x01
    1fd0:	14 96       	adiw	r26, 0x04	; 4
    1fd2:	ed 91       	ld	r30, X+
    1fd4:	fc 91       	ld	r31, X
    1fd6:	15 97       	sbiw	r26, 0x05	; 5
    1fd8:	30 97       	sbiw	r30, 0x00	; 0
    1fda:	c1 f7       	brne	.-16     	; 0x1fcc <run+0xc4>
    1fdc:	cd 01       	movw	r24, r26
    1fde:	0e 94 4f 04 	call	0x89e	; 0x89e <dispatch>
    1fe2:	92 cf       	rjmp	.-220    	; 0x1f08 <run>

00001fe4 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1fe4:	42 31       	cpi	r20, 0x12	; 18
    1fe6:	b8 f4       	brcc	.+46     	; 0x2016 <install+0x32>
        char status;
        DISABLE(status);
    1fe8:	2f b7       	in	r18, 0x3f	; 63
    1fea:	f8 94       	cli
        otable[i] = obj;
    1fec:	50 e0       	ldi	r21, 0x00	; 0
    1fee:	44 0f       	add	r20, r20
    1ff0:	55 1f       	adc	r21, r21
    1ff2:	fa 01       	movw	r30, r20
    1ff4:	e4 5c       	subi	r30, 0xC4	; 196
    1ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	80 83       	st	Z, r24
        mtable[i] = m;
    1ffc:	fa 01       	movw	r30, r20
    1ffe:	ec 52       	subi	r30, 0x2C	; 44
    2000:	fe 4f       	sbci	r31, 0xFE	; 254
    2002:	71 83       	std	Z+1, r23	; 0x01
    2004:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	fc 01       	movw	r30, r24
    200c:	53 83       	std	Z+3, r21	; 0x03
    200e:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2010:	22 23       	and	r18, r18
    2012:	0c f4       	brge	.+2      	; 0x2016 <install+0x32>
    2014:	78 94       	sei
    2016:	08 95       	ret

00002018 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2018:	8c 01       	movw	r16, r24
    201a:	7b 01       	movw	r14, r22
    201c:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    201e:	8f b7       	in	r24, 0x3f	; 63
    2020:	f8 94       	cli
    initialize();
    2022:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <initialize>
    ENABLE(1);
    2026:	78 94       	sei
    if (m != NULL)
    2028:	e1 14       	cp	r14, r1
    202a:	f1 04       	cpc	r15, r1
    202c:	41 f0       	breq	.+16     	; 0x203e <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	a9 01       	movw	r20, r18
    2034:	60 e0       	ldi	r22, 0x00	; 0
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	cb 01       	movw	r24, r22
    203a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
    DISABLE(status);
    203e:	8f b7       	in	r24, 0x3f	; 63
    2040:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2042:	0e 94 6f 04 	call	0x8de	; 0x8de <schedule>
    ENABLE(1);
    2046:	78 94       	sei
    while (1) {
        SLEEP();
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	83 bf       	out	0x33, r24	; 51
    204c:	88 95       	sleep
    204e:	fd cf       	rjmp	.-6      	; 0x204a <tinytimber+0x32>

00002050 <USART_>:
 */ 
#include <avr/io.h>
#include "Queue.h"
#include "USART.h"

void USART_(USART *self) {
    2050:	cf 92       	push	r12
    2052:	df 92       	push	r13
    2054:	ef 92       	push	r14
    2056:	ff 92       	push	r15
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	fc 01       	movw	r30, r24
	/*while(1) {
		LCDDR0 = 15;
	}*/
	switch(UDR0 & 15) { //receive
    205e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2062:	9f 70       	andi	r25, 0x0F	; 15
    2064:	92 30       	cpi	r25, 0x02	; 2
    2066:	e1 f0       	breq	.+56     	; 0x20a0 <USART_+0x50>
    2068:	18 f4       	brcc	.+6      	; 0x2070 <USART_+0x20>
    206a:	91 30       	cpi	r25, 0x01	; 1
    206c:	31 f0       	breq	.+12     	; 0x207a <USART_+0x2a>
    206e:	56 c0       	rjmp	.+172    	; 0x211c <USART_+0xcc>
    2070:	94 30       	cpi	r25, 0x04	; 4
    2072:	51 f1       	breq	.+84     	; 0x20c8 <USART_+0x78>
    2074:	98 30       	cpi	r25, 0x08	; 8
    2076:	e9 f1       	breq	.+122    	; 0x20f2 <USART_+0xa2>
    2078:	51 c0       	rjmp	.+162    	; 0x211c <USART_+0xcc>
		case 1: //Northbound car arrival
			ASYNC(self->queue,react,0);
    207a:	04 81       	ldd	r16, Z+4	; 0x04
    207c:	15 81       	ldd	r17, Z+5	; 0x05
    207e:	c1 2c       	mov	r12, r1
    2080:	d1 2c       	mov	r13, r1
    2082:	0f 2e       	mov	r0, r31
    2084:	fc e6       	ldi	r31, 0x6C	; 108
    2086:	ef 2e       	mov	r14, r31
    2088:	f2 e0       	ldi	r31, 0x02	; 2
    208a:	ff 2e       	mov	r15, r31
    208c:	f0 2d       	mov	r31, r0
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	a9 01       	movw	r20, r18
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	cb 01       	movw	r24, r22
    209a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			break;
    209e:	3e c0       	rjmp	.+124    	; 0x211c <USART_+0xcc>
		case 2://Northbound bridge entry
			ASYNC(self->queue,react,1);
    20a0:	04 81       	ldd	r16, Z+4	; 0x04
    20a2:	15 81       	ldd	r17, Z+5	; 0x05
    20a4:	cc 24       	eor	r12, r12
    20a6:	c3 94       	inc	r12
    20a8:	d1 2c       	mov	r13, r1
    20aa:	0f 2e       	mov	r0, r31
    20ac:	fc e6       	ldi	r31, 0x6C	; 108
    20ae:	ef 2e       	mov	r14, r31
    20b0:	f2 e0       	ldi	r31, 0x02	; 2
    20b2:	ff 2e       	mov	r15, r31
    20b4:	f0 2d       	mov	r31, r0
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	a9 01       	movw	r20, r18
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	cb 01       	movw	r24, r22
    20c2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			break;
    20c6:	2a c0       	rjmp	.+84     	; 0x211c <USART_+0xcc>
		case 4://Southbound car arrival
			ASYNC(self->queue,react,2);
    20c8:	04 81       	ldd	r16, Z+4	; 0x04
    20ca:	15 81       	ldd	r17, Z+5	; 0x05
    20cc:	68 94       	set
    20ce:	cc 24       	eor	r12, r12
    20d0:	c1 f8       	bld	r12, 1
    20d2:	d1 2c       	mov	r13, r1
    20d4:	0f 2e       	mov	r0, r31
    20d6:	fc e6       	ldi	r31, 0x6C	; 108
    20d8:	ef 2e       	mov	r14, r31
    20da:	f2 e0       	ldi	r31, 0x02	; 2
    20dc:	ff 2e       	mov	r15, r31
    20de:	f0 2d       	mov	r31, r0
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	a9 01       	movw	r20, r18
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	70 e0       	ldi	r23, 0x00	; 0
    20ea:	cb 01       	movw	r24, r22
    20ec:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			break;
    20f0:	15 c0       	rjmp	.+42     	; 0x211c <USART_+0xcc>
		case 8://Southbound bridge entry
			ASYNC(self->queue,react,3);
    20f2:	04 81       	ldd	r16, Z+4	; 0x04
    20f4:	15 81       	ldd	r17, Z+5	; 0x05
    20f6:	0f 2e       	mov	r0, r31
    20f8:	f3 e0       	ldi	r31, 0x03	; 3
    20fa:	cf 2e       	mov	r12, r31
    20fc:	d1 2c       	mov	r13, r1
    20fe:	f0 2d       	mov	r31, r0
    2100:	0f 2e       	mov	r0, r31
    2102:	fc e6       	ldi	r31, 0x6C	; 108
    2104:	ef 2e       	mov	r14, r31
    2106:	f2 e0       	ldi	r31, 0x02	; 2
    2108:	ff 2e       	mov	r15, r31
    210a:	f0 2d       	mov	r31, r0
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	a9 01       	movw	r20, r18
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	cb 01       	movw	r24, r22
    2118:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <async>
			break;
	}
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	ff 90       	pop	r15
    2122:	ef 90       	pop	r14
    2124:	df 90       	pop	r13
    2126:	cf 90       	pop	r12
    2128:	08 95       	ret

0000212a <__usmulhisi3>:
    212a:	0e 94 9c 10 	call	0x2138	; 0x2138 <__umulhisi3>

0000212e <__usmulhisi3_tail>:
    212e:	b7 ff       	sbrs	r27, 7
    2130:	08 95       	ret
    2132:	82 1b       	sub	r24, r18
    2134:	93 0b       	sbc	r25, r19
    2136:	08 95       	ret

00002138 <__umulhisi3>:
    2138:	a2 9f       	mul	r26, r18
    213a:	b0 01       	movw	r22, r0
    213c:	b3 9f       	mul	r27, r19
    213e:	c0 01       	movw	r24, r0
    2140:	a3 9f       	mul	r26, r19
    2142:	70 0d       	add	r23, r0
    2144:	81 1d       	adc	r24, r1
    2146:	11 24       	eor	r1, r1
    2148:	91 1d       	adc	r25, r1
    214a:	b2 9f       	mul	r27, r18
    214c:	70 0d       	add	r23, r0
    214e:	81 1d       	adc	r24, r1
    2150:	11 24       	eor	r1, r1
    2152:	91 1d       	adc	r25, r1
    2154:	08 95       	ret

00002156 <setjmp>:
    2156:	dc 01       	movw	r26, r24
    2158:	2d 92       	st	X+, r2
    215a:	3d 92       	st	X+, r3
    215c:	4d 92       	st	X+, r4
    215e:	5d 92       	st	X+, r5
    2160:	6d 92       	st	X+, r6
    2162:	7d 92       	st	X+, r7
    2164:	8d 92       	st	X+, r8
    2166:	9d 92       	st	X+, r9
    2168:	ad 92       	st	X+, r10
    216a:	bd 92       	st	X+, r11
    216c:	cd 92       	st	X+, r12
    216e:	dd 92       	st	X+, r13
    2170:	ed 92       	st	X+, r14
    2172:	fd 92       	st	X+, r15
    2174:	0d 93       	st	X+, r16
    2176:	1d 93       	st	X+, r17
    2178:	cd 93       	st	X+, r28
    217a:	dd 93       	st	X+, r29
    217c:	ff 91       	pop	r31
    217e:	ef 91       	pop	r30
    2180:	8d b7       	in	r24, 0x3d	; 61
    2182:	8d 93       	st	X+, r24
    2184:	8e b7       	in	r24, 0x3e	; 62
    2186:	8d 93       	st	X+, r24
    2188:	8f b7       	in	r24, 0x3f	; 63
    218a:	8d 93       	st	X+, r24
    218c:	ed 93       	st	X+, r30
    218e:	fd 93       	st	X+, r31
    2190:	88 27       	eor	r24, r24
    2192:	99 27       	eor	r25, r25
    2194:	09 94       	ijmp

00002196 <longjmp>:
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	81 30       	cpi	r24, 0x01	; 1
    219c:	91 05       	cpc	r25, r1
    219e:	81 1d       	adc	r24, r1
    21a0:	2d 90       	ld	r2, X+
    21a2:	3d 90       	ld	r3, X+
    21a4:	4d 90       	ld	r4, X+
    21a6:	5d 90       	ld	r5, X+
    21a8:	6d 90       	ld	r6, X+
    21aa:	7d 90       	ld	r7, X+
    21ac:	8d 90       	ld	r8, X+
    21ae:	9d 90       	ld	r9, X+
    21b0:	ad 90       	ld	r10, X+
    21b2:	bd 90       	ld	r11, X+
    21b4:	cd 90       	ld	r12, X+
    21b6:	dd 90       	ld	r13, X+
    21b8:	ed 90       	ld	r14, X+
    21ba:	fd 90       	ld	r15, X+
    21bc:	0d 91       	ld	r16, X+
    21be:	1d 91       	ld	r17, X+
    21c0:	cd 91       	ld	r28, X+
    21c2:	dd 91       	ld	r29, X+
    21c4:	ed 91       	ld	r30, X+
    21c6:	fd 91       	ld	r31, X+
    21c8:	0d 90       	ld	r0, X+
    21ca:	f8 94       	cli
    21cc:	fe bf       	out	0x3e, r31	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	ed bf       	out	0x3d, r30	; 61
    21d2:	ed 91       	ld	r30, X+
    21d4:	fd 91       	ld	r31, X+
    21d6:	09 94       	ijmp

000021d8 <_exit>:
    21d8:	f8 94       	cli

000021da <__stop_program>:
    21da:	ff cf       	rjmp	.-2      	; 0x21da <__stop_program>
