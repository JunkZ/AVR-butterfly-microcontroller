
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000005b8  0000062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000044c  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ff  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000245  00000000  00000000  00000d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e1  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005b4  00000000  00000000  000012d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  00001885  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 eb       	ldi	r30, 0xB8	; 184
  70:	f5 e0       	ldi	r31, 0x05	; 5
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 31       	cpi	r26, 0x14	; 20
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 90 02 	call	0x520	; 0x520 <main>
  82:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <LCD_init>:

#include <avr/io.h>

void LCD_init(void) {
	/* 1/3 bias, 1/4 duty cycle, 25 segments */
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  8a:	87 eb       	ldi	r24, 0xB7	; 183
  8c:	80 93 e5 00 	sts	0x00E5, r24

	/* 16 prescaler (no change needed), 8 clock divide*/
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  90:	87 e0       	ldi	r24, 0x07	; 7
  92:	80 93 e6 00 	sts	0x00E6, r24

	/*300 Mu s driver time and output voltage 3.35V*/
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	80 93 e7 00 	sts	0x00E7, r24

	/*enable lcd with low power waveform and no interrupt and no blanking(on update)*/
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
  9c:	80 ec       	ldi	r24, 0xC0	; 192
  9e:	80 93 e4 00 	sts	0x00E4, r24
  a2:	08 95       	ret

000000a4 <is_prime>:
		x--;
	}
	
	
}
int is_prime(long i) {
  a4:	cf 92       	push	r12
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	6b 01       	movw	r12, r22
  b2:	7c 01       	movw	r14, r24
	int n = 2;
	while (n < i) {
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	c8 16       	cp	r12, r24
  b8:	d1 04       	cpc	r13, r1
  ba:	e1 04       	cpc	r14, r1
  bc:	f1 04       	cpc	r15, r1
  be:	7c f1       	brlt	.+94     	; 0x11e <is_prime+0x7a>
		if ((i % n) == 0) {
  c0:	d7 01       	movw	r26, r14
  c2:	c6 01       	movw	r24, r12
  c4:	81 70       	andi	r24, 0x01	; 1
  c6:	99 27       	eor	r25, r25
  c8:	aa 27       	eor	r26, r26
  ca:	b0 78       	andi	r27, 0x80	; 128
  cc:	bb 23       	and	r27, r27
  ce:	54 f4       	brge	.+20     	; 0xe4 <is_prime+0x40>
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	a1 09       	sbc	r26, r1
  d4:	b1 09       	sbc	r27, r1
  d6:	8e 6f       	ori	r24, 0xFE	; 254
  d8:	9f 6f       	ori	r25, 0xFF	; 255
  da:	af 6f       	ori	r26, 0xFF	; 255
  dc:	bf 6f       	ori	r27, 0xFF	; 255
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	a1 1d       	adc	r26, r1
  e2:	b1 1d       	adc	r27, r1
  e4:	89 2b       	or	r24, r25
  e6:	8a 2b       	or	r24, r26
  e8:	8b 2b       	or	r24, r27
  ea:	e1 f0       	breq	.+56     	; 0x124 <is_prime+0x80>
	}
	
	
}
int is_prime(long i) {
	int n = 2;
  ec:	c2 e0       	ldi	r28, 0x02	; 2
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	08 c0       	rjmp	.+16     	; 0x102 <is_prime+0x5e>
	while (n < i) {
		if ((i % n) == 0) {
  f2:	c7 01       	movw	r24, r14
  f4:	b6 01       	movw	r22, r12
  f6:	0e 94 99 02 	call	0x532	; 0x532 <__divmodsi4>
  fa:	67 2b       	or	r22, r23
  fc:	68 2b       	or	r22, r24
  fe:	69 2b       	or	r22, r25
 100:	a1 f0       	breq	.+40     	; 0x12a <is_prime+0x86>
			return 0;
		}
		n++;
 102:	21 96       	adiw	r28, 0x01	; 1
	
	
}
int is_prime(long i) {
	int n = 2;
	while (n < i) {
 104:	9e 01       	movw	r18, r28
 106:	44 27       	eor	r20, r20
 108:	37 fd       	sbrc	r19, 7
 10a:	40 95       	com	r20
 10c:	54 2f       	mov	r21, r20
 10e:	2c 15       	cp	r18, r12
 110:	3d 05       	cpc	r19, r13
 112:	4e 05       	cpc	r20, r14
 114:	5f 05       	cpc	r21, r15
 116:	6c f3       	brlt	.-38     	; 0xf2 <is_prime+0x4e>
		if ((i % n) == 0) {
			return 0;
		}
		n++;
	}
	return 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	08 c0       	rjmp	.+16     	; 0x12e <is_prime+0x8a>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	05 c0       	rjmp	.+10     	; 0x12e <is_prime+0x8a>
}
int is_prime(long i) {
	int n = 2;
	while (n < i) {
		if ((i % n) == 0) {
			return 0;
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <is_prime+0x8a>
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
		}
		n++;
	}
	return 1;
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	ff 90       	pop	r15
 134:	ef 90       	pop	r14
 136:	df 90       	pop	r13
 138:	cf 90       	pop	r12
 13a:	08 95       	ret

0000013c <writechar>:
void writechar(char ch, int pos) {
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	64 97       	sbiw	r28, 0x14	; 20
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
	int numbers[10] = {
 150:	94 e1       	ldi	r25, 0x14	; 20
 152:	e0 e0       	ldi	r30, 0x00	; 0
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	de 01       	movw	r26, r28
 158:	11 96       	adiw	r26, 0x01	; 1
 15a:	01 90       	ld	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	9a 95       	dec	r25
 160:	e1 f7       	brne	.-8      	; 0x15a <writechar+0x1e>
		0x0111,
		0x1F51,
		0x0B51
	};
	
	if (pos >= 0 && pos <= 5) {
 162:	66 30       	cpi	r22, 0x06	; 6
 164:	71 05       	cpc	r23, r1
 166:	08 f0       	brcs	.+2      	; 0x16a <writechar+0x2e>
 168:	fd c0       	rjmp	.+506    	; 0x364 <writechar+0x228>
		if (ch >= 0 && ch <= 9) {
 16a:	8a 30       	cpi	r24, 0x0A	; 10
 16c:	08 f0       	brcs	.+2      	; 0x170 <writechar+0x34>
 16e:	fa c0       	rjmp	.+500    	; 0x364 <writechar+0x228>
			int mask = 0xF;
			int mask2 = 0xF0;
			int towrite = numbers[ch];
 170:	e8 2f       	mov	r30, r24
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	ec 0f       	add	r30, r28
 17a:	fd 1f       	adc	r31, r29
 17c:	81 81       	ldd	r24, Z+1	; 0x01
 17e:	92 81       	ldd	r25, Z+2	; 0x02
			
			if (pos == 0) {
 180:	61 15       	cp	r22, r1
 182:	71 05       	cpc	r23, r1
 184:	51 f5       	brne	.+84     	; 0x1da <writechar+0x9e>
				LCDDR0 = (mask & towrite) | LCDDR0;
 186:	ec ee       	ldi	r30, 0xEC	; 236
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	20 81       	ld	r18, Z
 18c:	38 2f       	mov	r19, r24
 18e:	3f 70       	andi	r19, 0x0F	; 15
 190:	23 2b       	or	r18, r19
 192:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 194:	9c 01       	movw	r18, r24
 196:	35 95       	asr	r19
 198:	27 95       	ror	r18
 19a:	35 95       	asr	r19
 19c:	27 95       	ror	r18
 19e:	35 95       	asr	r19
 1a0:	27 95       	ror	r18
 1a2:	35 95       	asr	r19
 1a4:	27 95       	ror	r18
				LCDDR5 = (mask & towrite) | LCDDR5;
 1a6:	e1 ef       	ldi	r30, 0xF1	; 241
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	30 81       	ld	r19, Z
 1ac:	2f 70       	andi	r18, 0x0F	; 15
 1ae:	23 2b       	or	r18, r19
 1b0:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) | LCDDR10;
 1b2:	e6 ef       	ldi	r30, 0xF6	; 246
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	20 81       	ld	r18, Z
 1b8:	39 2f       	mov	r19, r25
 1ba:	3f 70       	andi	r19, 0x0F	; 15
 1bc:	23 2b       	or	r18, r19
 1be:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	98 02       	muls	r25, r24
 1c4:	81 2d       	mov	r24, r1
 1c6:	99 0b       	sbc	r25, r25
 1c8:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) | LCDDR15;
 1ca:	eb ef       	ldi	r30, 0xFB	; 251
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	20 81       	ld	r18, Z
 1d0:	38 2f       	mov	r19, r24
 1d2:	3f 70       	andi	r19, 0x0F	; 15
 1d4:	23 2b       	or	r18, r19
 1d6:	20 83       	st	Z, r18
 1d8:	52 c0       	rjmp	.+164    	; 0x27e <writechar+0x142>
			}
			if (pos == 1) {
 1da:	61 30       	cpi	r22, 0x01	; 1
 1dc:	71 05       	cpc	r23, r1
 1de:	11 f5       	brne	.+68     	; 0x224 <writechar+0xe8>
				LCDDR0 = (mask & towrite) << 4;
 1e0:	28 2f       	mov	r18, r24
 1e2:	22 95       	swap	r18
 1e4:	20 7f       	andi	r18, 0xF0	; 240
 1e6:	20 93 ec 00 	sts	0x00EC, r18
				towrite = (towrite >> 4);
 1ea:	9c 01       	movw	r18, r24
 1ec:	35 95       	asr	r19
 1ee:	27 95       	ror	r18
 1f0:	35 95       	asr	r19
 1f2:	27 95       	ror	r18
 1f4:	35 95       	asr	r19
 1f6:	27 95       	ror	r18
 1f8:	35 95       	asr	r19
 1fa:	27 95       	ror	r18
				LCDDR5 = (mask & towrite) << 4;
 1fc:	22 95       	swap	r18
 1fe:	20 7f       	andi	r18, 0xF0	; 240
 200:	20 93 f1 00 	sts	0x00F1, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) << 4;
 204:	29 2f       	mov	r18, r25
 206:	22 95       	swap	r18
 208:	20 7f       	andi	r18, 0xF0	; 240
 20a:	20 93 f6 00 	sts	0x00F6, r18
				towrite = (towrite >> 4);
 20e:	80 e1       	ldi	r24, 0x10	; 16
 210:	98 02       	muls	r25, r24
 212:	81 2d       	mov	r24, r1
 214:	99 0b       	sbc	r25, r25
 216:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) << 4;
 218:	28 2f       	mov	r18, r24
 21a:	22 95       	swap	r18
 21c:	20 7f       	andi	r18, 0xF0	; 240
 21e:	20 93 fb 00 	sts	0x00FB, r18
 222:	51 c0       	rjmp	.+162    	; 0x2c6 <writechar+0x18a>
			}
			if (pos == 2) {
 224:	62 30       	cpi	r22, 0x02	; 2
 226:	71 05       	cpc	r23, r1
 228:	51 f5       	brne	.+84     	; 0x27e <writechar+0x142>
				LCDDR1 = (mask & towrite) | LCDDR1;
 22a:	ed ee       	ldi	r30, 0xED	; 237
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	20 81       	ld	r18, Z
 230:	38 2f       	mov	r19, r24
 232:	3f 70       	andi	r19, 0x0F	; 15
 234:	23 2b       	or	r18, r19
 236:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 238:	9c 01       	movw	r18, r24
 23a:	35 95       	asr	r19
 23c:	27 95       	ror	r18
 23e:	35 95       	asr	r19
 240:	27 95       	ror	r18
 242:	35 95       	asr	r19
 244:	27 95       	ror	r18
 246:	35 95       	asr	r19
 248:	27 95       	ror	r18
				LCDDR6 = (mask & towrite) | LCDDR6;
 24a:	e2 ef       	ldi	r30, 0xF2	; 242
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	30 81       	ld	r19, Z
 250:	2f 70       	andi	r18, 0x0F	; 15
 252:	23 2b       	or	r18, r19
 254:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) | LCDDR11;
 256:	e7 ef       	ldi	r30, 0xF7	; 247
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	20 81       	ld	r18, Z
 25c:	39 2f       	mov	r19, r25
 25e:	3f 70       	andi	r19, 0x0F	; 15
 260:	23 2b       	or	r18, r19
 262:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 264:	80 e1       	ldi	r24, 0x10	; 16
 266:	98 02       	muls	r25, r24
 268:	81 2d       	mov	r24, r1
 26a:	99 0b       	sbc	r25, r25
 26c:	11 24       	eor	r1, r1
				LCDDR16 = (mask & towrite) | LCDDR16;
 26e:	ec ef       	ldi	r30, 0xFC	; 252
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	20 81       	ld	r18, Z
 274:	38 2f       	mov	r19, r24
 276:	3f 70       	andi	r19, 0x0F	; 15
 278:	23 2b       	or	r18, r19
 27a:	20 83       	st	Z, r18
 27c:	50 c0       	rjmp	.+160    	; 0x31e <writechar+0x1e2>
			}
			if (pos == 3) {
 27e:	63 30       	cpi	r22, 0x03	; 3
 280:	71 05       	cpc	r23, r1
 282:	09 f5       	brne	.+66     	; 0x2c6 <writechar+0x18a>
				LCDDR1 = (mask & towrite) << 4;
 284:	28 2f       	mov	r18, r24
 286:	22 95       	swap	r18
 288:	20 7f       	andi	r18, 0xF0	; 240
 28a:	20 93 ed 00 	sts	0x00ED, r18
				towrite = (towrite >> 4);
 28e:	9c 01       	movw	r18, r24
 290:	35 95       	asr	r19
 292:	27 95       	ror	r18
 294:	35 95       	asr	r19
 296:	27 95       	ror	r18
 298:	35 95       	asr	r19
 29a:	27 95       	ror	r18
 29c:	35 95       	asr	r19
 29e:	27 95       	ror	r18
				LCDDR6 = (mask & towrite) << 4;
 2a0:	22 95       	swap	r18
 2a2:	20 7f       	andi	r18, 0xF0	; 240
 2a4:	20 93 f2 00 	sts	0x00F2, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) << 4;
 2a8:	89 2f       	mov	r24, r25
 2aa:	82 95       	swap	r24
 2ac:	80 7f       	andi	r24, 0xF0	; 240
 2ae:	80 93 f7 00 	sts	0x00F7, r24
				towrite = (towrite >> 4);
 2b2:	89 2f       	mov	r24, r25
 2b4:	85 95       	asr	r24
 2b6:	85 95       	asr	r24
 2b8:	85 95       	asr	r24
 2ba:	85 95       	asr	r24
				LCDDR16 = (mask & towrite) << 4;
 2bc:	82 95       	swap	r24
 2be:	80 7f       	andi	r24, 0xF0	; 240
 2c0:	80 93 fc 00 	sts	0x00FC, r24
 2c4:	4f c0       	rjmp	.+158    	; 0x364 <writechar+0x228>
			}
			if (pos == 4) {
 2c6:	64 30       	cpi	r22, 0x04	; 4
 2c8:	71 05       	cpc	r23, r1
 2ca:	49 f5       	brne	.+82     	; 0x31e <writechar+0x1e2>
				LCDDR2 = (mask & towrite) | LCDDR2 ;
 2cc:	ee ee       	ldi	r30, 0xEE	; 238
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	20 81       	ld	r18, Z
 2d2:	38 2f       	mov	r19, r24
 2d4:	3f 70       	andi	r19, 0x0F	; 15
 2d6:	23 2b       	or	r18, r19
 2d8:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 2da:	9c 01       	movw	r18, r24
 2dc:	35 95       	asr	r19
 2de:	27 95       	ror	r18
 2e0:	35 95       	asr	r19
 2e2:	27 95       	ror	r18
 2e4:	35 95       	asr	r19
 2e6:	27 95       	ror	r18
 2e8:	35 95       	asr	r19
 2ea:	27 95       	ror	r18
				LCDDR7 = (mask & towrite) | LCDDR7;
 2ec:	e3 ef       	ldi	r30, 0xF3	; 243
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	2f 70       	andi	r18, 0x0F	; 15
 2f4:	28 2b       	or	r18, r24
 2f6:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite)| LCDDR12;
 2f8:	e8 ef       	ldi	r30, 0xF8	; 248
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	29 2f       	mov	r18, r25
 300:	2f 70       	andi	r18, 0x0F	; 15
 302:	82 2b       	or	r24, r18
 304:	80 83       	st	Z, r24
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite)| LCDDR17;
 306:	ed ef       	ldi	r30, 0xFD	; 253
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	20 81       	ld	r18, Z
				LCDDR2 = (mask & towrite) | LCDDR2 ;
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) | LCDDR7;
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite)| LCDDR12;
				towrite = (towrite >> 4);
 30c:	89 2f       	mov	r24, r25
 30e:	85 95       	asr	r24
 310:	85 95       	asr	r24
 312:	85 95       	asr	r24
 314:	85 95       	asr	r24
				LCDDR17 = (mask & towrite)| LCDDR17;
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	82 2b       	or	r24, r18
 31a:	80 83       	st	Z, r24
 31c:	23 c0       	rjmp	.+70     	; 0x364 <writechar+0x228>
			}
			if (pos == 5) {
 31e:	65 30       	cpi	r22, 0x05	; 5
 320:	71 05       	cpc	r23, r1
 322:	01 f5       	brne	.+64     	; 0x364 <writechar+0x228>
				LCDDR2 = (mask & towrite) << 4;
 324:	28 2f       	mov	r18, r24
 326:	22 95       	swap	r18
 328:	20 7f       	andi	r18, 0xF0	; 240
 32a:	20 93 ee 00 	sts	0x00EE, r18
				towrite = (towrite >> 4);
 32e:	9c 01       	movw	r18, r24
 330:	35 95       	asr	r19
 332:	27 95       	ror	r18
 334:	35 95       	asr	r19
 336:	27 95       	ror	r18
 338:	35 95       	asr	r19
 33a:	27 95       	ror	r18
 33c:	35 95       	asr	r19
 33e:	27 95       	ror	r18
				LCDDR7 = (mask & towrite) << 4;
 340:	22 95       	swap	r18
 342:	20 7f       	andi	r18, 0xF0	; 240
 344:	20 93 f3 00 	sts	0x00F3, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite) << 4;
 348:	89 2f       	mov	r24, r25
 34a:	82 95       	swap	r24
 34c:	80 7f       	andi	r24, 0xF0	; 240
 34e:	80 93 f8 00 	sts	0x00F8, r24
				towrite = (towrite >> 4);
 352:	89 2f       	mov	r24, r25
 354:	85 95       	asr	r24
 356:	85 95       	asr	r24
 358:	85 95       	asr	r24
 35a:	85 95       	asr	r24
				LCDDR17 = (mask & towrite) << 4;
 35c:	82 95       	swap	r24
 35e:	80 7f       	andi	r24, 0xF0	; 240
 360:	80 93 fd 00 	sts	0x00FD, r24
				LCDDR18 = (mask & towrite)<<4;
			}*/

		}
	}
}
 364:	64 96       	adiw	r28, 0x14	; 20
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <writeLong>:
	SCC_6 = 0x1F41;
	SCC_7 = 0x0111;
	SCC_8 = 0x1F51;
	SCC_9 = 0x0B51;*/
}
void writeLong(long i) {
 376:	af 92       	push	r10
 378:	bf 92       	push	r11
 37a:	cf 92       	push	r12
 37c:	df 92       	push	r13
 37e:	ef 92       	push	r14
 380:	ff 92       	push	r15
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
	int x = 5;
	while (x>=0 && i>0) {
 38a:	16 16       	cp	r1, r22
 38c:	17 06       	cpc	r1, r23
 38e:	18 06       	cpc	r1, r24
 390:	19 06       	cpc	r1, r25
 392:	d4 f0       	brlt	.+52     	; 0x3c8 <writeLong+0x52>
 394:	37 c0       	rjmp	.+110    	; 0x404 <writeLong+0x8e>
		writechar((char)(i % 10),x);
 396:	a7 01       	movw	r20, r14
 398:	96 01       	movw	r18, r12
 39a:	0e 94 99 02 	call	0x532	; 0x532 <__divmodsi4>
 39e:	a2 2e       	mov	r10, r18
 3a0:	b3 2e       	mov	r11, r19
 3a2:	04 2f       	mov	r16, r20
 3a4:	15 2f       	mov	r17, r21
 3a6:	86 2f       	mov	r24, r22
 3a8:	be 01       	movw	r22, r28
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 9e 00 	call	0x13c	; 0x13c <writechar>
		i = i / 10;
 3b0:	6a 2d       	mov	r22, r10
 3b2:	7b 2d       	mov	r23, r11
 3b4:	80 2f       	mov	r24, r16
 3b6:	91 2f       	mov	r25, r17
		x--;
 3b8:	21 97       	sbiw	r28, 0x01	; 1
 3ba:	20 f1       	brcs	.+72     	; 0x404 <writeLong+0x8e>
	SCC_8 = 0x1F51;
	SCC_9 = 0x0B51;*/
}
void writeLong(long i) {
	int x = 5;
	while (x>=0 && i>0) {
 3bc:	16 16       	cp	r1, r22
 3be:	17 06       	cpc	r1, r23
 3c0:	18 06       	cpc	r1, r24
 3c2:	19 06       	cpc	r1, r25
 3c4:	44 f3       	brlt	.-48     	; 0x396 <writeLong+0x20>
 3c6:	1e c0       	rjmp	.+60     	; 0x404 <writeLong+0x8e>
		writechar((char)(i % 10),x);
 3c8:	2a e0       	ldi	r18, 0x0A	; 10
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	0e 94 99 02 	call	0x532	; 0x532 <__divmodsi4>
 3d4:	02 2f       	mov	r16, r18
 3d6:	13 2f       	mov	r17, r19
 3d8:	d4 2f       	mov	r29, r20
 3da:	c5 2f       	mov	r28, r21
 3dc:	86 2f       	mov	r24, r22
 3de:	65 e0       	ldi	r22, 0x05	; 5
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 9e 00 	call	0x13c	; 0x13c <writechar>
		i = i / 10;
 3e8:	60 2f       	mov	r22, r16
 3ea:	71 2f       	mov	r23, r17
 3ec:	8d 2f       	mov	r24, r29
 3ee:	9c 2f       	mov	r25, r28
		x--;
 3f0:	c4 e0       	ldi	r28, 0x04	; 4
 3f2:	d0 e0       	ldi	r29, 0x00	; 0
	SCC_9 = 0x0B51;*/
}
void writeLong(long i) {
	int x = 5;
	while (x>=0 && i>0) {
		writechar((char)(i % 10),x);
 3f4:	0f 2e       	mov	r0, r31
 3f6:	fa e0       	ldi	r31, 0x0A	; 10
 3f8:	cf 2e       	mov	r12, r31
 3fa:	d1 2c       	mov	r13, r1
 3fc:	e1 2c       	mov	r14, r1
 3fe:	f1 2c       	mov	r15, r1
 400:	f0 2d       	mov	r31, r0
 402:	dc cf       	rjmp	.-72     	; 0x3bc <writeLong+0x46>
		i = i / 10;
		x--;
	}
	
	
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	bf 90       	pop	r11
 416:	af 90       	pop	r10
 418:	08 95       	ret

0000041a <primescont>:
		}

	}
	
}
void primescont(int i) {
 41a:	cf 92       	push	r12
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
	if (is_prime(i) == 1) {
 422:	6c 01       	movw	r12, r24
 424:	ee 24       	eor	r14, r14
 426:	d7 fc       	sbrc	r13, 7
 428:	e0 94       	com	r14
 42a:	fe 2c       	mov	r15, r14
 42c:	c7 01       	movw	r24, r14
 42e:	b6 01       	movw	r22, r12
 430:	0e 94 52 00 	call	0xa4	; 0xa4 <is_prime>
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	21 f4       	brne	.+8      	; 0x440 <primescont+0x26>
		writeLong(i);
 438:	c7 01       	movw	r24, r14
 43a:	b6 01       	movw	r22, r12
 43c:	0e 94 bb 01 	call	0x376	; 0x376 <writeLong>
	}
}
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	df 90       	pop	r13
 446:	cf 90       	pop	r12
 448:	08 95       	ret

0000044a <buttoncont>:
int buttoncont(int old) {
	if ((PINB & 128) != old) {
 44a:	23 b1       	in	r18, 0x03	; 3
 44c:	20 78       	andi	r18, 0x80	; 128
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	28 17       	cp	r18, r24
 452:	39 07       	cpc	r19, r25
 454:	81 f0       	breq	.+32     	; 0x476 <buttoncont+0x2c>
		if ((PINB & 128) == 128) {
 456:	1f 9b       	sbis	0x03, 7	; 3
 458:	0e c0       	rjmp	.+28     	; 0x476 <buttoncont+0x2c>
			if (LCDDR13 == 1) {
 45a:	80 91 f9 00 	lds	r24, 0x00F9
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	29 f4       	brne	.+10     	; 0x46c <buttoncont+0x22>
					LCDDR13 = 0;
 462:	10 92 f9 00 	sts	0x00F9, r1
					LCDDR18 = 1;
 466:	80 93 fe 00 	sts	0x00FE, r24
 46a:	05 c0       	rjmp	.+10     	; 0x476 <buttoncont+0x2c>
				} else
				{
					LCDDR13 = 1;
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	80 93 f9 00 	sts	0x00F9, r24
					LCDDR18 = 0;
 472:	10 92 fe 00 	sts	0x00FE, r1
				}
			}

		}
	return (PINB & 128);
 476:	83 b1       	in	r24, 0x03	; 3
 478:	80 78       	andi	r24, 0x80	; 128
}
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	08 95       	ret

0000047e <combined>:
	}
void combined(void) {
	//INIT PRIMES
	int i = 25000;
	//INIT BUTTON
	PORTB = (128 | PORTB);
 47e:	2f 9a       	sbi	0x05, 7	; 5
	int old = (PINB & 128);
 480:	83 b1       	in	r24, 0x03	; 3
 482:	80 78       	andi	r24, 0x80	; 128
 484:	c8 2e       	mov	r12, r24
 486:	d1 2c       	mov	r13, r1
	//INIT BLINK

	TCCR1B = (CS12 << 1) | (0 << CS11) | (0 << CS10);
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0x0000;
 48e:	10 92 85 00 	sts	0x0085, r1
 492:	10 92 84 00 	sts	0x0084, r1
	int limit = 8000000/256;
	int nexttime = 0;
	int ticked = 0;
 496:	c0 e0       	ldi	r28, 0x00	; 0
 498:	d0 e0       	ldi	r29, 0x00	; 0
	//INIT BLINK

	TCCR1B = (CS12 << 1) | (0 << CS11) | (0 << CS10);
	TCNT1 = 0x0000;
	int limit = 8000000/256;
	int nexttime = 0;
 49a:	00 e0       	ldi	r16, 0x00	; 0
 49c:	10 e0       	ldi	r17, 0x00	; 0
		}
		
	}
void combined(void) {
	//INIT PRIMES
	int i = 25000;
 49e:	0f 2e       	mov	r0, r31
 4a0:	f8 ea       	ldi	r31, 0xA8	; 168
 4a2:	6f 2e       	mov	r6, r31
 4a4:	f1 e6       	ldi	r31, 0x61	; 97
 4a6:	7f 2e       	mov	r7, r31
 4a8:	f0 2d       	mov	r31, r0
	int ticked = 0;
	
	while (1) {
		old = buttoncont(old);
				
		if (TCNT1 >= nexttime && ticked == 0) {
 4aa:	0f 2e       	mov	r0, r31
 4ac:	f4 e8       	ldi	r31, 0x84	; 132
 4ae:	ef 2e       	mov	r14, r31
 4b0:	f1 2c       	mov	r15, r1
 4b2:	f0 2d       	mov	r31, r0
			if (nexttime> 0xFFFF) {
				nexttime = nexttime - 0xFFFF;
				} else {
				nexttime = nexttime + limit;
			}
			if (LCDDR1 == 0x0) {
 4b4:	0f 2e       	mov	r0, r31
 4b6:	fd ee       	ldi	r31, 0xED	; 237
 4b8:	8f 2e       	mov	r8, r31
 4ba:	91 2c       	mov	r9, r1
 4bc:	f0 2d       	mov	r31, r0
	
	while (1) {
		old = buttoncont(old);
				
		if (TCNT1 >= nexttime && ticked == 0) {
			ticked = 1;
 4be:	22 24       	eor	r2, r2
 4c0:	23 94       	inc	r2
 4c2:	31 2c       	mov	r3, r1
				LCDDR1 = 0x0;
			}
			
		}
		if (TCNT1 < nexttime) {
			ticked = 0;
 4c4:	41 2c       	mov	r4, r1
 4c6:	51 2c       	mov	r5, r1
	int limit = 8000000/256;
	int nexttime = 0;
	int ticked = 0;
	
	while (1) {
		old = buttoncont(old);
 4c8:	c6 01       	movw	r24, r12
 4ca:	0e 94 25 02 	call	0x44a	; 0x44a <buttoncont>
 4ce:	6c 01       	movw	r12, r24
				
		if (TCNT1 >= nexttime && ticked == 0) {
 4d0:	f7 01       	movw	r30, r14
 4d2:	80 81       	ld	r24, Z
 4d4:	91 81       	ldd	r25, Z+1	; 0x01
 4d6:	80 17       	cp	r24, r16
 4d8:	91 07       	cpc	r25, r17
 4da:	88 f0       	brcs	.+34     	; 0x4fe <combined+0x80>
 4dc:	20 97       	sbiw	r28, 0x00	; 0
 4de:	79 f4       	brne	.+30     	; 0x4fe <combined+0x80>
			ticked = 1;
			if (nexttime> 0xFFFF) {
				nexttime = nexttime - 0xFFFF;
				} else {
				nexttime = nexttime + limit;
 4e0:	0e 5e       	subi	r16, 0xEE	; 238
 4e2:	15 48       	sbci	r17, 0x85	; 133
			}
			if (LCDDR1 == 0x0) {
 4e4:	f4 01       	movw	r30, r8
 4e6:	80 81       	ld	r24, Z
 4e8:	81 11       	cpse	r24, r1
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <combined+0x78>
				LCDDR1 = 0x2;
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	80 83       	st	Z, r24
	
	while (1) {
		old = buttoncont(old);
				
		if (TCNT1 >= nexttime && ticked == 0) {
			ticked = 1;
 4f0:	c2 2d       	mov	r28, r2
 4f2:	d3 2d       	mov	r29, r3
 4f4:	04 c0       	rjmp	.+8      	; 0x4fe <combined+0x80>
				nexttime = nexttime + limit;
			}
			if (LCDDR1 == 0x0) {
				LCDDR1 = 0x2;
				} else {
				LCDDR1 = 0x0;
 4f6:	f4 01       	movw	r30, r8
 4f8:	10 82       	st	Z, r1
	
	while (1) {
		old = buttoncont(old);
				
		if (TCNT1 >= nexttime && ticked == 0) {
			ticked = 1;
 4fa:	c2 2d       	mov	r28, r2
 4fc:	d3 2d       	mov	r29, r3
				} else {
				LCDDR1 = 0x0;
			}
			
		}
		if (TCNT1 < nexttime) {
 4fe:	f7 01       	movw	r30, r14
 500:	80 81       	ld	r24, Z
 502:	91 81       	ldd	r25, Z+1	; 0x01
 504:	80 17       	cp	r24, r16
 506:	91 07       	cpc	r25, r17
 508:	10 f4       	brcc	.+4      	; 0x50e <__stack+0xf>
			ticked = 0;
 50a:	c4 2d       	mov	r28, r4
 50c:	d5 2d       	mov	r29, r5
		}
		if (i < 100000) {
			primescont(i++);
 50e:	53 01       	movw	r10, r6
 510:	ef ef       	ldi	r30, 0xFF	; 255
 512:	ae 1a       	sub	r10, r30
 514:	be 0a       	sbc	r11, r30
 516:	c3 01       	movw	r24, r6
 518:	0e 94 0d 02 	call	0x41a	; 0x41a <primescont>
 51c:	35 01       	movw	r6, r10
		}
		
	}
 51e:	d4 cf       	rjmp	.-88     	; 0x4c8 <combined+0x4a>

00000520 <main>:
}

int main(void)
{
	
	CLKPR = 0x80;
 520:	e1 e6       	ldi	r30, 0x61	; 97
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 e8       	ldi	r24, 0x80	; 128
 526:	80 83       	st	Z, r24
	CLKPR = 0x00;
 528:	10 82       	st	Z, r1
	LCD_init();
 52a:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_init>
		//writeLong(123456);
		//primes(2);
		//blink();
		//button();
		//button2();
		combined();
 52e:	0e 94 3f 02 	call	0x47e	; 0x47e <combined>

00000532 <__divmodsi4>:
 532:	05 2e       	mov	r0, r21
 534:	97 fb       	bst	r25, 7
 536:	1e f4       	brtc	.+6      	; 0x53e <__divmodsi4+0xc>
 538:	00 94       	com	r0
 53a:	0e 94 b0 02 	call	0x560	; 0x560 <__negsi2>
 53e:	57 fd       	sbrc	r21, 7
 540:	07 d0       	rcall	.+14     	; 0x550 <__divmodsi4_neg2>
 542:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 546:	07 fc       	sbrc	r0, 7
 548:	03 d0       	rcall	.+6      	; 0x550 <__divmodsi4_neg2>
 54a:	4e f4       	brtc	.+18     	; 0x55e <__divmodsi4_exit>
 54c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__negsi2>

00000550 <__divmodsi4_neg2>:
 550:	50 95       	com	r21
 552:	40 95       	com	r20
 554:	30 95       	com	r19
 556:	21 95       	neg	r18
 558:	3f 4f       	sbci	r19, 0xFF	; 255
 55a:	4f 4f       	sbci	r20, 0xFF	; 255
 55c:	5f 4f       	sbci	r21, 0xFF	; 255

0000055e <__divmodsi4_exit>:
 55e:	08 95       	ret

00000560 <__negsi2>:
 560:	90 95       	com	r25
 562:	80 95       	com	r24
 564:	70 95       	com	r23
 566:	61 95       	neg	r22
 568:	7f 4f       	sbci	r23, 0xFF	; 255
 56a:	8f 4f       	sbci	r24, 0xFF	; 255
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	08 95       	ret

00000570 <__udivmodsi4>:
 570:	a1 e2       	ldi	r26, 0x21	; 33
 572:	1a 2e       	mov	r1, r26
 574:	aa 1b       	sub	r26, r26
 576:	bb 1b       	sub	r27, r27
 578:	fd 01       	movw	r30, r26
 57a:	0d c0       	rjmp	.+26     	; 0x596 <__udivmodsi4_ep>

0000057c <__udivmodsi4_loop>:
 57c:	aa 1f       	adc	r26, r26
 57e:	bb 1f       	adc	r27, r27
 580:	ee 1f       	adc	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	a2 17       	cp	r26, r18
 586:	b3 07       	cpc	r27, r19
 588:	e4 07       	cpc	r30, r20
 58a:	f5 07       	cpc	r31, r21
 58c:	20 f0       	brcs	.+8      	; 0x596 <__udivmodsi4_ep>
 58e:	a2 1b       	sub	r26, r18
 590:	b3 0b       	sbc	r27, r19
 592:	e4 0b       	sbc	r30, r20
 594:	f5 0b       	sbc	r31, r21

00000596 <__udivmodsi4_ep>:
 596:	66 1f       	adc	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	1a 94       	dec	r1
 5a0:	69 f7       	brne	.-38     	; 0x57c <__udivmodsi4_loop>
 5a2:	60 95       	com	r22
 5a4:	70 95       	com	r23
 5a6:	80 95       	com	r24
 5a8:	90 95       	com	r25
 5aa:	9b 01       	movw	r18, r22
 5ac:	ac 01       	movw	r20, r24
 5ae:	bd 01       	movw	r22, r26
 5b0:	cf 01       	movw	r24, r30
 5b2:	08 95       	ret

000005b4 <_exit>:
 5b4:	f8 94       	cli

000005b6 <__stop_program>:
 5b6:	ff cf       	rjmp	.-2      	; 0x5b6 <__stop_program>
