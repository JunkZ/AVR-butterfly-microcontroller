
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00002398  0000242c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002398  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  00002448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000258  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002867  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ac1  00000000  00000000  00004f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ce7  00000000  00000000  000059f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c14  00000000  00000000  000066e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000674  00000000  00000000  000072f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000288c  00000000  00000000  00007968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__vector_1>
       8:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__vector_2>
       c:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__vector_3>
      10:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__vector_4>
      14:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__vector_9>
      28:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__vector_10>
      2c:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_11>
      30:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__vector_12>
      34:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__vector_13>
      38:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_14>
      3c:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__vector_15>
      40:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__vector_16>
      44:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__vector_17>
      48:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__vector_18>
      4c:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__vector_19>
      50:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__vector_20>
      54:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__vector_21>
      58:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e8 e9       	ldi	r30, 0x98	; 152
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 80 01 	call	0x300	; 0x300 <main>
      92:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <checkhold>:
		AFTER(MSEC(500),self->Pulse,metronome,1);
	}
	
    
}
void checkhold(GUI *self) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
	self->checking_hold = 1;
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	9b 87       	std	Y+11, r25	; 0x0b
      b2:	8a 87       	std	Y+10, r24	; 0x0a
	if (((PINB & 64) == 0 || (PINB & 128) == 0)) {
      b4:	1e 9b       	sbis	0x03, 6	; 3
      b6:	02 c0       	rjmp	.+4      	; 0xbc <checkhold+0x22>
      b8:	1f 99       	sbic	0x03, 7	; 3
      ba:	16 c0       	rjmp	.+44     	; 0xe8 <checkhold+0x4e>
		ASYNC(self->Pulse,metronome,1);
      bc:	08 85       	ldd	r16, Y+8	; 0x08
      be:	19 85       	ldd	r17, Y+9	; 0x09
      c0:	cc 24       	eor	r12, r12
      c2:	c3 94       	inc	r12
      c4:	d1 2c       	mov	r13, r1
      c6:	0f 2e       	mov	r0, r31
      c8:	fb e9       	ldi	r31, 0x9B	; 155
      ca:	ef 2e       	mov	r14, r31
      cc:	f4 e0       	ldi	r31, 0x04	; 4
      ce:	ff 2e       	mov	r15, r31
      d0:	f0 2d       	mov	r31, r0
      d2:	20 e0       	ldi	r18, 0x00	; 0
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	a9 01       	movw	r20, r18
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	cb 01       	movw	r24, r22
      de:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
		self->checking_hold = 0;
      e2:	1b 86       	std	Y+11, r1	; 0x0b
      e4:	1a 86       	std	Y+10, r1	; 0x0a
      e6:	02 c0       	rjmp	.+4      	; 0xec <checkhold+0x52>
	} else {
		self->checking_hold = 0;
      e8:	1b 86       	std	Y+11, r1	; 0x0b
      ea:	1a 86       	std	Y+10, r1	; 0x0a
		return;
	}
}
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	1f 91       	pop	r17
      f2:	0f 91       	pop	r16
      f4:	ff 90       	pop	r15
      f6:	ef 90       	pop	r14
      f8:	df 90       	pop	r13
      fa:	cf 90       	pop	r12
      fc:	08 95       	ret

000000fe <portB>:
BIT 3 = right


this was kinda annoying to figure out.
*/
void portB(GUI *self) {
      fe:	cf 92       	push	r12
     100:	df 92       	push	r13
     102:	ef 92       	push	r14
     104:	ff 92       	push	r15
     106:	0f 93       	push	r16
     108:	1f 93       	push	r17
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	ec 01       	movw	r28, r24
	//self->hold = 0;
	//BIT 4:  press
	if ((PINB & 16) == 0) {// & self->hold==0) {
     110:	1c 99       	sbic	0x03, 4	; 3
     112:	39 c0       	rjmp	.+114    	; 0x186 <portB+0x88>
		if (self->LCD->curgen->freq == 0) {
     114:	ee 81       	ldd	r30, Y+6	; 0x06
     116:	ff 81       	ldd	r31, Y+7	; 0x07
     118:	00 84       	ldd	r0, Z+8	; 0x08
     11a:	f1 85       	ldd	r31, Z+9	; 0x09
     11c:	e0 2d       	mov	r30, r0
     11e:	84 81       	ldd	r24, Z+4	; 0x04
     120:	95 81       	ldd	r25, Z+5	; 0x05
     122:	89 2b       	or	r24, r25
     124:	61 f4       	brne	.+24     	; 0x13e <portB+0x40>
			self->LCD->curgen->freq = self->LCD->curgen->saved_freq;
     126:	86 81       	ldd	r24, Z+6	; 0x06
     128:	97 81       	ldd	r25, Z+7	; 0x07
     12a:	95 83       	std	Z+5, r25	; 0x05
     12c:	84 83       	std	Z+4, r24	; 0x04
			self->LCD->curgen->saved_freq = 0;
     12e:	ee 81       	ldd	r30, Y+6	; 0x06
     130:	ff 81       	ldd	r31, Y+7	; 0x07
     132:	00 84       	ldd	r0, Z+8	; 0x08
     134:	f1 85       	ldd	r31, Z+9	; 0x09
     136:	e0 2d       	mov	r30, r0
     138:	17 82       	std	Z+7, r1	; 0x07
     13a:	16 82       	std	Z+6, r1	; 0x06
     13c:	11 c0       	rjmp	.+34     	; 0x160 <portB+0x62>
			
		} else if (self->LCD->curgen->freq != 0) {
			ASYNC(self->LCD->curgen,save,0);
     13e:	c1 2c       	mov	r12, r1
     140:	d1 2c       	mov	r13, r1
     142:	0f 2e       	mov	r0, r31
     144:	f3 e9       	ldi	r31, 0x93	; 147
     146:	ef 2e       	mov	r14, r31
     148:	f4 e0       	ldi	r31, 0x04	; 4
     14a:	ff 2e       	mov	r15, r31
     14c:	f0 2d       	mov	r31, r0
     14e:	8f 01       	movw	r16, r30
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	a9 01       	movw	r20, r18
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	cb 01       	movw	r24, r22
     15c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
			//self->hold = 1;
		}
		ASYNC(self->LCD,update_screen,0);
     160:	0e 81       	ldd	r16, Y+6	; 0x06
     162:	1f 81       	ldd	r17, Y+7	; 0x07
     164:	c1 2c       	mov	r12, r1
     166:	d1 2c       	mov	r13, r1
     168:	0f 2e       	mov	r0, r31
     16a:	fb eb       	ldi	r31, 0xBB	; 187
     16c:	ef 2e       	mov	r14, r31
     16e:	f3 e0       	ldi	r31, 0x03	; 3
     170:	ff 2e       	mov	r15, r31
     172:	f0 2d       	mov	r31, r0
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	a9 01       	movw	r20, r18
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	cb 01       	movw	r24, r22
     180:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
     184:	64 c0       	rjmp	.+200    	; 0x24e <portB+0x150>
		
	}
	
	//BIT 6:  up
	else if ((PINB & 64) == 0) {// & self->hold==0) {
     186:	1e 99       	sbic	0x03, 6	; 3
     188:	30 c0       	rjmp	.+96     	; 0x1ea <portB+0xec>
		SYNC(self->LCD->curgen,update_F,1);
     18a:	ee 81       	ldd	r30, Y+6	; 0x06
     18c:	ff 81       	ldd	r31, Y+7	; 0x07
     18e:	41 e0       	ldi	r20, 0x01	; 1
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	66 e4       	ldi	r22, 0x46	; 70
     194:	74 e0       	ldi	r23, 0x04	; 4
     196:	80 85       	ldd	r24, Z+8	; 0x08
     198:	91 85       	ldd	r25, Z+9	; 0x09
     19a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
		ASYNC(self->LCD,update_screen,0);
     19e:	0e 81       	ldd	r16, Y+6	; 0x06
     1a0:	1f 81       	ldd	r17, Y+7	; 0x07
     1a2:	c1 2c       	mov	r12, r1
     1a4:	d1 2c       	mov	r13, r1
     1a6:	0f 2e       	mov	r0, r31
     1a8:	fb eb       	ldi	r31, 0xBB	; 187
     1aa:	ef 2e       	mov	r14, r31
     1ac:	f3 e0       	ldi	r31, 0x03	; 3
     1ae:	ff 2e       	mov	r15, r31
     1b0:	f0 2d       	mov	r31, r0
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	a9 01       	movw	r20, r18
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	cb 01       	movw	r24, r22
     1be:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
		AFTER(MSEC(500),self,checkhold,1);
     1c2:	cc 24       	eor	r12, r12
     1c4:	c3 94       	inc	r12
     1c6:	d1 2c       	mov	r13, r1
     1c8:	0f 2e       	mov	r0, r31
     1ca:	fd e4       	ldi	r31, 0x4D	; 77
     1cc:	ef 2e       	mov	r14, r31
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	ff 2e       	mov	r15, r31
     1d2:	f0 2d       	mov	r31, r0
     1d4:	8e 01       	movw	r16, r28
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	a9 01       	movw	r20, r18
     1dc:	69 e0       	ldi	r22, 0x09	; 9
     1de:	7d e3       	ldi	r23, 0x3D	; 61
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
     1e8:	32 c0       	rjmp	.+100    	; 0x24e <portB+0x150>
		
		 //bit of start delay for hold
	}
	
	//BIT 7:  down
	else if ((PINB & 128) == 0) {// & self->hold==0) {
     1ea:	1f 99       	sbic	0x03, 7	; 3
     1ec:	30 c0       	rjmp	.+96     	; 0x24e <portB+0x150>
		SYNC(self->LCD->curgen,update_F,-1);
     1ee:	ee 81       	ldd	r30, Y+6	; 0x06
     1f0:	ff 81       	ldd	r31, Y+7	; 0x07
     1f2:	4f ef       	ldi	r20, 0xFF	; 255
     1f4:	5f ef       	ldi	r21, 0xFF	; 255
     1f6:	66 e4       	ldi	r22, 0x46	; 70
     1f8:	74 e0       	ldi	r23, 0x04	; 4
     1fa:	80 85       	ldd	r24, Z+8	; 0x08
     1fc:	91 85       	ldd	r25, Z+9	; 0x09
     1fe:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
		ASYNC(self->LCD,update_screen,0);
     202:	0e 81       	ldd	r16, Y+6	; 0x06
     204:	1f 81       	ldd	r17, Y+7	; 0x07
     206:	c1 2c       	mov	r12, r1
     208:	d1 2c       	mov	r13, r1
     20a:	0f 2e       	mov	r0, r31
     20c:	fb eb       	ldi	r31, 0xBB	; 187
     20e:	ef 2e       	mov	r14, r31
     210:	f3 e0       	ldi	r31, 0x03	; 3
     212:	ff 2e       	mov	r15, r31
     214:	f0 2d       	mov	r31, r0
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	a9 01       	movw	r20, r18
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	cb 01       	movw	r24, r22
     222:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
		AFTER(MSEC(500),self->Pulse,metronome,1);
     226:	08 85       	ldd	r16, Y+8	; 0x08
     228:	19 85       	ldd	r17, Y+9	; 0x09
     22a:	cc 24       	eor	r12, r12
     22c:	c3 94       	inc	r12
     22e:	d1 2c       	mov	r13, r1
     230:	0f 2e       	mov	r0, r31
     232:	fb e9       	ldi	r31, 0x9B	; 155
     234:	ef 2e       	mov	r14, r31
     236:	f4 e0       	ldi	r31, 0x04	; 4
     238:	ff 2e       	mov	r15, r31
     23a:	f0 2d       	mov	r31, r0
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	a9 01       	movw	r20, r18
     242:	69 e0       	ldi	r22, 0x09	; 9
     244:	7d e3       	ldi	r23, 0x3D	; 61
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
	}
	
    
}
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	ff 90       	pop	r15
     258:	ef 90       	pop	r14
     25a:	df 90       	pop	r13
     25c:	cf 90       	pop	r12
     25e:	08 95       	ret

00000260 <portE>:
	} else {
		self->checking_hold = 0;
		return;
	}
}
void portE(GUI *self) {
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	ec 01       	movw	r28, r24
	//self->hold = 0;
	//BIT 2 = left
	if ((PINE & 4) == 0){// && &self->curgen==Gen2) {
     272:	62 99       	sbic	0x0c, 2	; 12
     274:	14 c0       	rjmp	.+40     	; 0x29e <portE+0x3e>
		//self->curgen=Gen1;
		ASYNC(self->LCD,shift,1);
     276:	0e 81       	ldd	r16, Y+6	; 0x06
     278:	1f 81       	ldd	r17, Y+7	; 0x07
     27a:	cc 24       	eor	r12, r12
     27c:	c3 94       	inc	r12
     27e:	d1 2c       	mov	r13, r1
     280:	0f 2e       	mov	r0, r31
     282:	f9 ed       	ldi	r31, 0xD9	; 217
     284:	ef 2e       	mov	r14, r31
     286:	f3 e0       	ldi	r31, 0x03	; 3
     288:	ff 2e       	mov	r15, r31
     28a:	f0 2d       	mov	r31, r0
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	a9 01       	movw	r20, r18
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	cb 01       	movw	r24, r22
     298:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
     29c:	16 c0       	rjmp	.+44     	; 0x2ca <portE+0x6a>
		//ASYNC(self->Gen1,Pulse1,0);
		//self->hold = 1;
		//switch to gen1 if cur gen is 2
	}else if ((PINE & 8) == 0){//&& &self->curgen==Gen1) {//BIT 3 = right
     29e:	63 99       	sbic	0x0c, 3	; 12
     2a0:	14 c0       	rjmp	.+40     	; 0x2ca <portE+0x6a>
		//self->curgen=Gen2;
		ASYNC(self->LCD,shift,2);
     2a2:	0e 81       	ldd	r16, Y+6	; 0x06
     2a4:	1f 81       	ldd	r17, Y+7	; 0x07
     2a6:	68 94       	set
     2a8:	cc 24       	eor	r12, r12
     2aa:	c1 f8       	bld	r12, 1
     2ac:	d1 2c       	mov	r13, r1
     2ae:	0f 2e       	mov	r0, r31
     2b0:	f9 ed       	ldi	r31, 0xD9	; 217
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f3 e0       	ldi	r31, 0x03	; 3
     2b6:	ff 2e       	mov	r15, r31
     2b8:	f0 2d       	mov	r31, r0
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	a9 01       	movw	r20, r18
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	cb 01       	movw	r24, r22
     2c6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
		//ASYNC(self->Gen2,Pulse2,0);
		//self->hold = 1;
		//switch to gen2 if cur gen is 1
	}
	
	ASYNC(self->LCD,update_screen,0);
     2ca:	0e 81       	ldd	r16, Y+6	; 0x06
     2cc:	1f 81       	ldd	r17, Y+7	; 0x07
     2ce:	c1 2c       	mov	r12, r1
     2d0:	d1 2c       	mov	r13, r1
     2d2:	0f 2e       	mov	r0, r31
     2d4:	fb eb       	ldi	r31, 0xBB	; 187
     2d6:	ef 2e       	mov	r14, r31
     2d8:	f3 e0       	ldi	r31, 0x03	; 3
     2da:	ff 2e       	mov	r15, r31
     2dc:	f0 2d       	mov	r31, r0
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	a9 01       	movw	r20, r18
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	cb 01       	movw	r24, r22
     2ea:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	08 95       	ret

00000300 <main>:
#include "GUI.h"
#include "LCD.h"
#include "Pulser.h"

int main(void) 
{
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	c0 54       	subi	r28, 0x40	; 64
     30e:	d1 09       	sbc	r29, r1
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	f8 94       	cli
     314:	de bf       	out	0x3e, r29	; 62
     316:	0f be       	out	0x3f, r0	; 63
     318:	cd bf       	out	0x3d, r28	; 61
	
	
	LCD_init();
     31a:	0e 94 02 02 	call	0x404	; 0x404 <LCD_init>
    //Creating objects
	Writer Write1 = initWriter(0);
     31e:	1a 82       	std	Y+2, r1	; 0x02
     320:	19 82       	std	Y+1, r1	; 0x01
     322:	1c 82       	std	Y+4, r1	; 0x04
     324:	1b 82       	std	Y+3, r1	; 0x03
     326:	1e 82       	std	Y+6, r1	; 0x06
     328:	1d 82       	std	Y+5, r1	; 0x05
    PulseGen Gen1 = initGEN(20,0,&Write1,4,0);
     32a:	18 86       	std	Y+8, r1	; 0x08
     32c:	1f 82       	std	Y+7, r1	; 0x07
     32e:	1a 86       	std	Y+10, r1	; 0x0a
     330:	19 86       	std	Y+9, r1	; 0x09
     332:	84 e1       	ldi	r24, 0x14	; 20
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	9c 87       	std	Y+12, r25	; 0x0c
     338:	8b 87       	std	Y+11, r24	; 0x0b
     33a:	1e 86       	std	Y+14, r1	; 0x0e
     33c:	1d 86       	std	Y+13, r1	; 0x0d
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	98 8b       	std	Y+16, r25	; 0x10
     344:	8f 87       	std	Y+15, r24	; 0x0f
     346:	24 e0       	ldi	r18, 0x04	; 4
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	3a 8b       	std	Y+18, r19	; 0x12
     34c:	29 8b       	std	Y+17, r18	; 0x11
     34e:	1c 8a       	std	Y+20, r1	; 0x14
     350:	1b 8a       	std	Y+19, r1	; 0x13
    PulseGen Gen2 = initGEN(0,0,&Write1,6,0);
     352:	1e 8a       	std	Y+22, r1	; 0x16
     354:	1d 8a       	std	Y+21, r1	; 0x15
     356:	18 8e       	std	Y+24, r1	; 0x18
     358:	1f 8a       	std	Y+23, r1	; 0x17
     35a:	1a 8e       	std	Y+26, r1	; 0x1a
     35c:	19 8e       	std	Y+25, r1	; 0x19
     35e:	1c 8e       	std	Y+28, r1	; 0x1c
     360:	1b 8e       	std	Y+27, r1	; 0x1b
     362:	9e 8f       	std	Y+30, r25	; 0x1e
     364:	8d 8f       	std	Y+29, r24	; 0x1d
     366:	86 e0       	ldi	r24, 0x06	; 6
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	98 a3       	std	Y+32, r25	; 0x20
     36c:	8f 8f       	std	Y+31, r24	; 0x1f
     36e:	1a a2       	std	Y+34, r1	; 0x22
     370:	19 a2       	std	Y+33, r1	; 0x21
	LCD LCD1 = initLCD(&Gen1,&Gen2,&Gen1);
     372:	1c a2       	std	Y+36, r1	; 0x24
     374:	1b a2       	std	Y+35, r1	; 0x23
     376:	1e a2       	std	Y+38, r1	; 0x26
     378:	1d a2       	std	Y+37, r1	; 0x25
     37a:	ce 01       	movw	r24, r28
     37c:	07 96       	adiw	r24, 0x07	; 7
     37e:	98 a7       	std	Y+40, r25	; 0x28
     380:	8f a3       	std	Y+39, r24	; 0x27
     382:	9e 01       	movw	r18, r28
     384:	2b 5e       	subi	r18, 0xEB	; 235
     386:	3f 4f       	sbci	r19, 0xFF	; 255
     388:	3a a7       	std	Y+42, r19	; 0x2a
     38a:	29 a7       	std	Y+41, r18	; 0x29
     38c:	9c a7       	std	Y+44, r25	; 0x2c
     38e:	8b a7       	std	Y+43, r24	; 0x2b
	Pulser Pulse1 = initPulser(0,&LCD1);
     390:	1e a6       	std	Y+46, r1	; 0x2e
     392:	1d a6       	std	Y+45, r1	; 0x2d
     394:	18 aa       	std	Y+48, r1	; 0x30
     396:	1f a6       	std	Y+47, r1	; 0x2f
     398:	1a aa       	std	Y+50, r1	; 0x32
     39a:	19 aa       	std	Y+49, r1	; 0x31
     39c:	8e 01       	movw	r16, r28
     39e:	0d 5d       	subi	r16, 0xDD	; 221
     3a0:	1f 4f       	sbci	r17, 0xFF	; 255
     3a2:	1c ab       	std	Y+52, r17	; 0x34
     3a4:	0b ab       	std	Y+51, r16	; 0x33
	GUI GUI1 = initGUI(0,&LCD1,&Pulse1,0);
     3a6:	1e aa       	std	Y+54, r1	; 0x36
     3a8:	1d aa       	std	Y+53, r1	; 0x35
     3aa:	18 ae       	std	Y+56, r1	; 0x38
     3ac:	1f aa       	std	Y+55, r1	; 0x37
     3ae:	1a ae       	std	Y+58, r1	; 0x3a
     3b0:	19 ae       	std	Y+57, r1	; 0x39
     3b2:	1c af       	std	Y+60, r17	; 0x3c
     3b4:	0b af       	std	Y+59, r16	; 0x3b
     3b6:	86 96       	adiw	r24, 0x26	; 38
     3b8:	9e af       	std	Y+62, r25	; 0x3e
     3ba:	8d af       	std	Y+61, r24	; 0x3d
     3bc:	21 96       	adiw	r28, 0x01	; 1
     3be:	1f ae       	std	Y+63, r1	; 0x3f
     3c0:	1e ae       	std	Y+62, r1	; 0x3e
     3c2:	21 97       	sbiw	r28, 0x01	; 1
	//SYNC(&LCD,LCD_init,0);
	//LCDDR1 = 32;
	//LCDDR2 = 0xFFFF;

	//Installing method as interrupt handler with obj and interrupt source as arguments
    INSTALL(&GUI1, portB, IRQ_PCINT1); //Button down/up/press interrupt handler. 
     3c4:	42 e0       	ldi	r20, 0x02	; 2
     3c6:	6f e7       	ldi	r22, 0x7F	; 127
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	08 96       	adiw	r24, 0x08	; 8
     3cc:	0e 94 02 11 	call	0x2204	; 0x2204 <install>
	INSTALL(&GUI1, portE, IRQ_PCINT0); //Button right/left interrupt handler.
     3d0:	41 e0       	ldi	r20, 0x01	; 1
     3d2:	60 e3       	ldi	r22, 0x30	; 48
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	ce 01       	movw	r24, r28
     3d8:	c5 96       	adiw	r24, 0x35	; 53
     3da:	0e 94 02 11 	call	0x2204	; 0x2204 <install>
	
	//Must give control to TinyTimber scheduler, starting event-handling. Method(obj,arg) is startup event
    return TINYTIMBER(&LCD1, update_screen, 0); 
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	6b eb       	ldi	r22, 0xBB	; 187
     3e4:	73 e0       	ldi	r23, 0x03	; 3
     3e6:	c8 01       	movw	r24, r16
     3e8:	0e 94 1c 11 	call	0x2238	; 0x2238 <tinytimber>

     3ec:	c0 5c       	subi	r28, 0xC0	; 192
     3ee:	df 4f       	sbci	r29, 0xFF	; 255
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	08 95       	ret

00000404 <LCD_init>:

#include "LCD.h"
#include <avr/io.h>

void LCD_init(void) {
	CLKPR = 0x80;
     404:	e1 e6       	ldi	r30, 0x61	; 97
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 e8       	ldi	r24, 0x80	; 128
     40a:	80 83       	st	Z, r24
	CLKPR = 0x00;
     40c:	10 82       	st	Z, r1
	EIFR = 0xC0;
	EICRA |= (1 << ISC01);*/
	
	
	
	PORTB = 208;
     40e:	20 ed       	ldi	r18, 0xD0	; 208
     410:	25 b9       	out	0x05, r18	; 5
	PORTE = 12;
     412:	9c e0       	ldi	r25, 0x0C	; 12
     414:	9e b9       	out	0x0e, r25	; 14
	EIMSK = 192;
     416:	80 ec       	ldi	r24, 0xC0	; 192
     418:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 = 208;
     41a:	20 93 6c 00 	sts	0x006C, r18
	PCMSK0 = 12;
     41e:	90 93 6b 00 	sts	0x006B, r25
	
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
     422:	97 eb       	ldi	r25, 0xB7	; 183
     424:	90 93 e5 00 	sts	0x00E5, r25
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
     428:	97 e0       	ldi	r25, 0x07	; 7
     42a:	90 93 e6 00 	sts	0x00E6, r25
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
     42e:	9f e0       	ldi	r25, 0x0F	; 15
     430:	90 93 e7 00 	sts	0x00E7, r25
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
     434:	80 93 e4 00 	sts	0x00E4, r24
		
	LCDDR3 = 1 | LCDDR3; //gen 1 selected indicator
     438:	ef ee       	ldi	r30, 0xEF	; 239
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	81 60       	ori	r24, 0x01	; 1
     440:	80 83       	st	Z, r24
	LCDDR1 = 0x0;
     442:	10 92 ed 00 	sts	0x00ED, r1
     446:	08 95       	ret

00000448 <writeChar>:
}

void writeChar(char ch, int pos) {
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	64 97       	sbiw	r28, 0x14	; 20
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
	int numbers[10] = {
     45c:	94 e1       	ldi	r25, 0x14	; 20
     45e:	e8 e0       	ldi	r30, 0x08	; 8
     460:	f1 e0       	ldi	r31, 0x01	; 1
     462:	de 01       	movw	r26, r28
     464:	11 96       	adiw	r26, 0x01	; 1
     466:	01 90       	ld	r0, Z+
     468:	0d 92       	st	X+, r0
     46a:	9a 95       	dec	r25
     46c:	e1 f7       	brne	.-8      	; 0x466 <writeChar+0x1e>
		0x1F41,
		0x0111,
		0x1F51,
		0x0B51
	};
	if (pos >= 0 && pos <= 5) {
     46e:	66 30       	cpi	r22, 0x06	; 6
     470:	71 05       	cpc	r23, r1
     472:	08 f0       	brcs	.+2      	; 0x476 <writeChar+0x2e>
     474:	43 c1       	rjmp	.+646    	; 0x6fc <__stack+0x1fd>
		if (ch < 0 || ch > 9){
     476:	8a 30       	cpi	r24, 0x0A	; 10
     478:	08 f0       	brcs	.+2      	; 0x47c <writeChar+0x34>
			ch = ch - '0';
     47a:	80 53       	subi	r24, 0x30	; 48
		}
		if (ch>= 0 && ch <9) {
     47c:	89 30       	cpi	r24, 0x09	; 9
     47e:	08 f0       	brcs	.+2      	; 0x482 <writeChar+0x3a>
     480:	3d c1       	rjmp	.+634    	; 0x6fc <__stack+0x1fd>
			int mask = 0xF;
			int mask2 = 0xF0;
			int towrite = numbers[ch];
     482:	e8 2f       	mov	r30, r24
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	ee 0f       	add	r30, r30
     488:	ff 1f       	adc	r31, r31
     48a:	ec 0f       	add	r30, r28
     48c:	fd 1f       	adc	r31, r29
     48e:	81 81       	ldd	r24, Z+1	; 0x01
     490:	92 81       	ldd	r25, Z+2	; 0x02
			
			if (pos == 0) {
     492:	61 15       	cp	r22, r1
     494:	71 05       	cpc	r23, r1
     496:	71 f5       	brne	.+92     	; 0x4f4 <writeChar+0xac>
				LCDDR0 = (mask & towrite) | (LCDDR0) & mask2;
     498:	ec ee       	ldi	r30, 0xEC	; 236
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	20 81       	ld	r18, Z
     49e:	38 2f       	mov	r19, r24
     4a0:	3f 70       	andi	r19, 0x0F	; 15
     4a2:	20 7f       	andi	r18, 0xF0	; 240
     4a4:	23 2b       	or	r18, r19
     4a6:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     4a8:	9c 01       	movw	r18, r24
     4aa:	35 95       	asr	r19
     4ac:	27 95       	ror	r18
     4ae:	35 95       	asr	r19
     4b0:	27 95       	ror	r18
     4b2:	35 95       	asr	r19
     4b4:	27 95       	ror	r18
     4b6:	35 95       	asr	r19
     4b8:	27 95       	ror	r18
				LCDDR5 = (mask & towrite) | (LCDDR5) & mask2;
     4ba:	e1 ef       	ldi	r30, 0xF1	; 241
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	30 81       	ld	r19, Z
     4c0:	2f 70       	andi	r18, 0x0F	; 15
     4c2:	30 7f       	andi	r19, 0xF0	; 240
     4c4:	23 2b       	or	r18, r19
     4c6:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) | (LCDDR10) & mask2;
     4c8:	e6 ef       	ldi	r30, 0xF6	; 246
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	20 81       	ld	r18, Z
     4ce:	39 2f       	mov	r19, r25
     4d0:	3f 70       	andi	r19, 0x0F	; 15
     4d2:	20 7f       	andi	r18, 0xF0	; 240
     4d4:	23 2b       	or	r18, r19
     4d6:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     4d8:	80 e1       	ldi	r24, 0x10	; 16
     4da:	98 02       	muls	r25, r24
     4dc:	81 2d       	mov	r24, r1
     4de:	99 0b       	sbc	r25, r25
     4e0:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) | (LCDDR15) & mask2;
     4e2:	eb ef       	ldi	r30, 0xFB	; 251
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	20 81       	ld	r18, Z
     4e8:	38 2f       	mov	r19, r24
     4ea:	3f 70       	andi	r19, 0x0F	; 15
     4ec:	20 7f       	andi	r18, 0xF0	; 240
     4ee:	23 2b       	or	r18, r19
     4f0:	20 83       	st	Z, r18
     4f2:	66 c0       	rjmp	.+204    	; 0x5c0 <__stack+0xc1>
			}
			if (pos == 1) {
     4f4:	61 30       	cpi	r22, 0x01	; 1
     4f6:	71 05       	cpc	r23, r1
     4f8:	91 f5       	brne	.+100    	; 0x55e <__stack+0x5f>
				LCDDR0 = (mask & towrite) << 4 | LCDDR0 & mask;
     4fa:	ec ee       	ldi	r30, 0xEC	; 236
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	20 81       	ld	r18, Z
     500:	38 2f       	mov	r19, r24
     502:	32 95       	swap	r19
     504:	30 7f       	andi	r19, 0xF0	; 240
     506:	2f 70       	andi	r18, 0x0F	; 15
     508:	23 2b       	or	r18, r19
     50a:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR5 = (mask & towrite) << 4 | LCDDR5 & mask;
     50c:	e1 ef       	ldi	r30, 0xF1	; 241
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	40 81       	ld	r20, Z
     512:	9c 01       	movw	r18, r24
     514:	20 7f       	andi	r18, 0xF0	; 240
     516:	33 27       	eor	r19, r19
     518:	34 2f       	mov	r19, r20
     51a:	3f 70       	andi	r19, 0x0F	; 15
     51c:	23 2b       	or	r18, r19
     51e:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) << 4 | LCDDR10 & mask;
     520:	e6 ef       	ldi	r30, 0xF6	; 246
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	40 81       	ld	r20, Z
     526:	9c 01       	movw	r18, r24
     528:	32 95       	swap	r19
     52a:	22 95       	swap	r18
     52c:	2f 70       	andi	r18, 0x0F	; 15
     52e:	23 27       	eor	r18, r19
     530:	3f 70       	andi	r19, 0x0F	; 15
     532:	23 27       	eor	r18, r19
     534:	20 7f       	andi	r18, 0xF0	; 240
     536:	33 27       	eor	r19, r19
     538:	34 2f       	mov	r19, r20
     53a:	3f 70       	andi	r19, 0x0F	; 15
     53c:	23 2b       	or	r18, r19
     53e:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     540:	80 e1       	ldi	r24, 0x10	; 16
     542:	98 02       	muls	r25, r24
     544:	81 2d       	mov	r24, r1
     546:	99 0b       	sbc	r25, r25
     548:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) << 4 | LCDDR15 & mask;
     54a:	eb ef       	ldi	r30, 0xFB	; 251
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	20 81       	ld	r18, Z
     550:	38 2f       	mov	r19, r24
     552:	32 95       	swap	r19
     554:	30 7f       	andi	r19, 0xF0	; 240
     556:	2f 70       	andi	r18, 0x0F	; 15
     558:	23 2b       	or	r18, r19
     55a:	20 83       	st	Z, r18
     55c:	69 c0       	rjmp	.+210    	; 0x630 <__stack+0x131>
			}
			if (pos == 2) {
     55e:	62 30       	cpi	r22, 0x02	; 2
     560:	71 05       	cpc	r23, r1
     562:	71 f5       	brne	.+92     	; 0x5c0 <__stack+0xc1>
				LCDDR1 = (mask & towrite) | (LCDDR1) & mask2;
     564:	ed ee       	ldi	r30, 0xED	; 237
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	20 81       	ld	r18, Z
     56a:	38 2f       	mov	r19, r24
     56c:	3f 70       	andi	r19, 0x0F	; 15
     56e:	20 7f       	andi	r18, 0xF0	; 240
     570:	23 2b       	or	r18, r19
     572:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     574:	9c 01       	movw	r18, r24
     576:	35 95       	asr	r19
     578:	27 95       	ror	r18
     57a:	35 95       	asr	r19
     57c:	27 95       	ror	r18
     57e:	35 95       	asr	r19
     580:	27 95       	ror	r18
     582:	35 95       	asr	r19
     584:	27 95       	ror	r18
				LCDDR6 = (mask & towrite) | (LCDDR6) & mask2;
     586:	e2 ef       	ldi	r30, 0xF2	; 242
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	30 81       	ld	r19, Z
     58c:	2f 70       	andi	r18, 0x0F	; 15
     58e:	30 7f       	andi	r19, 0xF0	; 240
     590:	23 2b       	or	r18, r19
     592:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) | (LCDDR11) & mask2;
     594:	e7 ef       	ldi	r30, 0xF7	; 247
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	20 81       	ld	r18, Z
     59a:	39 2f       	mov	r19, r25
     59c:	3f 70       	andi	r19, 0x0F	; 15
     59e:	20 7f       	andi	r18, 0xF0	; 240
     5a0:	23 2b       	or	r18, r19
     5a2:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     5a4:	80 e1       	ldi	r24, 0x10	; 16
     5a6:	98 02       	muls	r25, r24
     5a8:	81 2d       	mov	r24, r1
     5aa:	99 0b       	sbc	r25, r25
     5ac:	11 24       	eor	r1, r1
				LCDDR16 = (mask & towrite) | (LCDDR16) & mask2;
     5ae:	ec ef       	ldi	r30, 0xFC	; 252
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	20 81       	ld	r18, Z
     5b4:	38 2f       	mov	r19, r24
     5b6:	3f 70       	andi	r19, 0x0F	; 15
     5b8:	20 7f       	andi	r18, 0xF0	; 240
     5ba:	23 2b       	or	r18, r19
     5bc:	20 83       	st	Z, r18
     5be:	67 c0       	rjmp	.+206    	; 0x68e <__stack+0x18f>
			}
			if (pos == 3) {
     5c0:	63 30       	cpi	r22, 0x03	; 3
     5c2:	71 05       	cpc	r23, r1
     5c4:	a9 f5       	brne	.+106    	; 0x630 <__stack+0x131>
				LCDDR1 = (mask & towrite) << 4| LCDDR1 & mask;
     5c6:	ed ee       	ldi	r30, 0xED	; 237
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	20 81       	ld	r18, Z
     5cc:	38 2f       	mov	r19, r24
     5ce:	32 95       	swap	r19
     5d0:	30 7f       	andi	r19, 0xF0	; 240
     5d2:	2f 70       	andi	r18, 0x0F	; 15
     5d4:	23 2b       	or	r18, r19
     5d6:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR6 = (mask & towrite) << 4| LCDDR6 & mask;
     5d8:	e2 ef       	ldi	r30, 0xF2	; 242
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	40 81       	ld	r20, Z
     5de:	9c 01       	movw	r18, r24
     5e0:	20 7f       	andi	r18, 0xF0	; 240
     5e2:	33 27       	eor	r19, r19
     5e4:	34 2f       	mov	r19, r20
     5e6:	3f 70       	andi	r19, 0x0F	; 15
     5e8:	23 2b       	or	r18, r19
     5ea:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) << 4| LCDDR11 & mask;
     5ec:	e7 ef       	ldi	r30, 0xF7	; 247
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	40 81       	ld	r20, Z
     5f2:	9c 01       	movw	r18, r24
     5f4:	32 95       	swap	r19
     5f6:	22 95       	swap	r18
     5f8:	2f 70       	andi	r18, 0x0F	; 15
     5fa:	23 27       	eor	r18, r19
     5fc:	3f 70       	andi	r19, 0x0F	; 15
     5fe:	23 27       	eor	r18, r19
     600:	20 7f       	andi	r18, 0xF0	; 240
     602:	33 27       	eor	r19, r19
     604:	34 2f       	mov	r19, r20
     606:	3f 70       	andi	r19, 0x0F	; 15
     608:	23 2b       	or	r18, r19
     60a:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR16 = (mask & towrite) << 4| LCDDR16 & mask;
     60c:	ec ef       	ldi	r30, 0xFC	; 252
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	20 81       	ld	r18, Z
     612:	89 2f       	mov	r24, r25
     614:	99 27       	eor	r25, r25
     616:	82 95       	swap	r24
     618:	8f 70       	andi	r24, 0x0F	; 15
     61a:	82 95       	swap	r24
     61c:	92 95       	swap	r25
     61e:	90 7f       	andi	r25, 0xF0	; 240
     620:	98 27       	eor	r25, r24
     622:	80 7f       	andi	r24, 0xF0	; 240
     624:	98 27       	eor	r25, r24
     626:	92 2f       	mov	r25, r18
     628:	9f 70       	andi	r25, 0x0F	; 15
     62a:	89 2b       	or	r24, r25
     62c:	80 83       	st	Z, r24
     62e:	66 c0       	rjmp	.+204    	; 0x6fc <__stack+0x1fd>
			}
			if (pos == 4) {
     630:	64 30       	cpi	r22, 0x04	; 4
     632:	71 05       	cpc	r23, r1
     634:	61 f5       	brne	.+88     	; 0x68e <__stack+0x18f>
				LCDDR2 = (mask & towrite) | LCDDR2 & mask2 ;
     636:	ee ee       	ldi	r30, 0xEE	; 238
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	20 81       	ld	r18, Z
     63c:	38 2f       	mov	r19, r24
     63e:	3f 70       	andi	r19, 0x0F	; 15
     640:	20 7f       	andi	r18, 0xF0	; 240
     642:	23 2b       	or	r18, r19
     644:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     646:	9c 01       	movw	r18, r24
     648:	35 95       	asr	r19
     64a:	27 95       	ror	r18
     64c:	35 95       	asr	r19
     64e:	27 95       	ror	r18
     650:	35 95       	asr	r19
     652:	27 95       	ror	r18
     654:	35 95       	asr	r19
     656:	27 95       	ror	r18
				LCDDR7 = (mask & towrite) | LCDDR7 & mask2;
     658:	e3 ef       	ldi	r30, 0xF3	; 243
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	2f 70       	andi	r18, 0x0F	; 15
     660:	80 7f       	andi	r24, 0xF0	; 240
     662:	28 2b       	or	r18, r24
     664:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite)| LCDDR12 & mask2;
     666:	e8 ef       	ldi	r30, 0xF8	; 248
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	80 81       	ld	r24, Z
     66c:	29 2f       	mov	r18, r25
     66e:	2f 70       	andi	r18, 0x0F	; 15
     670:	80 7f       	andi	r24, 0xF0	; 240
     672:	82 2b       	or	r24, r18
     674:	80 83       	st	Z, r24
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite)| LCDDR17 & mask2;
     676:	ed ef       	ldi	r30, 0xFD	; 253
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
				LCDDR2 = (mask & towrite) | LCDDR2 & mask2 ;
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) | LCDDR7 & mask2;
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite)| LCDDR12 & mask2;
				towrite = (towrite >> 4);
     67c:	95 95       	asr	r25
     67e:	95 95       	asr	r25
     680:	95 95       	asr	r25
     682:	95 95       	asr	r25
				LCDDR17 = (mask & towrite)| LCDDR17 & mask2;
     684:	9f 70       	andi	r25, 0x0F	; 15
     686:	80 7f       	andi	r24, 0xF0	; 240
     688:	89 2b       	or	r24, r25
     68a:	80 83       	st	Z, r24
     68c:	37 c0       	rjmp	.+110    	; 0x6fc <__stack+0x1fd>
			}
			if (pos == 5) {
     68e:	65 30       	cpi	r22, 0x05	; 5
     690:	71 05       	cpc	r23, r1
     692:	a1 f5       	brne	.+104    	; 0x6fc <__stack+0x1fd>
				LCDDR2 = (mask & towrite) << 4| LCDDR2 & mask;
     694:	ee ee       	ldi	r30, 0xEE	; 238
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	20 81       	ld	r18, Z
     69a:	38 2f       	mov	r19, r24
     69c:	32 95       	swap	r19
     69e:	30 7f       	andi	r19, 0xF0	; 240
     6a0:	2f 70       	andi	r18, 0x0F	; 15
     6a2:	23 2b       	or	r18, r19
     6a4:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) << 4| LCDDR7 & mask;
     6a6:	e3 ef       	ldi	r30, 0xF3	; 243
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	40 81       	ld	r20, Z
     6ac:	9c 01       	movw	r18, r24
     6ae:	20 7f       	andi	r18, 0xF0	; 240
     6b0:	33 27       	eor	r19, r19
     6b2:	34 2f       	mov	r19, r20
     6b4:	3f 70       	andi	r19, 0x0F	; 15
     6b6:	23 2b       	or	r18, r19
     6b8:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite) << 4| LCDDR12 & mask;
     6ba:	e8 ef       	ldi	r30, 0xF8	; 248
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	40 81       	ld	r20, Z
     6c0:	9c 01       	movw	r18, r24
     6c2:	32 95       	swap	r19
     6c4:	22 95       	swap	r18
     6c6:	2f 70       	andi	r18, 0x0F	; 15
     6c8:	23 27       	eor	r18, r19
     6ca:	3f 70       	andi	r19, 0x0F	; 15
     6cc:	23 27       	eor	r18, r19
     6ce:	20 7f       	andi	r18, 0xF0	; 240
     6d0:	33 27       	eor	r19, r19
     6d2:	34 2f       	mov	r19, r20
     6d4:	3f 70       	andi	r19, 0x0F	; 15
     6d6:	23 2b       	or	r18, r19
     6d8:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite) << 4| LCDDR17 & mask;
     6da:	ed ef       	ldi	r30, 0xFD	; 253
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	20 81       	ld	r18, Z
     6e0:	89 2f       	mov	r24, r25
     6e2:	99 27       	eor	r25, r25
     6e4:	82 95       	swap	r24
     6e6:	8f 70       	andi	r24, 0x0F	; 15
     6e8:	82 95       	swap	r24
     6ea:	92 95       	swap	r25
     6ec:	90 7f       	andi	r25, 0xF0	; 240
     6ee:	98 27       	eor	r25, r24
     6f0:	80 7f       	andi	r24, 0xF0	; 240
     6f2:	98 27       	eor	r25, r24
     6f4:	92 2f       	mov	r25, r18
     6f6:	9f 70       	andi	r25, 0x0F	; 15
     6f8:	89 2b       	or	r24, r25
     6fa:	80 83       	st	Z, r24
			}
		}
	}
}
     6fc:	64 96       	adiw	r28, 0x14	; 20
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <printAt>:

void printAt(long num, int pos) {
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	16 2f       	mov	r17, r22
     718:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (char)num % 100 / 10 + '0', pp);
     71a:	89 e2       	ldi	r24, 0x29	; 41
     71c:	68 9f       	mul	r22, r24
     71e:	81 2d       	mov	r24, r1
     720:	11 24       	eor	r1, r1
     722:	82 95       	swap	r24
     724:	8f 70       	andi	r24, 0x0F	; 15
     726:	96 2f       	mov	r25, r22
     728:	24 e6       	ldi	r18, 0x64	; 100
     72a:	82 9f       	mul	r24, r18
     72c:	90 19       	sub	r25, r0
     72e:	11 24       	eor	r1, r1
     730:	0d ec       	ldi	r16, 0xCD	; 205
     732:	90 9f       	mul	r25, r16
     734:	81 2d       	mov	r24, r1
     736:	11 24       	eor	r1, r1
     738:	86 95       	lsr	r24
     73a:	86 95       	lsr	r24
     73c:	86 95       	lsr	r24
     73e:	ba 01       	movw	r22, r20
     740:	80 5d       	subi	r24, 0xD0	; 208
     742:	0e 94 24 02 	call	0x448	; 0x448 <writeChar>
	pp++;
     746:	be 01       	movw	r22, r28
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
	writeChar( (char)num % 10 + '0', pp);
     74c:	10 9f       	mul	r17, r16
     74e:	01 2d       	mov	r16, r1
     750:	11 24       	eor	r1, r1
     752:	06 95       	lsr	r16
     754:	06 95       	lsr	r16
     756:	06 95       	lsr	r16
     758:	00 0f       	add	r16, r16
     75a:	80 2f       	mov	r24, r16
     75c:	88 0f       	add	r24, r24
     75e:	88 0f       	add	r24, r24
     760:	08 0f       	add	r16, r24
     762:	81 2f       	mov	r24, r17
     764:	80 1b       	sub	r24, r16
     766:	80 5d       	subi	r24, 0xD0	; 208
     768:	0e 94 24 02 	call	0x448	; 0x448 <writeChar>
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <update_screen>:

void update_screen(LCD *self,int gen) {
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	ec 01       	movw	r28, r24
	printAt(self->Gen1->freq,0);
     77c:	ec 81       	ldd	r30, Y+4	; 0x04
     77e:	fd 81       	ldd	r31, Y+5	; 0x05
     780:	64 81       	ldd	r22, Z+4	; 0x04
     782:	75 81       	ldd	r23, Z+5	; 0x05
     784:	88 27       	eor	r24, r24
     786:	77 fd       	sbrc	r23, 7
     788:	80 95       	com	r24
     78a:	98 2f       	mov	r25, r24
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	0e 94 87 03 	call	0x70e	; 0x70e <printAt>
	printAt(self->Gen2->freq,4);
     794:	ee 81       	ldd	r30, Y+6	; 0x06
     796:	ff 81       	ldd	r31, Y+7	; 0x07
     798:	64 81       	ldd	r22, Z+4	; 0x04
     79a:	75 81       	ldd	r23, Z+5	; 0x05
     79c:	88 27       	eor	r24, r24
     79e:	77 fd       	sbrc	r23, 7
     7a0:	80 95       	com	r24
     7a2:	98 2f       	mov	r25, r24
     7a4:	44 e0       	ldi	r20, 0x04	; 4
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	0e 94 87 03 	call	0x70e	; 0x70e <printAt>
		LCDDR18 = 0x0;
	} else if(self->curgen == self->Gen1){
		LCDDR13 = 0x0;
		LCDDR18 = 0x1;
	}*/
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <shift>:

void shift(LCD *self, int gen) {
	if (gen == 1) {
     7b2:	61 30       	cpi	r22, 0x01	; 1
     7b4:	71 05       	cpc	r23, r1
     7b6:	69 f4       	brne	.+26     	; 0x7d2 <shift+0x20>
		LCDDR3 = 1 | LCDDR3; //gen 1 selected indicator
     7b8:	ef ee       	ldi	r30, 0xEF	; 239
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	20 81       	ld	r18, Z
     7be:	21 60       	ori	r18, 0x01	; 1
     7c0:	20 83       	st	Z, r18
		LCDDR1 = 0x0;
     7c2:	10 92 ed 00 	sts	0x00ED, r1
		self->curgen = self->Gen1;
     7c6:	fc 01       	movw	r30, r24
     7c8:	24 81       	ldd	r18, Z+4	; 0x04
     7ca:	35 81       	ldd	r19, Z+5	; 0x05
     7cc:	31 87       	std	Z+9, r19	; 0x09
     7ce:	20 87       	std	Z+8, r18	; 0x08
     7d0:	08 95       	ret
		
	} else if (gen == 2) {
     7d2:	62 30       	cpi	r22, 0x02	; 2
     7d4:	71 05       	cpc	r23, r1
     7d6:	61 f4       	brne	.+24     	; 0x7f0 <shift+0x3e>
		LCDDR1 = 0x2 | LCDDR1; //gen 2 selected indicator
     7d8:	ed ee       	ldi	r30, 0xED	; 237
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	20 81       	ld	r18, Z
     7de:	22 60       	ori	r18, 0x02	; 2
     7e0:	20 83       	st	Z, r18
		LCDDR3 = 0;
     7e2:	10 92 ef 00 	sts	0x00EF, r1
		self->curgen = self->Gen2;
     7e6:	fc 01       	movw	r30, r24
     7e8:	26 81       	ldd	r18, Z+6	; 0x06
     7ea:	37 81       	ldd	r19, Z+7	; 0x07
     7ec:	31 87       	std	Z+9, r19	; 0x09
     7ee:	20 87       	std	Z+8, r18	; 0x08
     7f0:	08 95       	ret

000007f2 <infinity>:
void save(PulseGen *self) {
    self->saved_freq = self->freq;
    self->freq = 0;
}

void infinity(PulseGen *self) {
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	ec 01       	movw	r28, r24
	if (self->freq != 0) {
     804:	8c 81       	ldd	r24, Y+4	; 0x04
     806:	9d 81       	ldd	r25, Y+5	; 0x05
     808:	89 2b       	or	r24, r25
     80a:	29 f1       	breq	.+74     	; 0x856 <infinity+0x64>
		SYNC(self->Write1,write,self->portnr);
     80c:	4a 85       	ldd	r20, Y+10	; 0x0a
     80e:	5b 85       	ldd	r21, Y+11	; 0x0b
     810:	68 e3       	ldi	r22, 0x38	; 56
     812:	71 e1       	ldi	r23, 0x11	; 17
     814:	88 85       	ldd	r24, Y+8	; 0x08
     816:	99 85       	ldd	r25, Y+9	; 0x09
     818:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
		AFTER(SEC(1)/self->freq/2,self,infinity,0);
     81c:	2c 81       	ldd	r18, Y+4	; 0x04
     81e:	3d 81       	ldd	r19, Y+5	; 0x05
     820:	44 27       	eor	r20, r20
     822:	37 fd       	sbrc	r19, 7
     824:	40 95       	com	r20
     826:	54 2f       	mov	r21, r20
     828:	69 e0       	ldi	r22, 0x09	; 9
     82a:	7d e3       	ldi	r23, 0x3D	; 61
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 48 11 	call	0x2290	; 0x2290 <__divmodsi4>
     834:	ca 01       	movw	r24, r20
     836:	b9 01       	movw	r22, r18
     838:	c1 2c       	mov	r12, r1
     83a:	d1 2c       	mov	r13, r1
     83c:	0f 2e       	mov	r0, r31
     83e:	f9 ef       	ldi	r31, 0xF9	; 249
     840:	ef 2e       	mov	r14, r31
     842:	f3 e0       	ldi	r31, 0x03	; 3
     844:	ff 2e       	mov	r15, r31
     846:	f0 2d       	mov	r31, r0
     848:	8e 01       	movw	r16, r28
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	a9 01       	movw	r20, r18
     850:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
     854:	12 c0       	rjmp	.+36     	; 0x87a <infinity+0x88>
	} else {
		AFTER(SEC(1),self,infinity,0);
     856:	c1 2c       	mov	r12, r1
     858:	d1 2c       	mov	r13, r1
     85a:	0f 2e       	mov	r0, r31
     85c:	f9 ef       	ldi	r31, 0xF9	; 249
     85e:	ef 2e       	mov	r14, r31
     860:	f3 e0       	ldi	r31, 0x03	; 3
     862:	ff 2e       	mov	r15, r31
     864:	f0 2d       	mov	r31, r0
     866:	8e 01       	movw	r16, r28
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	a9 01       	movw	r20, r18
     86e:	62 e1       	ldi	r22, 0x12	; 18
     870:	7a e7       	ldi	r23, 0x7A	; 122
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
		 
	} else {
		SYNC(self->Write1,write,self->portnr);//pulse once
	
	}*/
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	08 95       	ret

0000088c <update_F>:
 *  Author: Klas Mannberg
 */ 
#include "PulseGen.h"
#include "avr/io.h"

void update_F(PulseGen *self,int val) {
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	ec 01       	movw	r28, r24
	 if(self->first_call == 0 && val==1){
     89e:	8c 85       	ldd	r24, Y+12	; 0x0c
     8a0:	9d 85       	ldd	r25, Y+13	; 0x0d
     8a2:	89 2b       	or	r24, r25
     8a4:	f9 f4       	brne	.+62     	; 0x8e4 <update_F+0x58>
     8a6:	61 30       	cpi	r22, 0x01	; 1
     8a8:	71 05       	cpc	r23, r1
     8aa:	e1 f4       	brne	.+56     	; 0x8e4 <update_F+0x58>
		 //LCDDR1 = 0xFFFF;
		 if(self->first_call == 0) {
			 self->first_call = 1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	9d 87       	std	Y+13, r25	; 0x0d
     8b2:	8c 87       	std	Y+12, r24	; 0x0c
			 AFTER(SEC(1)/2,self,infinity,0); //since its from 0 its guaranteed 1hz so call after 1sec/2
     8b4:	c1 2c       	mov	r12, r1
     8b6:	d1 2c       	mov	r13, r1
     8b8:	0f 2e       	mov	r0, r31
     8ba:	f9 ef       	ldi	r31, 0xF9	; 249
     8bc:	ef 2e       	mov	r14, r31
     8be:	f3 e0       	ldi	r31, 0x03	; 3
     8c0:	ff 2e       	mov	r15, r31
     8c2:	f0 2d       	mov	r31, r0
     8c4:	8e 01       	movw	r16, r28
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	a9 01       	movw	r20, r18
     8cc:	69 e0       	ldi	r22, 0x09	; 9
     8ce:	7d e3       	ldi	r23, 0x3D	; 61
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
		 }
		 self->freq += val;
     8d8:	8c 81       	ldd	r24, Y+4	; 0x04
     8da:	9d 81       	ldd	r25, Y+5	; 0x05
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	9d 83       	std	Y+5, r25	; 0x05
     8e0:	8c 83       	std	Y+4, r24	; 0x04
     8e2:	18 c0       	rjmp	.+48     	; 0x914 <update_F+0x88>
	}else if (val<0 && self->freq>0) {
     8e4:	77 23       	and	r23, r23
     8e6:	54 f4       	brge	.+20     	; 0x8fc <update_F+0x70>
     8e8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ea:	9d 81       	ldd	r25, Y+5	; 0x05
     8ec:	18 16       	cp	r1, r24
     8ee:	19 06       	cpc	r1, r25
     8f0:	2c f4       	brge	.+10     	; 0x8fc <update_F+0x70>
        self->freq += val;
     8f2:	68 0f       	add	r22, r24
     8f4:	79 1f       	adc	r23, r25
     8f6:	7d 83       	std	Y+5, r23	; 0x05
     8f8:	6c 83       	std	Y+4, r22	; 0x04
     8fa:	0c c0       	rjmp	.+24     	; 0x914 <update_F+0x88>
    } else if(val>0 && self->freq<100) {
     8fc:	16 16       	cp	r1, r22
     8fe:	17 06       	cpc	r1, r23
     900:	4c f4       	brge	.+18     	; 0x914 <update_F+0x88>
     902:	8c 81       	ldd	r24, Y+4	; 0x04
     904:	9d 81       	ldd	r25, Y+5	; 0x05
     906:	84 36       	cpi	r24, 0x64	; 100
     908:	91 05       	cpc	r25, r1
     90a:	24 f4       	brge	.+8      	; 0x914 <update_F+0x88>
        self->freq += val;
     90c:	68 0f       	add	r22, r24
     90e:	79 1f       	adc	r23, r25
     910:	7d 83       	std	Y+5, r23	; 0x05
     912:	6c 83       	std	Y+4, r22	; 0x04
    }
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	df 90       	pop	r13
     922:	cf 90       	pop	r12
     924:	08 95       	ret

00000926 <save>:

void save(PulseGen *self) {
     926:	fc 01       	movw	r30, r24
    self->saved_freq = self->freq;
     928:	84 81       	ldd	r24, Z+4	; 0x04
     92a:	95 81       	ldd	r25, Z+5	; 0x05
     92c:	97 83       	std	Z+7, r25	; 0x07
     92e:	86 83       	std	Z+6, r24	; 0x06
    self->freq = 0;
     930:	15 82       	std	Z+5, r1	; 0x05
     932:	14 82       	std	Z+4, r1	; 0x04
     934:	08 95       	ret

00000936 <metronome>:
 *  Author: Klas Mannberg
 */ 
#include "LCD.h"
#include "Pulser.h"
#include "avr/io.h"
void metronome(Pulser *self) {
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	ec 01       	movw	r28, r24
	
	if (self->cont == 1) {
     948:	8c 81       	ldd	r24, Y+4	; 0x04
     94a:	9d 81       	ldd	r25, Y+5	; 0x05
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	e9 f4       	brne	.+58     	; 0x98a <metronome+0x54>
		if ((PINB & 64) == 0) {
     950:	1e 99       	sbic	0x03, 6	; 3
     952:	0b c0       	rjmp	.+22     	; 0x96a <metronome+0x34>
			SYNC(self->LCD->curgen,update_F,1);
     954:	ee 81       	ldd	r30, Y+6	; 0x06
     956:	ff 81       	ldd	r31, Y+7	; 0x07
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	66 e4       	ldi	r22, 0x46	; 70
     95e:	74 e0       	ldi	r23, 0x04	; 4
     960:	80 85       	ldd	r24, Z+8	; 0x08
     962:	91 85       	ldd	r25, Z+9	; 0x09
     964:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
     968:	14 c0       	rjmp	.+40     	; 0x992 <metronome+0x5c>
		}
		else if ((PINB & 128) == 0) {
     96a:	1f 99       	sbic	0x03, 7	; 3
     96c:	0b c0       	rjmp	.+22     	; 0x984 <metronome+0x4e>
			SYNC(self->LCD->curgen,update_F,-1);
     96e:	ee 81       	ldd	r30, Y+6	; 0x06
     970:	ff 81       	ldd	r31, Y+7	; 0x07
     972:	4f ef       	ldi	r20, 0xFF	; 255
     974:	5f ef       	ldi	r21, 0xFF	; 255
     976:	66 e4       	ldi	r22, 0x46	; 70
     978:	74 e0       	ldi	r23, 0x04	; 4
     97a:	80 85       	ldd	r24, Z+8	; 0x08
     97c:	91 85       	ldd	r25, Z+9	; 0x09
     97e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
     982:	07 c0       	rjmp	.+14     	; 0x992 <metronome+0x5c>
		} else {
			self->cont = 0;
     984:	1d 82       	std	Y+5, r1	; 0x05
     986:	1c 82       	std	Y+4, r1	; 0x04
			return;
     988:	1e c0       	rjmp	.+60     	; 0x9c6 <metronome+0x90>
		}
	}
	else {
		self->cont = 1;
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	9d 83       	std	Y+5, r25	; 0x05
     990:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	SYNC(self->LCD,update_screen,1);
     992:	41 e0       	ldi	r20, 0x01	; 1
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	6b eb       	ldi	r22, 0xBB	; 187
     998:	73 e0       	ldi	r23, 0x03	; 3
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	9f 81       	ldd	r25, Y+7	; 0x07
     99e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
	AFTER(MSEC(200),self,metronome,0); // call on self with 200msec delay
     9a2:	c1 2c       	mov	r12, r1
     9a4:	d1 2c       	mov	r13, r1
     9a6:	0f 2e       	mov	r0, r31
     9a8:	fb e9       	ldi	r31, 0x9B	; 155
     9aa:	ef 2e       	mov	r14, r31
     9ac:	f4 e0       	ldi	r31, 0x04	; 4
     9ae:	ff 2e       	mov	r15, r31
     9b0:	f0 2d       	mov	r31, r0
     9b2:	8e 01       	movw	r16, r28
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	a9 01       	movw	r20, r18
     9ba:	6a e6       	ldi	r22, 0x6A	; 106
     9bc:	78 e1       	ldi	r23, 0x18	; 24
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12
     9d6:	08 95       	ret

000009d8 <initialize>:
    return now - (status ? current->msg->baseline : timestamp);
}

    
/* initialization */
static void initialize(void) {
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	00 d0       	rcall	.+0      	; 0x9de <initialize+0x6>
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <initialize+0x8>
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	8f e0       	ldi	r24, 0x0F	; 15
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	2f ee       	ldi	r18, 0xEF	; 239
     9ea:	32 e0       	ldi	r19, 0x02	; 2
     9ec:	fc 01       	movw	r30, r24
     9ee:	70 97       	sbiw	r30, 0x10	; 16
    int i;

    for (i=0; i<NMSGS-1; i++)
        messages[i].next = &messages[i+1];
     9f0:	91 83       	std	Z+1, r25	; 0x01
     9f2:	80 83       	st	Z, r24
     9f4:	40 96       	adiw	r24, 0x10	; 16
    
/* initialization */
static void initialize(void) {
    int i;

    for (i=0; i<NMSGS-1; i++)
     9f6:	82 17       	cp	r24, r18
     9f8:	93 07       	cpc	r25, r19
     9fa:	c1 f7       	brne	.-16     	; 0x9ec <initialize+0x14>
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
     9fc:	10 92 e0 02 	sts	0x02E0, r1
     a00:	10 92 df 02 	sts	0x02DF, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
     a04:	e7 e6       	ldi	r30, 0x67	; 103
     a06:	f1 e0       	ldi	r31, 0x01	; 1
     a08:	f0 93 4b 01 	sts	0x014B, r31
     a0c:	e0 93 4a 01 	sts	0x014A, r30
     a10:	a4 e8       	ldi	r26, 0x84	; 132
     a12:	b1 e0       	ldi	r27, 0x01	; 1
     a14:	b1 83       	std	Z+1, r27	; 0x01
     a16:	a0 83       	st	Z, r26
     a18:	e1 ea       	ldi	r30, 0xA1	; 161
     a1a:	f1 e0       	ldi	r31, 0x01	; 1
     a1c:	ed 93       	st	X+, r30
     a1e:	fc 93       	st	X, r31
    threads[NTHREADS-1].next = NULL;
     a20:	11 82       	std	Z+1, r1	; 0x01
     a22:	10 82       	st	Z, r1
     a24:	80 e5       	ldi	r24, 0x50	; 80
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	eb e4       	ldi	r30, 0x4B	; 75
     a2e:	f3 e0       	ldi	r31, 0x03	; 3
     a30:	fc 83       	std	Y+4, r31	; 0x04
     a32:	eb 83       	std	Y+3, r30	; 0x03
    
    for (i=0; i<NTHREADS; i++) {
        setjmp( threads[i].context );
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	0e 94 89 11 	call	0x2312	; 0x2312 <setjmp>
        SETSTACK( &threads[i].context, &stacks[i] );
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	9c 81       	ldd	r25, Y+4	; 0x04
     a40:	e9 81       	ldd	r30, Y+1	; 0x01
     a42:	fa 81       	ldd	r31, Y+2	; 0x02
     a44:	91 8b       	std	Z+17, r25	; 0x11
     a46:	80 8b       	std	Z+16, r24	; 0x10
     a48:	93 8b       	std	Z+19, r25	; 0x13
     a4a:	82 8b       	std	Z+18, r24	; 0x12
        SETPC( &threads[i].context, run );
     a4c:	84 e9       	ldi	r24, 0x94	; 148
     a4e:	90 e1       	ldi	r25, 0x10	; 16
     a50:	96 8b       	std	Z+22, r25	; 0x16
     a52:	85 8b       	std	Z+21, r24	; 0x15
     a54:	32 97       	sbiw	r30, 0x02	; 2
        threads[i].waitsFor = NULL;
     a56:	11 82       	std	Z+1, r1	; 0x01
     a58:	10 82       	st	Z, r1
     a5a:	e9 81       	ldd	r30, Y+1	; 0x01
     a5c:	fa 81       	ldd	r31, Y+2	; 0x02
     a5e:	7d 96       	adiw	r30, 0x1d	; 29
     a60:	fa 83       	std	Y+2, r31	; 0x02
     a62:	e9 83       	std	Y+1, r30	; 0x01
     a64:	8b 81       	ldd	r24, Y+3	; 0x03
     a66:	9c 81       	ldd	r25, Y+4	; 0x04
     a68:	80 5a       	subi	r24, 0xA0	; 160
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	9c 83       	std	Y+4, r25	; 0x04
     a6e:	8b 83       	std	Y+3, r24	; 0x03
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
     a70:	e4 5c       	subi	r30, 0xC4	; 196
     a72:	f1 40       	sbci	r31, 0x01	; 1
     a74:	f9 f6       	brne	.-66     	; 0xa34 <initialize+0x5c>
        SETSTACK( &threads[i].context, &stacks[i] );
        SETPC( &threads[i].context, run );
        threads[i].waitsFor = NULL;
    }

    thread0.next = NULL;
     a76:	10 92 e3 01 	sts	0x01E3, r1
     a7a:	10 92 e2 01 	sts	0x01E2, r1
    thread0.waitsFor = NULL;
     a7e:	10 92 e7 01 	sts	0x01E7, r1
     a82:	10 92 e6 01 	sts	0x01E6, r1
    thread0.msg = NULL;
     a86:	10 92 e5 01 	sts	0x01E5, r1
     a8a:	10 92 e4 01 	sts	0x01E4, r1
    
    TIMER_INIT();
     a8e:	e1 e6       	ldi	r30, 0x61	; 97
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 e8       	ldi	r24, 0x80	; 128
     a94:	80 83       	st	Z, r24
     a96:	10 82       	st	Z, r1
     a98:	10 92 85 00 	sts	0x0085, r1
     a9c:	10 92 84 00 	sts	0x0084, r1
     aa0:	84 e0       	ldi	r24, 0x04	; 4
     aa2:	80 93 81 00 	sts	0x0081, r24
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	80 93 6f 00 	sts	0x006F, r24
}
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <dispatch>:
    TIMERSET(timerQ);
    schedule();
}

/* context switching */
static void dispatch( Thread next ) {
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	00 d0       	rcall	.+0      	; 0xac0 <dispatch+0x6>
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	9a 83       	std	Y+2, r25	; 0x02
     ac6:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp( current->context ) == 0) {
     ac8:	80 91 00 01 	lds	r24, 0x0100
     acc:	90 91 01 01 	lds	r25, 0x0101
     ad0:	06 96       	adiw	r24, 0x06	; 6
     ad2:	0e 94 89 11 	call	0x2312	; 0x2312 <setjmp>
     ad6:	89 2b       	or	r24, r25
     ad8:	59 f4       	brne	.+22     	; 0xaf0 <dispatch+0x36>
        current = next;
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	90 93 01 01 	sts	0x0101, r25
     ae2:	80 93 00 01 	sts	0x0100, r24
        longjmp( next->context, 1 );
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	06 96       	adiw	r24, 0x06	; 6
     aec:	0e 94 a9 11 	call	0x2352	; 0x2352 <longjmp>
    }
}
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <schedule>:
    while (1) {
        SLEEP();
    }
}

static void schedule(void) {
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
    Msg topMsg = activeStack->msg;
     b02:	e0 91 02 01 	lds	r30, 0x0102
     b06:	f0 91 03 01 	lds	r31, 0x0103
     b0a:	c2 81       	ldd	r28, Z+2	; 0x02
     b0c:	d3 81       	ldd	r29, Z+3	; 0x03
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
     b0e:	a0 91 24 01 	lds	r26, 0x0124
     b12:	b0 91 25 01 	lds	r27, 0x0125
     b16:	10 97       	sbiw	r26, 0x00	; 0
     b18:	39 f1       	breq	.+78     	; 0xb68 <schedule+0x6e>
     b1a:	80 91 04 01 	lds	r24, 0x0104
     b1e:	90 91 05 01 	lds	r25, 0x0105
     b22:	00 97       	sbiw	r24, 0x00	; 0
     b24:	09 f1       	breq	.+66     	; 0xb68 <schedule+0x6e>
     b26:	20 97       	sbiw	r28, 0x00	; 0
     b28:	79 f0       	breq	.+30     	; 0xb48 <schedule+0x4e>
     b2a:	16 96       	adiw	r26, 0x06	; 6
     b2c:	4d 91       	ld	r20, X+
     b2e:	5d 91       	ld	r21, X+
     b30:	6d 91       	ld	r22, X+
     b32:	7c 91       	ld	r23, X
     b34:	19 97       	sbiw	r26, 0x09	; 9
     b36:	0e 81       	ldd	r16, Y+6	; 0x06
     b38:	1f 81       	ldd	r17, Y+7	; 0x07
     b3a:	28 85       	ldd	r18, Y+8	; 0x08
     b3c:	39 85       	ldd	r19, Y+9	; 0x09
     b3e:	40 1b       	sub	r20, r16
     b40:	51 0b       	sbc	r21, r17
     b42:	62 0b       	sbc	r22, r18
     b44:	73 0b       	sbc	r23, r19
     b46:	82 f4       	brpl	.+32     	; 0xb68 <schedule+0x6e>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
     b48:	dc 01       	movw	r26, r24
     b4a:	2d 91       	ld	r18, X+
     b4c:	3c 91       	ld	r19, X
     b4e:	11 97       	sbiw	r26, 0x01	; 1
     b50:	30 93 05 01 	sts	0x0105, r19
     b54:	20 93 04 01 	sts	0x0104, r18
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
     b58:	ed 93       	st	X+, r30
     b5a:	fc 93       	st	X, r31
    *stack = t;
     b5c:	90 93 03 01 	sts	0x0103, r25
     b60:	80 93 02 01 	sts	0x0102, r24

static void schedule(void) {
    Msg topMsg = activeStack->msg;
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
        push(pop(&threadPool), &activeStack);
        dispatch(activeStack);
     b64:	0e 94 5d 05 	call	0xaba	; 0xaba <dispatch>
    }
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	08 95       	ret

00000b72 <__vector_1>:
#define TIMER_COMPARE_INTERRUPT  ISR(TIMER1_COMPA_vect)
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
     b72:	1f 92       	push	r1
     b74:	0f 92       	push	r0
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	0f 92       	push	r0
     b7a:	11 24       	eor	r1, r1
     b7c:	2f 93       	push	r18
     b7e:	3f 93       	push	r19
     b80:	4f 93       	push	r20
     b82:	5f 93       	push	r21
     b84:	6f 93       	push	r22
     b86:	7f 93       	push	r23
     b88:	8f 93       	push	r24
     b8a:	9f 93       	push	r25
     b8c:	af 93       	push	r26
     b8e:	bf 93       	push	r27
     b90:	ef 93       	push	r30
     b92:	ff 93       	push	r31
     b94:	20 91 1c 01 	lds	r18, 0x011C
     b98:	30 91 1d 01 	lds	r19, 0x011D
     b9c:	40 91 84 00 	lds	r20, 0x0084
     ba0:	50 91 85 00 	lds	r21, 0x0085
     ba4:	c9 01       	movw	r24, r18
     ba6:	aa 27       	eor	r26, r26
     ba8:	97 fd       	sbrc	r25, 7
     baa:	a0 95       	com	r26
     bac:	ba 2f       	mov	r27, r26
     bae:	dc 01       	movw	r26, r24
     bb0:	99 27       	eor	r25, r25
     bb2:	88 27       	eor	r24, r24
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	84 2b       	or	r24, r20
     bba:	95 2b       	or	r25, r21
     bbc:	a6 2b       	or	r26, r22
     bbe:	b7 2b       	or	r27, r23
     bc0:	80 93 1e 01 	sts	0x011E, r24
     bc4:	90 93 1f 01 	sts	0x011F, r25
     bc8:	a0 93 20 01 	sts	0x0120, r26
     bcc:	b0 93 21 01 	sts	0x0121, r27
     bd0:	b0 9b       	sbis	0x16, 0	; 22
     bd2:	1b c0       	rjmp	.+54     	; 0xc0a <__vector_1+0x98>
     bd4:	40 91 84 00 	lds	r20, 0x0084
     bd8:	50 91 85 00 	lds	r21, 0x0085
     bdc:	c9 01       	movw	r24, r18
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	aa 27       	eor	r26, r26
     be2:	97 fd       	sbrc	r25, 7
     be4:	a0 95       	com	r26
     be6:	ba 2f       	mov	r27, r26
     be8:	dc 01       	movw	r26, r24
     bea:	99 27       	eor	r25, r25
     bec:	88 27       	eor	r24, r24
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	84 2b       	or	r24, r20
     bf4:	95 2b       	or	r25, r21
     bf6:	a6 2b       	or	r26, r22
     bf8:	b7 2b       	or	r27, r23
     bfa:	80 93 1e 01 	sts	0x011E, r24
     bfe:	90 93 1f 01 	sts	0x011F, r25
     c02:	a0 93 20 01 	sts	0x0120, r26
     c06:	b0 93 21 01 	sts	0x0121, r27
     c0a:	e0 91 be 01 	lds	r30, 0x01BE
     c0e:	f0 91 bf 01 	lds	r31, 0x01BF
     c12:	30 97       	sbiw	r30, 0x00	; 0
     c14:	39 f0       	breq	.+14     	; 0xc24 <__vector_1+0xb2>
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	80 91 26 01 	lds	r24, 0x0126
     c1e:	90 91 27 01 	lds	r25, 0x0127
     c22:	09 95       	icall
     c24:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
     c28:	ff 91       	pop	r31
     c2a:	ef 91       	pop	r30
     c2c:	bf 91       	pop	r27
     c2e:	af 91       	pop	r26
     c30:	9f 91       	pop	r25
     c32:	8f 91       	pop	r24
     c34:	7f 91       	pop	r23
     c36:	6f 91       	pop	r22
     c38:	5f 91       	pop	r21
     c3a:	4f 91       	pop	r20
     c3c:	3f 91       	pop	r19
     c3e:	2f 91       	pop	r18
     c40:	0f 90       	pop	r0
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	0f 90       	pop	r0
     c46:	1f 90       	pop	r1
     c48:	18 95       	reti

00000c4a <__vector_2>:
IRQ(IRQ_PCINT0,          PCINT0_vect);
     c4a:	1f 92       	push	r1
     c4c:	0f 92       	push	r0
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	0f 92       	push	r0
     c52:	11 24       	eor	r1, r1
     c54:	2f 93       	push	r18
     c56:	3f 93       	push	r19
     c58:	4f 93       	push	r20
     c5a:	5f 93       	push	r21
     c5c:	6f 93       	push	r22
     c5e:	7f 93       	push	r23
     c60:	8f 93       	push	r24
     c62:	9f 93       	push	r25
     c64:	af 93       	push	r26
     c66:	bf 93       	push	r27
     c68:	ef 93       	push	r30
     c6a:	ff 93       	push	r31
     c6c:	20 91 1c 01 	lds	r18, 0x011C
     c70:	30 91 1d 01 	lds	r19, 0x011D
     c74:	40 91 84 00 	lds	r20, 0x0084
     c78:	50 91 85 00 	lds	r21, 0x0085
     c7c:	c9 01       	movw	r24, r18
     c7e:	aa 27       	eor	r26, r26
     c80:	97 fd       	sbrc	r25, 7
     c82:	a0 95       	com	r26
     c84:	ba 2f       	mov	r27, r26
     c86:	dc 01       	movw	r26, r24
     c88:	99 27       	eor	r25, r25
     c8a:	88 27       	eor	r24, r24
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	84 2b       	or	r24, r20
     c92:	95 2b       	or	r25, r21
     c94:	a6 2b       	or	r26, r22
     c96:	b7 2b       	or	r27, r23
     c98:	80 93 1e 01 	sts	0x011E, r24
     c9c:	90 93 1f 01 	sts	0x011F, r25
     ca0:	a0 93 20 01 	sts	0x0120, r26
     ca4:	b0 93 21 01 	sts	0x0121, r27
     ca8:	b0 9b       	sbis	0x16, 0	; 22
     caa:	1b c0       	rjmp	.+54     	; 0xce2 <__vector_2+0x98>
     cac:	40 91 84 00 	lds	r20, 0x0084
     cb0:	50 91 85 00 	lds	r21, 0x0085
     cb4:	c9 01       	movw	r24, r18
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	aa 27       	eor	r26, r26
     cba:	97 fd       	sbrc	r25, 7
     cbc:	a0 95       	com	r26
     cbe:	ba 2f       	mov	r27, r26
     cc0:	dc 01       	movw	r26, r24
     cc2:	99 27       	eor	r25, r25
     cc4:	88 27       	eor	r24, r24
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	84 2b       	or	r24, r20
     ccc:	95 2b       	or	r25, r21
     cce:	a6 2b       	or	r26, r22
     cd0:	b7 2b       	or	r27, r23
     cd2:	80 93 1e 01 	sts	0x011E, r24
     cd6:	90 93 1f 01 	sts	0x011F, r25
     cda:	a0 93 20 01 	sts	0x0120, r26
     cde:	b0 93 21 01 	sts	0x0121, r27
     ce2:	e0 91 c0 01 	lds	r30, 0x01C0
     ce6:	f0 91 c1 01 	lds	r31, 0x01C1
     cea:	30 97       	sbiw	r30, 0x00	; 0
     cec:	39 f0       	breq	.+14     	; 0xcfc <__vector_2+0xb2>
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	80 91 28 01 	lds	r24, 0x0128
     cf6:	90 91 29 01 	lds	r25, 0x0129
     cfa:	09 95       	icall
     cfc:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
     d00:	ff 91       	pop	r31
     d02:	ef 91       	pop	r30
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <__vector_3>:
IRQ(IRQ_PCINT1,          PCINT1_vect);
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	5f 93       	push	r21
     d34:	6f 93       	push	r22
     d36:	7f 93       	push	r23
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	af 93       	push	r26
     d3e:	bf 93       	push	r27
     d40:	ef 93       	push	r30
     d42:	ff 93       	push	r31
     d44:	20 91 1c 01 	lds	r18, 0x011C
     d48:	30 91 1d 01 	lds	r19, 0x011D
     d4c:	40 91 84 00 	lds	r20, 0x0084
     d50:	50 91 85 00 	lds	r21, 0x0085
     d54:	c9 01       	movw	r24, r18
     d56:	aa 27       	eor	r26, r26
     d58:	97 fd       	sbrc	r25, 7
     d5a:	a0 95       	com	r26
     d5c:	ba 2f       	mov	r27, r26
     d5e:	dc 01       	movw	r26, r24
     d60:	99 27       	eor	r25, r25
     d62:	88 27       	eor	r24, r24
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	84 2b       	or	r24, r20
     d6a:	95 2b       	or	r25, r21
     d6c:	a6 2b       	or	r26, r22
     d6e:	b7 2b       	or	r27, r23
     d70:	80 93 1e 01 	sts	0x011E, r24
     d74:	90 93 1f 01 	sts	0x011F, r25
     d78:	a0 93 20 01 	sts	0x0120, r26
     d7c:	b0 93 21 01 	sts	0x0121, r27
     d80:	b0 9b       	sbis	0x16, 0	; 22
     d82:	1b c0       	rjmp	.+54     	; 0xdba <__vector_3+0x98>
     d84:	40 91 84 00 	lds	r20, 0x0084
     d88:	50 91 85 00 	lds	r21, 0x0085
     d8c:	c9 01       	movw	r24, r18
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	aa 27       	eor	r26, r26
     d92:	97 fd       	sbrc	r25, 7
     d94:	a0 95       	com	r26
     d96:	ba 2f       	mov	r27, r26
     d98:	dc 01       	movw	r26, r24
     d9a:	99 27       	eor	r25, r25
     d9c:	88 27       	eor	r24, r24
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	84 2b       	or	r24, r20
     da4:	95 2b       	or	r25, r21
     da6:	a6 2b       	or	r26, r22
     da8:	b7 2b       	or	r27, r23
     daa:	80 93 1e 01 	sts	0x011E, r24
     dae:	90 93 1f 01 	sts	0x011F, r25
     db2:	a0 93 20 01 	sts	0x0120, r26
     db6:	b0 93 21 01 	sts	0x0121, r27
     dba:	e0 91 c2 01 	lds	r30, 0x01C2
     dbe:	f0 91 c3 01 	lds	r31, 0x01C3
     dc2:	30 97       	sbiw	r30, 0x00	; 0
     dc4:	39 f0       	breq	.+14     	; 0xdd4 <__vector_3+0xb2>
     dc6:	62 e0       	ldi	r22, 0x02	; 2
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	80 91 2a 01 	lds	r24, 0x012A
     dce:	90 91 2b 01 	lds	r25, 0x012B
     dd2:	09 95       	icall
     dd4:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
     dd8:	ff 91       	pop	r31
     dda:	ef 91       	pop	r30
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	7f 91       	pop	r23
     de6:	6f 91       	pop	r22
     de8:	5f 91       	pop	r21
     dea:	4f 91       	pop	r20
     dec:	3f 91       	pop	r19
     dee:	2f 91       	pop	r18
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti

00000dfa <__vector_4>:
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
     dfa:	1f 92       	push	r1
     dfc:	0f 92       	push	r0
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	0f 92       	push	r0
     e02:	11 24       	eor	r1, r1
     e04:	2f 93       	push	r18
     e06:	3f 93       	push	r19
     e08:	4f 93       	push	r20
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
     e1c:	20 91 1c 01 	lds	r18, 0x011C
     e20:	30 91 1d 01 	lds	r19, 0x011D
     e24:	40 91 84 00 	lds	r20, 0x0084
     e28:	50 91 85 00 	lds	r21, 0x0085
     e2c:	c9 01       	movw	r24, r18
     e2e:	aa 27       	eor	r26, r26
     e30:	97 fd       	sbrc	r25, 7
     e32:	a0 95       	com	r26
     e34:	ba 2f       	mov	r27, r26
     e36:	dc 01       	movw	r26, r24
     e38:	99 27       	eor	r25, r25
     e3a:	88 27       	eor	r24, r24
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	84 2b       	or	r24, r20
     e42:	95 2b       	or	r25, r21
     e44:	a6 2b       	or	r26, r22
     e46:	b7 2b       	or	r27, r23
     e48:	80 93 1e 01 	sts	0x011E, r24
     e4c:	90 93 1f 01 	sts	0x011F, r25
     e50:	a0 93 20 01 	sts	0x0120, r26
     e54:	b0 93 21 01 	sts	0x0121, r27
     e58:	b0 9b       	sbis	0x16, 0	; 22
     e5a:	1b c0       	rjmp	.+54     	; 0xe92 <__vector_4+0x98>
     e5c:	40 91 84 00 	lds	r20, 0x0084
     e60:	50 91 85 00 	lds	r21, 0x0085
     e64:	c9 01       	movw	r24, r18
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	aa 27       	eor	r26, r26
     e6a:	97 fd       	sbrc	r25, 7
     e6c:	a0 95       	com	r26
     e6e:	ba 2f       	mov	r27, r26
     e70:	dc 01       	movw	r26, r24
     e72:	99 27       	eor	r25, r25
     e74:	88 27       	eor	r24, r24
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	84 2b       	or	r24, r20
     e7c:	95 2b       	or	r25, r21
     e7e:	a6 2b       	or	r26, r22
     e80:	b7 2b       	or	r27, r23
     e82:	80 93 1e 01 	sts	0x011E, r24
     e86:	90 93 1f 01 	sts	0x011F, r25
     e8a:	a0 93 20 01 	sts	0x0120, r26
     e8e:	b0 93 21 01 	sts	0x0121, r27
     e92:	e0 91 c4 01 	lds	r30, 0x01C4
     e96:	f0 91 c5 01 	lds	r31, 0x01C5
     e9a:	30 97       	sbiw	r30, 0x00	; 0
     e9c:	39 f0       	breq	.+14     	; 0xeac <__vector_4+0xb2>
     e9e:	63 e0       	ldi	r22, 0x03	; 3
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	80 91 2c 01 	lds	r24, 0x012C
     ea6:	90 91 2d 01 	lds	r25, 0x012D
     eaa:	09 95       	icall
     eac:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_5>:
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	2f 93       	push	r18
     ede:	3f 93       	push	r19
     ee0:	4f 93       	push	r20
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
     ef4:	20 91 1c 01 	lds	r18, 0x011C
     ef8:	30 91 1d 01 	lds	r19, 0x011D
     efc:	40 91 84 00 	lds	r20, 0x0084
     f00:	50 91 85 00 	lds	r21, 0x0085
     f04:	c9 01       	movw	r24, r18
     f06:	aa 27       	eor	r26, r26
     f08:	97 fd       	sbrc	r25, 7
     f0a:	a0 95       	com	r26
     f0c:	ba 2f       	mov	r27, r26
     f0e:	dc 01       	movw	r26, r24
     f10:	99 27       	eor	r25, r25
     f12:	88 27       	eor	r24, r24
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	84 2b       	or	r24, r20
     f1a:	95 2b       	or	r25, r21
     f1c:	a6 2b       	or	r26, r22
     f1e:	b7 2b       	or	r27, r23
     f20:	80 93 1e 01 	sts	0x011E, r24
     f24:	90 93 1f 01 	sts	0x011F, r25
     f28:	a0 93 20 01 	sts	0x0120, r26
     f2c:	b0 93 21 01 	sts	0x0121, r27
     f30:	b0 9b       	sbis	0x16, 0	; 22
     f32:	1b c0       	rjmp	.+54     	; 0xf6a <__vector_5+0x98>
     f34:	40 91 84 00 	lds	r20, 0x0084
     f38:	50 91 85 00 	lds	r21, 0x0085
     f3c:	c9 01       	movw	r24, r18
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	aa 27       	eor	r26, r26
     f42:	97 fd       	sbrc	r25, 7
     f44:	a0 95       	com	r26
     f46:	ba 2f       	mov	r27, r26
     f48:	dc 01       	movw	r26, r24
     f4a:	99 27       	eor	r25, r25
     f4c:	88 27       	eor	r24, r24
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	84 2b       	or	r24, r20
     f54:	95 2b       	or	r25, r21
     f56:	a6 2b       	or	r26, r22
     f58:	b7 2b       	or	r27, r23
     f5a:	80 93 1e 01 	sts	0x011E, r24
     f5e:	90 93 1f 01 	sts	0x011F, r25
     f62:	a0 93 20 01 	sts	0x0120, r26
     f66:	b0 93 21 01 	sts	0x0121, r27
     f6a:	e0 91 c6 01 	lds	r30, 0x01C6
     f6e:	f0 91 c7 01 	lds	r31, 0x01C7
     f72:	30 97       	sbiw	r30, 0x00	; 0
     f74:	39 f0       	breq	.+14     	; 0xf84 <__vector_5+0xb2>
     f76:	64 e0       	ldi	r22, 0x04	; 4
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	80 91 2e 01 	lds	r24, 0x012E
     f7e:	90 91 2f 01 	lds	r25, 0x012F
     f82:	09 95       	icall
     f84:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
     f88:	ff 91       	pop	r31
     f8a:	ef 91       	pop	r30
     f8c:	bf 91       	pop	r27
     f8e:	af 91       	pop	r26
     f90:	9f 91       	pop	r25
     f92:	8f 91       	pop	r24
     f94:	7f 91       	pop	r23
     f96:	6f 91       	pop	r22
     f98:	5f 91       	pop	r21
     f9a:	4f 91       	pop	r20
     f9c:	3f 91       	pop	r19
     f9e:	2f 91       	pop	r18
     fa0:	0f 90       	pop	r0
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	0f 90       	pop	r0
     fa6:	1f 90       	pop	r1
     fa8:	18 95       	reti

00000faa <__vector_10>:
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	2f 93       	push	r18
     fb6:	3f 93       	push	r19
     fb8:	4f 93       	push	r20
     fba:	5f 93       	push	r21
     fbc:	6f 93       	push	r22
     fbe:	7f 93       	push	r23
     fc0:	8f 93       	push	r24
     fc2:	9f 93       	push	r25
     fc4:	af 93       	push	r26
     fc6:	bf 93       	push	r27
     fc8:	ef 93       	push	r30
     fca:	ff 93       	push	r31
     fcc:	20 91 1c 01 	lds	r18, 0x011C
     fd0:	30 91 1d 01 	lds	r19, 0x011D
     fd4:	40 91 84 00 	lds	r20, 0x0084
     fd8:	50 91 85 00 	lds	r21, 0x0085
     fdc:	c9 01       	movw	r24, r18
     fde:	aa 27       	eor	r26, r26
     fe0:	97 fd       	sbrc	r25, 7
     fe2:	a0 95       	com	r26
     fe4:	ba 2f       	mov	r27, r26
     fe6:	dc 01       	movw	r26, r24
     fe8:	99 27       	eor	r25, r25
     fea:	88 27       	eor	r24, r24
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	84 2b       	or	r24, r20
     ff2:	95 2b       	or	r25, r21
     ff4:	a6 2b       	or	r26, r22
     ff6:	b7 2b       	or	r27, r23
     ff8:	80 93 1e 01 	sts	0x011E, r24
     ffc:	90 93 1f 01 	sts	0x011F, r25
    1000:	a0 93 20 01 	sts	0x0120, r26
    1004:	b0 93 21 01 	sts	0x0121, r27
    1008:	b0 9b       	sbis	0x16, 0	; 22
    100a:	1b c0       	rjmp	.+54     	; 0x1042 <__vector_10+0x98>
    100c:	40 91 84 00 	lds	r20, 0x0084
    1010:	50 91 85 00 	lds	r21, 0x0085
    1014:	c9 01       	movw	r24, r18
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	aa 27       	eor	r26, r26
    101a:	97 fd       	sbrc	r25, 7
    101c:	a0 95       	com	r26
    101e:	ba 2f       	mov	r27, r26
    1020:	dc 01       	movw	r26, r24
    1022:	99 27       	eor	r25, r25
    1024:	88 27       	eor	r24, r24
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	84 2b       	or	r24, r20
    102c:	95 2b       	or	r25, r21
    102e:	a6 2b       	or	r26, r22
    1030:	b7 2b       	or	r27, r23
    1032:	80 93 1e 01 	sts	0x011E, r24
    1036:	90 93 1f 01 	sts	0x011F, r25
    103a:	a0 93 20 01 	sts	0x0120, r26
    103e:	b0 93 21 01 	sts	0x0121, r27
    1042:	e0 91 c8 01 	lds	r30, 0x01C8
    1046:	f0 91 c9 01 	lds	r31, 0x01C9
    104a:	30 97       	sbiw	r30, 0x00	; 0
    104c:	39 f0       	breq	.+14     	; 0x105c <__vector_10+0xb2>
    104e:	65 e0       	ldi	r22, 0x05	; 5
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	80 91 30 01 	lds	r24, 0x0130
    1056:	90 91 31 01 	lds	r25, 0x0131
    105a:	09 95       	icall
    105c:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <__vector_11>:
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	2f 93       	push	r18
    108e:	3f 93       	push	r19
    1090:	4f 93       	push	r20
    1092:	5f 93       	push	r21
    1094:	6f 93       	push	r22
    1096:	7f 93       	push	r23
    1098:	8f 93       	push	r24
    109a:	9f 93       	push	r25
    109c:	af 93       	push	r26
    109e:	bf 93       	push	r27
    10a0:	ef 93       	push	r30
    10a2:	ff 93       	push	r31
    10a4:	20 91 1c 01 	lds	r18, 0x011C
    10a8:	30 91 1d 01 	lds	r19, 0x011D
    10ac:	40 91 84 00 	lds	r20, 0x0084
    10b0:	50 91 85 00 	lds	r21, 0x0085
    10b4:	c9 01       	movw	r24, r18
    10b6:	aa 27       	eor	r26, r26
    10b8:	97 fd       	sbrc	r25, 7
    10ba:	a0 95       	com	r26
    10bc:	ba 2f       	mov	r27, r26
    10be:	dc 01       	movw	r26, r24
    10c0:	99 27       	eor	r25, r25
    10c2:	88 27       	eor	r24, r24
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	84 2b       	or	r24, r20
    10ca:	95 2b       	or	r25, r21
    10cc:	a6 2b       	or	r26, r22
    10ce:	b7 2b       	or	r27, r23
    10d0:	80 93 1e 01 	sts	0x011E, r24
    10d4:	90 93 1f 01 	sts	0x011F, r25
    10d8:	a0 93 20 01 	sts	0x0120, r26
    10dc:	b0 93 21 01 	sts	0x0121, r27
    10e0:	b0 9b       	sbis	0x16, 0	; 22
    10e2:	1b c0       	rjmp	.+54     	; 0x111a <__vector_11+0x98>
    10e4:	40 91 84 00 	lds	r20, 0x0084
    10e8:	50 91 85 00 	lds	r21, 0x0085
    10ec:	c9 01       	movw	r24, r18
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	aa 27       	eor	r26, r26
    10f2:	97 fd       	sbrc	r25, 7
    10f4:	a0 95       	com	r26
    10f6:	ba 2f       	mov	r27, r26
    10f8:	dc 01       	movw	r26, r24
    10fa:	99 27       	eor	r25, r25
    10fc:	88 27       	eor	r24, r24
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	84 2b       	or	r24, r20
    1104:	95 2b       	or	r25, r21
    1106:	a6 2b       	or	r26, r22
    1108:	b7 2b       	or	r27, r23
    110a:	80 93 1e 01 	sts	0x011E, r24
    110e:	90 93 1f 01 	sts	0x011F, r25
    1112:	a0 93 20 01 	sts	0x0120, r26
    1116:	b0 93 21 01 	sts	0x0121, r27
    111a:	e0 91 ca 01 	lds	r30, 0x01CA
    111e:	f0 91 cb 01 	lds	r31, 0x01CB
    1122:	30 97       	sbiw	r30, 0x00	; 0
    1124:	39 f0       	breq	.+14     	; 0x1134 <__vector_11+0xb2>
    1126:	66 e0       	ldi	r22, 0x06	; 6
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	80 91 32 01 	lds	r24, 0x0132
    112e:	90 91 33 01 	lds	r25, 0x0133
    1132:	09 95       	icall
    1134:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    1138:	ff 91       	pop	r31
    113a:	ef 91       	pop	r30
    113c:	bf 91       	pop	r27
    113e:	af 91       	pop	r26
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	7f 91       	pop	r23
    1146:	6f 91       	pop	r22
    1148:	5f 91       	pop	r21
    114a:	4f 91       	pop	r20
    114c:	3f 91       	pop	r19
    114e:	2f 91       	pop	r18
    1150:	0f 90       	pop	r0
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	0f 90       	pop	r0
    1156:	1f 90       	pop	r1
    1158:	18 95       	reti

0000115a <__vector_12>:
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	2f 93       	push	r18
    1166:	3f 93       	push	r19
    1168:	4f 93       	push	r20
    116a:	5f 93       	push	r21
    116c:	6f 93       	push	r22
    116e:	7f 93       	push	r23
    1170:	8f 93       	push	r24
    1172:	9f 93       	push	r25
    1174:	af 93       	push	r26
    1176:	bf 93       	push	r27
    1178:	ef 93       	push	r30
    117a:	ff 93       	push	r31
    117c:	20 91 1c 01 	lds	r18, 0x011C
    1180:	30 91 1d 01 	lds	r19, 0x011D
    1184:	40 91 84 00 	lds	r20, 0x0084
    1188:	50 91 85 00 	lds	r21, 0x0085
    118c:	c9 01       	movw	r24, r18
    118e:	aa 27       	eor	r26, r26
    1190:	97 fd       	sbrc	r25, 7
    1192:	a0 95       	com	r26
    1194:	ba 2f       	mov	r27, r26
    1196:	dc 01       	movw	r26, r24
    1198:	99 27       	eor	r25, r25
    119a:	88 27       	eor	r24, r24
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	84 2b       	or	r24, r20
    11a2:	95 2b       	or	r25, r21
    11a4:	a6 2b       	or	r26, r22
    11a6:	b7 2b       	or	r27, r23
    11a8:	80 93 1e 01 	sts	0x011E, r24
    11ac:	90 93 1f 01 	sts	0x011F, r25
    11b0:	a0 93 20 01 	sts	0x0120, r26
    11b4:	b0 93 21 01 	sts	0x0121, r27
    11b8:	b0 9b       	sbis	0x16, 0	; 22
    11ba:	1b c0       	rjmp	.+54     	; 0x11f2 <__vector_12+0x98>
    11bc:	40 91 84 00 	lds	r20, 0x0084
    11c0:	50 91 85 00 	lds	r21, 0x0085
    11c4:	c9 01       	movw	r24, r18
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	aa 27       	eor	r26, r26
    11ca:	97 fd       	sbrc	r25, 7
    11cc:	a0 95       	com	r26
    11ce:	ba 2f       	mov	r27, r26
    11d0:	dc 01       	movw	r26, r24
    11d2:	99 27       	eor	r25, r25
    11d4:	88 27       	eor	r24, r24
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	84 2b       	or	r24, r20
    11dc:	95 2b       	or	r25, r21
    11de:	a6 2b       	or	r26, r22
    11e0:	b7 2b       	or	r27, r23
    11e2:	80 93 1e 01 	sts	0x011E, r24
    11e6:	90 93 1f 01 	sts	0x011F, r25
    11ea:	a0 93 20 01 	sts	0x0120, r26
    11ee:	b0 93 21 01 	sts	0x0121, r27
    11f2:	e0 91 cc 01 	lds	r30, 0x01CC
    11f6:	f0 91 cd 01 	lds	r31, 0x01CD
    11fa:	30 97       	sbiw	r30, 0x00	; 0
    11fc:	39 f0       	breq	.+14     	; 0x120c <__vector_12+0xb2>
    11fe:	67 e0       	ldi	r22, 0x07	; 7
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	80 91 34 01 	lds	r24, 0x0134
    1206:	90 91 35 01 	lds	r25, 0x0135
    120a:	09 95       	icall
    120c:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	7f 91       	pop	r23
    121e:	6f 91       	pop	r22
    1220:	5f 91       	pop	r21
    1222:	4f 91       	pop	r20
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	0f 90       	pop	r0
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	0f 90       	pop	r0
    122e:	1f 90       	pop	r1
    1230:	18 95       	reti

00001232 <__vector_13>:
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
    1232:	1f 92       	push	r1
    1234:	0f 92       	push	r0
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	0f 92       	push	r0
    123a:	11 24       	eor	r1, r1
    123c:	2f 93       	push	r18
    123e:	3f 93       	push	r19
    1240:	4f 93       	push	r20
    1242:	5f 93       	push	r21
    1244:	6f 93       	push	r22
    1246:	7f 93       	push	r23
    1248:	8f 93       	push	r24
    124a:	9f 93       	push	r25
    124c:	af 93       	push	r26
    124e:	bf 93       	push	r27
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
    1254:	20 91 1c 01 	lds	r18, 0x011C
    1258:	30 91 1d 01 	lds	r19, 0x011D
    125c:	40 91 84 00 	lds	r20, 0x0084
    1260:	50 91 85 00 	lds	r21, 0x0085
    1264:	c9 01       	movw	r24, r18
    1266:	aa 27       	eor	r26, r26
    1268:	97 fd       	sbrc	r25, 7
    126a:	a0 95       	com	r26
    126c:	ba 2f       	mov	r27, r26
    126e:	dc 01       	movw	r26, r24
    1270:	99 27       	eor	r25, r25
    1272:	88 27       	eor	r24, r24
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	84 2b       	or	r24, r20
    127a:	95 2b       	or	r25, r21
    127c:	a6 2b       	or	r26, r22
    127e:	b7 2b       	or	r27, r23
    1280:	80 93 1e 01 	sts	0x011E, r24
    1284:	90 93 1f 01 	sts	0x011F, r25
    1288:	a0 93 20 01 	sts	0x0120, r26
    128c:	b0 93 21 01 	sts	0x0121, r27
    1290:	b0 9b       	sbis	0x16, 0	; 22
    1292:	1b c0       	rjmp	.+54     	; 0x12ca <__vector_13+0x98>
    1294:	40 91 84 00 	lds	r20, 0x0084
    1298:	50 91 85 00 	lds	r21, 0x0085
    129c:	c9 01       	movw	r24, r18
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	aa 27       	eor	r26, r26
    12a2:	97 fd       	sbrc	r25, 7
    12a4:	a0 95       	com	r26
    12a6:	ba 2f       	mov	r27, r26
    12a8:	dc 01       	movw	r26, r24
    12aa:	99 27       	eor	r25, r25
    12ac:	88 27       	eor	r24, r24
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	84 2b       	or	r24, r20
    12b4:	95 2b       	or	r25, r21
    12b6:	a6 2b       	or	r26, r22
    12b8:	b7 2b       	or	r27, r23
    12ba:	80 93 1e 01 	sts	0x011E, r24
    12be:	90 93 1f 01 	sts	0x011F, r25
    12c2:	a0 93 20 01 	sts	0x0120, r26
    12c6:	b0 93 21 01 	sts	0x0121, r27
    12ca:	e0 91 ce 01 	lds	r30, 0x01CE
    12ce:	f0 91 cf 01 	lds	r31, 0x01CF
    12d2:	30 97       	sbiw	r30, 0x00	; 0
    12d4:	39 f0       	breq	.+14     	; 0x12e4 <__vector_13+0xb2>
    12d6:	68 e0       	ldi	r22, 0x08	; 8
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	80 91 36 01 	lds	r24, 0x0136
    12de:	90 91 37 01 	lds	r25, 0x0137
    12e2:	09 95       	icall
    12e4:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    12e8:	ff 91       	pop	r31
    12ea:	ef 91       	pop	r30
    12ec:	bf 91       	pop	r27
    12ee:	af 91       	pop	r26
    12f0:	9f 91       	pop	r25
    12f2:	8f 91       	pop	r24
    12f4:	7f 91       	pop	r23
    12f6:	6f 91       	pop	r22
    12f8:	5f 91       	pop	r21
    12fa:	4f 91       	pop	r20
    12fc:	3f 91       	pop	r19
    12fe:	2f 91       	pop	r18
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	0f 90       	pop	r0
    1306:	1f 90       	pop	r1
    1308:	18 95       	reti

0000130a <__vector_14>:
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	2f 93       	push	r18
    1316:	3f 93       	push	r19
    1318:	4f 93       	push	r20
    131a:	5f 93       	push	r21
    131c:	6f 93       	push	r22
    131e:	7f 93       	push	r23
    1320:	8f 93       	push	r24
    1322:	9f 93       	push	r25
    1324:	af 93       	push	r26
    1326:	bf 93       	push	r27
    1328:	ef 93       	push	r30
    132a:	ff 93       	push	r31
    132c:	20 91 1c 01 	lds	r18, 0x011C
    1330:	30 91 1d 01 	lds	r19, 0x011D
    1334:	40 91 84 00 	lds	r20, 0x0084
    1338:	50 91 85 00 	lds	r21, 0x0085
    133c:	c9 01       	movw	r24, r18
    133e:	aa 27       	eor	r26, r26
    1340:	97 fd       	sbrc	r25, 7
    1342:	a0 95       	com	r26
    1344:	ba 2f       	mov	r27, r26
    1346:	dc 01       	movw	r26, r24
    1348:	99 27       	eor	r25, r25
    134a:	88 27       	eor	r24, r24
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	84 2b       	or	r24, r20
    1352:	95 2b       	or	r25, r21
    1354:	a6 2b       	or	r26, r22
    1356:	b7 2b       	or	r27, r23
    1358:	80 93 1e 01 	sts	0x011E, r24
    135c:	90 93 1f 01 	sts	0x011F, r25
    1360:	a0 93 20 01 	sts	0x0120, r26
    1364:	b0 93 21 01 	sts	0x0121, r27
    1368:	b0 9b       	sbis	0x16, 0	; 22
    136a:	1b c0       	rjmp	.+54     	; 0x13a2 <__vector_14+0x98>
    136c:	40 91 84 00 	lds	r20, 0x0084
    1370:	50 91 85 00 	lds	r21, 0x0085
    1374:	c9 01       	movw	r24, r18
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	aa 27       	eor	r26, r26
    137a:	97 fd       	sbrc	r25, 7
    137c:	a0 95       	com	r26
    137e:	ba 2f       	mov	r27, r26
    1380:	dc 01       	movw	r26, r24
    1382:	99 27       	eor	r25, r25
    1384:	88 27       	eor	r24, r24
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	84 2b       	or	r24, r20
    138c:	95 2b       	or	r25, r21
    138e:	a6 2b       	or	r26, r22
    1390:	b7 2b       	or	r27, r23
    1392:	80 93 1e 01 	sts	0x011E, r24
    1396:	90 93 1f 01 	sts	0x011F, r25
    139a:	a0 93 20 01 	sts	0x0120, r26
    139e:	b0 93 21 01 	sts	0x0121, r27
    13a2:	e0 91 d0 01 	lds	r30, 0x01D0
    13a6:	f0 91 d1 01 	lds	r31, 0x01D1
    13aa:	30 97       	sbiw	r30, 0x00	; 0
    13ac:	39 f0       	breq	.+14     	; 0x13bc <__vector_14+0xb2>
    13ae:	69 e0       	ldi	r22, 0x09	; 9
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	80 91 38 01 	lds	r24, 0x0138
    13b6:	90 91 39 01 	lds	r25, 0x0139
    13ba:	09 95       	icall
    13bc:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	7f 91       	pop	r23
    13ce:	6f 91       	pop	r22
    13d0:	5f 91       	pop	r21
    13d2:	4f 91       	pop	r20
    13d4:	3f 91       	pop	r19
    13d6:	2f 91       	pop	r18
    13d8:	0f 90       	pop	r0
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	0f 90       	pop	r0
    13de:	1f 90       	pop	r1
    13e0:	18 95       	reti

000013e2 <__vector_15>:
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
    13e2:	1f 92       	push	r1
    13e4:	0f 92       	push	r0
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	0f 92       	push	r0
    13ea:	11 24       	eor	r1, r1
    13ec:	2f 93       	push	r18
    13ee:	3f 93       	push	r19
    13f0:	4f 93       	push	r20
    13f2:	5f 93       	push	r21
    13f4:	6f 93       	push	r22
    13f6:	7f 93       	push	r23
    13f8:	8f 93       	push	r24
    13fa:	9f 93       	push	r25
    13fc:	af 93       	push	r26
    13fe:	bf 93       	push	r27
    1400:	ef 93       	push	r30
    1402:	ff 93       	push	r31
    1404:	20 91 1c 01 	lds	r18, 0x011C
    1408:	30 91 1d 01 	lds	r19, 0x011D
    140c:	40 91 84 00 	lds	r20, 0x0084
    1410:	50 91 85 00 	lds	r21, 0x0085
    1414:	c9 01       	movw	r24, r18
    1416:	aa 27       	eor	r26, r26
    1418:	97 fd       	sbrc	r25, 7
    141a:	a0 95       	com	r26
    141c:	ba 2f       	mov	r27, r26
    141e:	dc 01       	movw	r26, r24
    1420:	99 27       	eor	r25, r25
    1422:	88 27       	eor	r24, r24
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	84 2b       	or	r24, r20
    142a:	95 2b       	or	r25, r21
    142c:	a6 2b       	or	r26, r22
    142e:	b7 2b       	or	r27, r23
    1430:	80 93 1e 01 	sts	0x011E, r24
    1434:	90 93 1f 01 	sts	0x011F, r25
    1438:	a0 93 20 01 	sts	0x0120, r26
    143c:	b0 93 21 01 	sts	0x0121, r27
    1440:	b0 9b       	sbis	0x16, 0	; 22
    1442:	1b c0       	rjmp	.+54     	; 0x147a <__vector_15+0x98>
    1444:	40 91 84 00 	lds	r20, 0x0084
    1448:	50 91 85 00 	lds	r21, 0x0085
    144c:	c9 01       	movw	r24, r18
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	aa 27       	eor	r26, r26
    1452:	97 fd       	sbrc	r25, 7
    1454:	a0 95       	com	r26
    1456:	ba 2f       	mov	r27, r26
    1458:	dc 01       	movw	r26, r24
    145a:	99 27       	eor	r25, r25
    145c:	88 27       	eor	r24, r24
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	84 2b       	or	r24, r20
    1464:	95 2b       	or	r25, r21
    1466:	a6 2b       	or	r26, r22
    1468:	b7 2b       	or	r27, r23
    146a:	80 93 1e 01 	sts	0x011E, r24
    146e:	90 93 1f 01 	sts	0x011F, r25
    1472:	a0 93 20 01 	sts	0x0120, r26
    1476:	b0 93 21 01 	sts	0x0121, r27
    147a:	e0 91 d2 01 	lds	r30, 0x01D2
    147e:	f0 91 d3 01 	lds	r31, 0x01D3
    1482:	30 97       	sbiw	r30, 0x00	; 0
    1484:	39 f0       	breq	.+14     	; 0x1494 <__vector_15+0xb2>
    1486:	6a e0       	ldi	r22, 0x0A	; 10
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	80 91 3a 01 	lds	r24, 0x013A
    148e:	90 91 3b 01 	lds	r25, 0x013B
    1492:	09 95       	icall
    1494:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    1498:	ff 91       	pop	r31
    149a:	ef 91       	pop	r30
    149c:	bf 91       	pop	r27
    149e:	af 91       	pop	r26
    14a0:	9f 91       	pop	r25
    14a2:	8f 91       	pop	r24
    14a4:	7f 91       	pop	r23
    14a6:	6f 91       	pop	r22
    14a8:	5f 91       	pop	r21
    14aa:	4f 91       	pop	r20
    14ac:	3f 91       	pop	r19
    14ae:	2f 91       	pop	r18
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	0f 90       	pop	r0
    14b6:	1f 90       	pop	r1
    14b8:	18 95       	reti

000014ba <__vector_16>:
IRQ(IRQ_USI_START,       USI_START_vect);
    14ba:	1f 92       	push	r1
    14bc:	0f 92       	push	r0
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	0f 92       	push	r0
    14c2:	11 24       	eor	r1, r1
    14c4:	2f 93       	push	r18
    14c6:	3f 93       	push	r19
    14c8:	4f 93       	push	r20
    14ca:	5f 93       	push	r21
    14cc:	6f 93       	push	r22
    14ce:	7f 93       	push	r23
    14d0:	8f 93       	push	r24
    14d2:	9f 93       	push	r25
    14d4:	af 93       	push	r26
    14d6:	bf 93       	push	r27
    14d8:	ef 93       	push	r30
    14da:	ff 93       	push	r31
    14dc:	20 91 1c 01 	lds	r18, 0x011C
    14e0:	30 91 1d 01 	lds	r19, 0x011D
    14e4:	40 91 84 00 	lds	r20, 0x0084
    14e8:	50 91 85 00 	lds	r21, 0x0085
    14ec:	c9 01       	movw	r24, r18
    14ee:	aa 27       	eor	r26, r26
    14f0:	97 fd       	sbrc	r25, 7
    14f2:	a0 95       	com	r26
    14f4:	ba 2f       	mov	r27, r26
    14f6:	dc 01       	movw	r26, r24
    14f8:	99 27       	eor	r25, r25
    14fa:	88 27       	eor	r24, r24
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	84 2b       	or	r24, r20
    1502:	95 2b       	or	r25, r21
    1504:	a6 2b       	or	r26, r22
    1506:	b7 2b       	or	r27, r23
    1508:	80 93 1e 01 	sts	0x011E, r24
    150c:	90 93 1f 01 	sts	0x011F, r25
    1510:	a0 93 20 01 	sts	0x0120, r26
    1514:	b0 93 21 01 	sts	0x0121, r27
    1518:	b0 9b       	sbis	0x16, 0	; 22
    151a:	1b c0       	rjmp	.+54     	; 0x1552 <__vector_16+0x98>
    151c:	40 91 84 00 	lds	r20, 0x0084
    1520:	50 91 85 00 	lds	r21, 0x0085
    1524:	c9 01       	movw	r24, r18
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	aa 27       	eor	r26, r26
    152a:	97 fd       	sbrc	r25, 7
    152c:	a0 95       	com	r26
    152e:	ba 2f       	mov	r27, r26
    1530:	dc 01       	movw	r26, r24
    1532:	99 27       	eor	r25, r25
    1534:	88 27       	eor	r24, r24
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	84 2b       	or	r24, r20
    153c:	95 2b       	or	r25, r21
    153e:	a6 2b       	or	r26, r22
    1540:	b7 2b       	or	r27, r23
    1542:	80 93 1e 01 	sts	0x011E, r24
    1546:	90 93 1f 01 	sts	0x011F, r25
    154a:	a0 93 20 01 	sts	0x0120, r26
    154e:	b0 93 21 01 	sts	0x0121, r27
    1552:	e0 91 d4 01 	lds	r30, 0x01D4
    1556:	f0 91 d5 01 	lds	r31, 0x01D5
    155a:	30 97       	sbiw	r30, 0x00	; 0
    155c:	39 f0       	breq	.+14     	; 0x156c <__vector_16+0xb2>
    155e:	6b e0       	ldi	r22, 0x0B	; 11
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	80 91 3c 01 	lds	r24, 0x013C
    1566:	90 91 3d 01 	lds	r25, 0x013D
    156a:	09 95       	icall
    156c:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    1570:	ff 91       	pop	r31
    1572:	ef 91       	pop	r30
    1574:	bf 91       	pop	r27
    1576:	af 91       	pop	r26
    1578:	9f 91       	pop	r25
    157a:	8f 91       	pop	r24
    157c:	7f 91       	pop	r23
    157e:	6f 91       	pop	r22
    1580:	5f 91       	pop	r21
    1582:	4f 91       	pop	r20
    1584:	3f 91       	pop	r19
    1586:	2f 91       	pop	r18
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	0f 90       	pop	r0
    158e:	1f 90       	pop	r1
    1590:	18 95       	reti

00001592 <__vector_17>:
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
    1592:	1f 92       	push	r1
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
    159c:	2f 93       	push	r18
    159e:	3f 93       	push	r19
    15a0:	4f 93       	push	r20
    15a2:	5f 93       	push	r21
    15a4:	6f 93       	push	r22
    15a6:	7f 93       	push	r23
    15a8:	8f 93       	push	r24
    15aa:	9f 93       	push	r25
    15ac:	af 93       	push	r26
    15ae:	bf 93       	push	r27
    15b0:	ef 93       	push	r30
    15b2:	ff 93       	push	r31
    15b4:	20 91 1c 01 	lds	r18, 0x011C
    15b8:	30 91 1d 01 	lds	r19, 0x011D
    15bc:	40 91 84 00 	lds	r20, 0x0084
    15c0:	50 91 85 00 	lds	r21, 0x0085
    15c4:	c9 01       	movw	r24, r18
    15c6:	aa 27       	eor	r26, r26
    15c8:	97 fd       	sbrc	r25, 7
    15ca:	a0 95       	com	r26
    15cc:	ba 2f       	mov	r27, r26
    15ce:	dc 01       	movw	r26, r24
    15d0:	99 27       	eor	r25, r25
    15d2:	88 27       	eor	r24, r24
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	84 2b       	or	r24, r20
    15da:	95 2b       	or	r25, r21
    15dc:	a6 2b       	or	r26, r22
    15de:	b7 2b       	or	r27, r23
    15e0:	80 93 1e 01 	sts	0x011E, r24
    15e4:	90 93 1f 01 	sts	0x011F, r25
    15e8:	a0 93 20 01 	sts	0x0120, r26
    15ec:	b0 93 21 01 	sts	0x0121, r27
    15f0:	b0 9b       	sbis	0x16, 0	; 22
    15f2:	1b c0       	rjmp	.+54     	; 0x162a <__vector_17+0x98>
    15f4:	40 91 84 00 	lds	r20, 0x0084
    15f8:	50 91 85 00 	lds	r21, 0x0085
    15fc:	c9 01       	movw	r24, r18
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	aa 27       	eor	r26, r26
    1602:	97 fd       	sbrc	r25, 7
    1604:	a0 95       	com	r26
    1606:	ba 2f       	mov	r27, r26
    1608:	dc 01       	movw	r26, r24
    160a:	99 27       	eor	r25, r25
    160c:	88 27       	eor	r24, r24
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	84 2b       	or	r24, r20
    1614:	95 2b       	or	r25, r21
    1616:	a6 2b       	or	r26, r22
    1618:	b7 2b       	or	r27, r23
    161a:	80 93 1e 01 	sts	0x011E, r24
    161e:	90 93 1f 01 	sts	0x011F, r25
    1622:	a0 93 20 01 	sts	0x0120, r26
    1626:	b0 93 21 01 	sts	0x0121, r27
    162a:	e0 91 d6 01 	lds	r30, 0x01D6
    162e:	f0 91 d7 01 	lds	r31, 0x01D7
    1632:	30 97       	sbiw	r30, 0x00	; 0
    1634:	39 f0       	breq	.+14     	; 0x1644 <__vector_17+0xb2>
    1636:	6c e0       	ldi	r22, 0x0C	; 12
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	80 91 3e 01 	lds	r24, 0x013E
    163e:	90 91 3f 01 	lds	r25, 0x013F
    1642:	09 95       	icall
    1644:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    1648:	ff 91       	pop	r31
    164a:	ef 91       	pop	r30
    164c:	bf 91       	pop	r27
    164e:	af 91       	pop	r26
    1650:	9f 91       	pop	r25
    1652:	8f 91       	pop	r24
    1654:	7f 91       	pop	r23
    1656:	6f 91       	pop	r22
    1658:	5f 91       	pop	r21
    165a:	4f 91       	pop	r20
    165c:	3f 91       	pop	r19
    165e:	2f 91       	pop	r18
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	0f 90       	pop	r0
    1666:	1f 90       	pop	r1
    1668:	18 95       	reti

0000166a <__vector_18>:
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
    166a:	1f 92       	push	r1
    166c:	0f 92       	push	r0
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	0f 92       	push	r0
    1672:	11 24       	eor	r1, r1
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	ef 93       	push	r30
    168a:	ff 93       	push	r31
    168c:	20 91 1c 01 	lds	r18, 0x011C
    1690:	30 91 1d 01 	lds	r19, 0x011D
    1694:	40 91 84 00 	lds	r20, 0x0084
    1698:	50 91 85 00 	lds	r21, 0x0085
    169c:	c9 01       	movw	r24, r18
    169e:	aa 27       	eor	r26, r26
    16a0:	97 fd       	sbrc	r25, 7
    16a2:	a0 95       	com	r26
    16a4:	ba 2f       	mov	r27, r26
    16a6:	dc 01       	movw	r26, r24
    16a8:	99 27       	eor	r25, r25
    16aa:	88 27       	eor	r24, r24
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	84 2b       	or	r24, r20
    16b2:	95 2b       	or	r25, r21
    16b4:	a6 2b       	or	r26, r22
    16b6:	b7 2b       	or	r27, r23
    16b8:	80 93 1e 01 	sts	0x011E, r24
    16bc:	90 93 1f 01 	sts	0x011F, r25
    16c0:	a0 93 20 01 	sts	0x0120, r26
    16c4:	b0 93 21 01 	sts	0x0121, r27
    16c8:	b0 9b       	sbis	0x16, 0	; 22
    16ca:	1b c0       	rjmp	.+54     	; 0x1702 <__vector_18+0x98>
    16cc:	40 91 84 00 	lds	r20, 0x0084
    16d0:	50 91 85 00 	lds	r21, 0x0085
    16d4:	c9 01       	movw	r24, r18
    16d6:	01 96       	adiw	r24, 0x01	; 1
    16d8:	aa 27       	eor	r26, r26
    16da:	97 fd       	sbrc	r25, 7
    16dc:	a0 95       	com	r26
    16de:	ba 2f       	mov	r27, r26
    16e0:	dc 01       	movw	r26, r24
    16e2:	99 27       	eor	r25, r25
    16e4:	88 27       	eor	r24, r24
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	84 2b       	or	r24, r20
    16ec:	95 2b       	or	r25, r21
    16ee:	a6 2b       	or	r26, r22
    16f0:	b7 2b       	or	r27, r23
    16f2:	80 93 1e 01 	sts	0x011E, r24
    16f6:	90 93 1f 01 	sts	0x011F, r25
    16fa:	a0 93 20 01 	sts	0x0120, r26
    16fe:	b0 93 21 01 	sts	0x0121, r27
    1702:	e0 91 d8 01 	lds	r30, 0x01D8
    1706:	f0 91 d9 01 	lds	r31, 0x01D9
    170a:	30 97       	sbiw	r30, 0x00	; 0
    170c:	39 f0       	breq	.+14     	; 0x171c <__vector_18+0xb2>
    170e:	6d e0       	ldi	r22, 0x0D	; 13
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	80 91 40 01 	lds	r24, 0x0140
    1716:	90 91 41 01 	lds	r25, 0x0141
    171a:	09 95       	icall
    171c:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    1720:	ff 91       	pop	r31
    1722:	ef 91       	pop	r30
    1724:	bf 91       	pop	r27
    1726:	af 91       	pop	r26
    1728:	9f 91       	pop	r25
    172a:	8f 91       	pop	r24
    172c:	7f 91       	pop	r23
    172e:	6f 91       	pop	r22
    1730:	5f 91       	pop	r21
    1732:	4f 91       	pop	r20
    1734:	3f 91       	pop	r19
    1736:	2f 91       	pop	r18
    1738:	0f 90       	pop	r0
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	0f 90       	pop	r0
    173e:	1f 90       	pop	r1
    1740:	18 95       	reti

00001742 <__vector_19>:
IRQ(IRQ_ADC,             ADC_vect);
    1742:	1f 92       	push	r1
    1744:	0f 92       	push	r0
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	0f 92       	push	r0
    174a:	11 24       	eor	r1, r1
    174c:	2f 93       	push	r18
    174e:	3f 93       	push	r19
    1750:	4f 93       	push	r20
    1752:	5f 93       	push	r21
    1754:	6f 93       	push	r22
    1756:	7f 93       	push	r23
    1758:	8f 93       	push	r24
    175a:	9f 93       	push	r25
    175c:	af 93       	push	r26
    175e:	bf 93       	push	r27
    1760:	ef 93       	push	r30
    1762:	ff 93       	push	r31
    1764:	20 91 1c 01 	lds	r18, 0x011C
    1768:	30 91 1d 01 	lds	r19, 0x011D
    176c:	40 91 84 00 	lds	r20, 0x0084
    1770:	50 91 85 00 	lds	r21, 0x0085
    1774:	c9 01       	movw	r24, r18
    1776:	aa 27       	eor	r26, r26
    1778:	97 fd       	sbrc	r25, 7
    177a:	a0 95       	com	r26
    177c:	ba 2f       	mov	r27, r26
    177e:	dc 01       	movw	r26, r24
    1780:	99 27       	eor	r25, r25
    1782:	88 27       	eor	r24, r24
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	84 2b       	or	r24, r20
    178a:	95 2b       	or	r25, r21
    178c:	a6 2b       	or	r26, r22
    178e:	b7 2b       	or	r27, r23
    1790:	80 93 1e 01 	sts	0x011E, r24
    1794:	90 93 1f 01 	sts	0x011F, r25
    1798:	a0 93 20 01 	sts	0x0120, r26
    179c:	b0 93 21 01 	sts	0x0121, r27
    17a0:	b0 9b       	sbis	0x16, 0	; 22
    17a2:	1b c0       	rjmp	.+54     	; 0x17da <__vector_19+0x98>
    17a4:	40 91 84 00 	lds	r20, 0x0084
    17a8:	50 91 85 00 	lds	r21, 0x0085
    17ac:	c9 01       	movw	r24, r18
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	aa 27       	eor	r26, r26
    17b2:	97 fd       	sbrc	r25, 7
    17b4:	a0 95       	com	r26
    17b6:	ba 2f       	mov	r27, r26
    17b8:	dc 01       	movw	r26, r24
    17ba:	99 27       	eor	r25, r25
    17bc:	88 27       	eor	r24, r24
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	84 2b       	or	r24, r20
    17c4:	95 2b       	or	r25, r21
    17c6:	a6 2b       	or	r26, r22
    17c8:	b7 2b       	or	r27, r23
    17ca:	80 93 1e 01 	sts	0x011E, r24
    17ce:	90 93 1f 01 	sts	0x011F, r25
    17d2:	a0 93 20 01 	sts	0x0120, r26
    17d6:	b0 93 21 01 	sts	0x0121, r27
    17da:	e0 91 da 01 	lds	r30, 0x01DA
    17de:	f0 91 db 01 	lds	r31, 0x01DB
    17e2:	30 97       	sbiw	r30, 0x00	; 0
    17e4:	39 f0       	breq	.+14     	; 0x17f4 <__vector_19+0xb2>
    17e6:	6e e0       	ldi	r22, 0x0E	; 14
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	80 91 42 01 	lds	r24, 0x0142
    17ee:	90 91 43 01 	lds	r25, 0x0143
    17f2:	09 95       	icall
    17f4:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <__vector_20>:
IRQ(IRQ_EE_READY,        EE_READY_vect);
    181a:	1f 92       	push	r1
    181c:	0f 92       	push	r0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	11 24       	eor	r1, r1
    1824:	2f 93       	push	r18
    1826:	3f 93       	push	r19
    1828:	4f 93       	push	r20
    182a:	5f 93       	push	r21
    182c:	6f 93       	push	r22
    182e:	7f 93       	push	r23
    1830:	8f 93       	push	r24
    1832:	9f 93       	push	r25
    1834:	af 93       	push	r26
    1836:	bf 93       	push	r27
    1838:	ef 93       	push	r30
    183a:	ff 93       	push	r31
    183c:	20 91 1c 01 	lds	r18, 0x011C
    1840:	30 91 1d 01 	lds	r19, 0x011D
    1844:	40 91 84 00 	lds	r20, 0x0084
    1848:	50 91 85 00 	lds	r21, 0x0085
    184c:	c9 01       	movw	r24, r18
    184e:	aa 27       	eor	r26, r26
    1850:	97 fd       	sbrc	r25, 7
    1852:	a0 95       	com	r26
    1854:	ba 2f       	mov	r27, r26
    1856:	dc 01       	movw	r26, r24
    1858:	99 27       	eor	r25, r25
    185a:	88 27       	eor	r24, r24
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	84 2b       	or	r24, r20
    1862:	95 2b       	or	r25, r21
    1864:	a6 2b       	or	r26, r22
    1866:	b7 2b       	or	r27, r23
    1868:	80 93 1e 01 	sts	0x011E, r24
    186c:	90 93 1f 01 	sts	0x011F, r25
    1870:	a0 93 20 01 	sts	0x0120, r26
    1874:	b0 93 21 01 	sts	0x0121, r27
    1878:	b0 9b       	sbis	0x16, 0	; 22
    187a:	1b c0       	rjmp	.+54     	; 0x18b2 <__vector_20+0x98>
    187c:	40 91 84 00 	lds	r20, 0x0084
    1880:	50 91 85 00 	lds	r21, 0x0085
    1884:	c9 01       	movw	r24, r18
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	aa 27       	eor	r26, r26
    188a:	97 fd       	sbrc	r25, 7
    188c:	a0 95       	com	r26
    188e:	ba 2f       	mov	r27, r26
    1890:	dc 01       	movw	r26, r24
    1892:	99 27       	eor	r25, r25
    1894:	88 27       	eor	r24, r24
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	84 2b       	or	r24, r20
    189c:	95 2b       	or	r25, r21
    189e:	a6 2b       	or	r26, r22
    18a0:	b7 2b       	or	r27, r23
    18a2:	80 93 1e 01 	sts	0x011E, r24
    18a6:	90 93 1f 01 	sts	0x011F, r25
    18aa:	a0 93 20 01 	sts	0x0120, r26
    18ae:	b0 93 21 01 	sts	0x0121, r27
    18b2:	e0 91 dc 01 	lds	r30, 0x01DC
    18b6:	f0 91 dd 01 	lds	r31, 0x01DD
    18ba:	30 97       	sbiw	r30, 0x00	; 0
    18bc:	39 f0       	breq	.+14     	; 0x18cc <__vector_20+0xb2>
    18be:	6f e0       	ldi	r22, 0x0F	; 15
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	80 91 44 01 	lds	r24, 0x0144
    18c6:	90 91 45 01 	lds	r25, 0x0145
    18ca:	09 95       	icall
    18cc:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    18d0:	ff 91       	pop	r31
    18d2:	ef 91       	pop	r30
    18d4:	bf 91       	pop	r27
    18d6:	af 91       	pop	r26
    18d8:	9f 91       	pop	r25
    18da:	8f 91       	pop	r24
    18dc:	7f 91       	pop	r23
    18de:	6f 91       	pop	r22
    18e0:	5f 91       	pop	r21
    18e2:	4f 91       	pop	r20
    18e4:	3f 91       	pop	r19
    18e6:	2f 91       	pop	r18
    18e8:	0f 90       	pop	r0
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	0f 90       	pop	r0
    18ee:	1f 90       	pop	r1
    18f0:	18 95       	reti

000018f2 <__vector_21>:
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
    18f2:	1f 92       	push	r1
    18f4:	0f 92       	push	r0
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	0f 92       	push	r0
    18fa:	11 24       	eor	r1, r1
    18fc:	2f 93       	push	r18
    18fe:	3f 93       	push	r19
    1900:	4f 93       	push	r20
    1902:	5f 93       	push	r21
    1904:	6f 93       	push	r22
    1906:	7f 93       	push	r23
    1908:	8f 93       	push	r24
    190a:	9f 93       	push	r25
    190c:	af 93       	push	r26
    190e:	bf 93       	push	r27
    1910:	ef 93       	push	r30
    1912:	ff 93       	push	r31
    1914:	20 91 1c 01 	lds	r18, 0x011C
    1918:	30 91 1d 01 	lds	r19, 0x011D
    191c:	40 91 84 00 	lds	r20, 0x0084
    1920:	50 91 85 00 	lds	r21, 0x0085
    1924:	c9 01       	movw	r24, r18
    1926:	aa 27       	eor	r26, r26
    1928:	97 fd       	sbrc	r25, 7
    192a:	a0 95       	com	r26
    192c:	ba 2f       	mov	r27, r26
    192e:	dc 01       	movw	r26, r24
    1930:	99 27       	eor	r25, r25
    1932:	88 27       	eor	r24, r24
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	84 2b       	or	r24, r20
    193a:	95 2b       	or	r25, r21
    193c:	a6 2b       	or	r26, r22
    193e:	b7 2b       	or	r27, r23
    1940:	80 93 1e 01 	sts	0x011E, r24
    1944:	90 93 1f 01 	sts	0x011F, r25
    1948:	a0 93 20 01 	sts	0x0120, r26
    194c:	b0 93 21 01 	sts	0x0121, r27
    1950:	b0 9b       	sbis	0x16, 0	; 22
    1952:	1b c0       	rjmp	.+54     	; 0x198a <__vector_21+0x98>
    1954:	40 91 84 00 	lds	r20, 0x0084
    1958:	50 91 85 00 	lds	r21, 0x0085
    195c:	c9 01       	movw	r24, r18
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	aa 27       	eor	r26, r26
    1962:	97 fd       	sbrc	r25, 7
    1964:	a0 95       	com	r26
    1966:	ba 2f       	mov	r27, r26
    1968:	dc 01       	movw	r26, r24
    196a:	99 27       	eor	r25, r25
    196c:	88 27       	eor	r24, r24
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	84 2b       	or	r24, r20
    1974:	95 2b       	or	r25, r21
    1976:	a6 2b       	or	r26, r22
    1978:	b7 2b       	or	r27, r23
    197a:	80 93 1e 01 	sts	0x011E, r24
    197e:	90 93 1f 01 	sts	0x011F, r25
    1982:	a0 93 20 01 	sts	0x0120, r26
    1986:	b0 93 21 01 	sts	0x0121, r27
    198a:	e0 91 de 01 	lds	r30, 0x01DE
    198e:	f0 91 df 01 	lds	r31, 0x01DF
    1992:	30 97       	sbiw	r30, 0x00	; 0
    1994:	39 f0       	breq	.+14     	; 0x19a4 <__vector_21+0xb2>
    1996:	60 e1       	ldi	r22, 0x10	; 16
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	80 91 46 01 	lds	r24, 0x0146
    199e:	90 91 47 01 	lds	r25, 0x0147
    19a2:	09 95       	icall
    19a4:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    19a8:	ff 91       	pop	r31
    19aa:	ef 91       	pop	r30
    19ac:	bf 91       	pop	r27
    19ae:	af 91       	pop	r26
    19b0:	9f 91       	pop	r25
    19b2:	8f 91       	pop	r24
    19b4:	7f 91       	pop	r23
    19b6:	6f 91       	pop	r22
    19b8:	5f 91       	pop	r21
    19ba:	4f 91       	pop	r20
    19bc:	3f 91       	pop	r19
    19be:	2f 91       	pop	r18
    19c0:	0f 90       	pop	r0
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	0f 90       	pop	r0
    19c6:	1f 90       	pop	r1
    19c8:	18 95       	reti

000019ca <__vector_22>:
IRQ(IRQ_LCD,             LCD_vect);
    19ca:	1f 92       	push	r1
    19cc:	0f 92       	push	r0
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	0f 92       	push	r0
    19d2:	11 24       	eor	r1, r1
    19d4:	2f 93       	push	r18
    19d6:	3f 93       	push	r19
    19d8:	4f 93       	push	r20
    19da:	5f 93       	push	r21
    19dc:	6f 93       	push	r22
    19de:	7f 93       	push	r23
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	af 93       	push	r26
    19e6:	bf 93       	push	r27
    19e8:	ef 93       	push	r30
    19ea:	ff 93       	push	r31
    19ec:	20 91 1c 01 	lds	r18, 0x011C
    19f0:	30 91 1d 01 	lds	r19, 0x011D
    19f4:	40 91 84 00 	lds	r20, 0x0084
    19f8:	50 91 85 00 	lds	r21, 0x0085
    19fc:	c9 01       	movw	r24, r18
    19fe:	aa 27       	eor	r26, r26
    1a00:	97 fd       	sbrc	r25, 7
    1a02:	a0 95       	com	r26
    1a04:	ba 2f       	mov	r27, r26
    1a06:	dc 01       	movw	r26, r24
    1a08:	99 27       	eor	r25, r25
    1a0a:	88 27       	eor	r24, r24
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	84 2b       	or	r24, r20
    1a12:	95 2b       	or	r25, r21
    1a14:	a6 2b       	or	r26, r22
    1a16:	b7 2b       	or	r27, r23
    1a18:	80 93 1e 01 	sts	0x011E, r24
    1a1c:	90 93 1f 01 	sts	0x011F, r25
    1a20:	a0 93 20 01 	sts	0x0120, r26
    1a24:	b0 93 21 01 	sts	0x0121, r27
    1a28:	b0 9b       	sbis	0x16, 0	; 22
    1a2a:	1b c0       	rjmp	.+54     	; 0x1a62 <__vector_22+0x98>
    1a2c:	40 91 84 00 	lds	r20, 0x0084
    1a30:	50 91 85 00 	lds	r21, 0x0085
    1a34:	c9 01       	movw	r24, r18
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	aa 27       	eor	r26, r26
    1a3a:	97 fd       	sbrc	r25, 7
    1a3c:	a0 95       	com	r26
    1a3e:	ba 2f       	mov	r27, r26
    1a40:	dc 01       	movw	r26, r24
    1a42:	99 27       	eor	r25, r25
    1a44:	88 27       	eor	r24, r24
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	84 2b       	or	r24, r20
    1a4c:	95 2b       	or	r25, r21
    1a4e:	a6 2b       	or	r26, r22
    1a50:	b7 2b       	or	r27, r23
    1a52:	80 93 1e 01 	sts	0x011E, r24
    1a56:	90 93 1f 01 	sts	0x011F, r25
    1a5a:	a0 93 20 01 	sts	0x0120, r26
    1a5e:	b0 93 21 01 	sts	0x0121, r27
    1a62:	e0 91 e0 01 	lds	r30, 0x01E0
    1a66:	f0 91 e1 01 	lds	r31, 0x01E1
    1a6a:	30 97       	sbiw	r30, 0x00	; 0
    1a6c:	39 f0       	breq	.+14     	; 0x1a7c <__vector_22+0xb2>
    1a6e:	61 e1       	ldi	r22, 0x11	; 17
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	80 91 48 01 	lds	r24, 0x0148
    1a76:	90 91 49 01 	lds	r25, 0x0149
    1a7a:	09 95       	icall
    1a7c:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    1a80:	ff 91       	pop	r31
    1a82:	ef 91       	pop	r30
    1a84:	bf 91       	pop	r27
    1a86:	af 91       	pop	r26
    1a88:	9f 91       	pop	r25
    1a8a:	8f 91       	pop	r24
    1a8c:	7f 91       	pop	r23
    1a8e:	6f 91       	pop	r22
    1a90:	5f 91       	pop	r21
    1a92:	4f 91       	pop	r20
    1a94:	3f 91       	pop	r19
    1a96:	2f 91       	pop	r18
    1a98:	0f 90       	pop	r0
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	0f 90       	pop	r0
    1a9e:	1f 90       	pop	r1
    1aa0:	18 95       	reti

00001aa2 <enqueueByDeadline>:

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	7b 01       	movw	r14, r22
    Msg prev = NULL, q = *queue;
    1ab0:	db 01       	movw	r26, r22
    1ab2:	ed 91       	ld	r30, X+
    1ab4:	fc 91       	ld	r31, X
    while (q && (q->deadline <= p->deadline)) {
    1ab6:	30 97       	sbiw	r30, 0x00	; 0
    1ab8:	49 f1       	breq	.+82     	; 0x1b0c <enqueueByDeadline+0x6a>
    1aba:	ec 01       	movw	r28, r24
    1abc:	0e 81       	ldd	r16, Y+6	; 0x06
    1abe:	1f 81       	ldd	r17, Y+7	; 0x07
    1ac0:	28 85       	ldd	r18, Y+8	; 0x08
    1ac2:	39 85       	ldd	r19, Y+9	; 0x09
    1ac4:	46 81       	ldd	r20, Z+6	; 0x06
    1ac6:	57 81       	ldd	r21, Z+7	; 0x07
    1ac8:	60 85       	ldd	r22, Z+8	; 0x08
    1aca:	71 85       	ldd	r23, Z+9	; 0x09
    1acc:	04 17       	cp	r16, r20
    1ace:	15 07       	cpc	r17, r21
    1ad0:	26 07       	cpc	r18, r22
    1ad2:	37 07       	cpc	r19, r23
    1ad4:	dc f0       	brlt	.+54     	; 0x1b0c <enqueueByDeadline+0x6a>
        prev = q;
        q = q->next;
    1ad6:	c0 81       	ld	r28, Z
    1ad8:	d1 81       	ldd	r29, Z+1	; 0x01
IRQ(IRQ_LCD,             LCD_vect);

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
    1ada:	20 97       	sbiw	r28, 0x00	; 0
    1adc:	59 f0       	breq	.+22     	; 0x1af4 <enqueueByDeadline+0x52>
    1ade:	4e 81       	ldd	r20, Y+6	; 0x06
    1ae0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ae2:	68 85       	ldd	r22, Y+8	; 0x08
    1ae4:	79 85       	ldd	r23, Y+9	; 0x09
    1ae6:	04 17       	cp	r16, r20
    1ae8:	15 07       	cpc	r17, r21
    1aea:	26 07       	cpc	r18, r22
    1aec:	37 07       	cpc	r19, r23
    1aee:	14 f0       	brlt	.+4      	; 0x1af4 <enqueueByDeadline+0x52>
        prev = q;
        q = q->next;
    1af0:	fe 01       	movw	r30, r28
    1af2:	f1 cf       	rjmp	.-30     	; 0x1ad6 <enqueueByDeadline+0x34>
    }
    p->next = q;
    1af4:	dc 01       	movw	r26, r24
    1af6:	cd 93       	st	X+, r28
    1af8:	dc 93       	st	X, r29
    if (prev == NULL)
    1afa:	30 97       	sbiw	r30, 0x00	; 0
    1afc:	21 f4       	brne	.+8      	; 0x1b06 <enqueueByDeadline+0x64>
        *queue = p;
    1afe:	e7 01       	movw	r28, r14
    1b00:	99 83       	std	Y+1, r25	; 0x01
    1b02:	88 83       	st	Y, r24
    1b04:	07 c0       	rjmp	.+14     	; 0x1b14 <enqueueByDeadline+0x72>
    else
        prev->next = p;
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	80 83       	st	Z, r24
    1b0a:	04 c0       	rjmp	.+8      	; 0x1b14 <enqueueByDeadline+0x72>
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
    }
    p->next = q;
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	ed 93       	st	X+, r30
    1b10:	fc 93       	st	X, r31
    1b12:	f5 cf       	rjmp	.-22     	; 0x1afe <enqueueByDeadline+0x5c>
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
}
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	08 95       	ret

00001b22 <enqueueByBaseline>:

void enqueueByBaseline(Msg p, Msg *queue) {
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	7b 01       	movw	r14, r22
    Msg prev = NULL, q = *queue;
    1b30:	db 01       	movw	r26, r22
    1b32:	ed 91       	ld	r30, X+
    1b34:	fc 91       	ld	r31, X
    while (q && (q->baseline <= p->baseline )) {
    1b36:	30 97       	sbiw	r30, 0x00	; 0
    1b38:	49 f1       	breq	.+82     	; 0x1b8c <enqueueByBaseline+0x6a>
    1b3a:	ec 01       	movw	r28, r24
    1b3c:	0a 81       	ldd	r16, Y+2	; 0x02
    1b3e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b40:	2c 81       	ldd	r18, Y+4	; 0x04
    1b42:	3d 81       	ldd	r19, Y+5	; 0x05
    1b44:	42 81       	ldd	r20, Z+2	; 0x02
    1b46:	53 81       	ldd	r21, Z+3	; 0x03
    1b48:	64 81       	ldd	r22, Z+4	; 0x04
    1b4a:	75 81       	ldd	r23, Z+5	; 0x05
    1b4c:	04 17       	cp	r16, r20
    1b4e:	15 07       	cpc	r17, r21
    1b50:	26 07       	cpc	r18, r22
    1b52:	37 07       	cpc	r19, r23
    1b54:	dc f0       	brlt	.+54     	; 0x1b8c <enqueueByBaseline+0x6a>
        prev = q;
        q = q->next;
    1b56:	c0 81       	ld	r28, Z
    1b58:	d1 81       	ldd	r29, Z+1	; 0x01
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
    1b5a:	20 97       	sbiw	r28, 0x00	; 0
    1b5c:	59 f0       	breq	.+22     	; 0x1b74 <enqueueByBaseline+0x52>
    1b5e:	4a 81       	ldd	r20, Y+2	; 0x02
    1b60:	5b 81       	ldd	r21, Y+3	; 0x03
    1b62:	6c 81       	ldd	r22, Y+4	; 0x04
    1b64:	7d 81       	ldd	r23, Y+5	; 0x05
    1b66:	04 17       	cp	r16, r20
    1b68:	15 07       	cpc	r17, r21
    1b6a:	26 07       	cpc	r18, r22
    1b6c:	37 07       	cpc	r19, r23
    1b6e:	14 f0       	brlt	.+4      	; 0x1b74 <enqueueByBaseline+0x52>
        prev = q;
        q = q->next;
    1b70:	fe 01       	movw	r30, r28
    1b72:	f1 cf       	rjmp	.-30     	; 0x1b56 <enqueueByBaseline+0x34>
    }
    p->next = q;
    1b74:	dc 01       	movw	r26, r24
    1b76:	cd 93       	st	X+, r28
    1b78:	dc 93       	st	X, r29
    if (prev == NULL)
    1b7a:	30 97       	sbiw	r30, 0x00	; 0
    1b7c:	21 f4       	brne	.+8      	; 0x1b86 <enqueueByBaseline+0x64>
        *queue = p;
    1b7e:	e7 01       	movw	r28, r14
    1b80:	99 83       	std	Y+1, r25	; 0x01
    1b82:	88 83       	st	Y, r24
    1b84:	07 c0       	rjmp	.+14     	; 0x1b94 <enqueueByBaseline+0x72>
    else
        prev->next = p;
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
    1b8a:	04 c0       	rjmp	.+8      	; 0x1b94 <enqueueByBaseline+0x72>
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
    }
    p->next = q;
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	ed 93       	st	X+, r30
    1b90:	fc 93       	st	X, r31
    1b92:	f5 cf       	rjmp	.-22     	; 0x1b7e <enqueueByBaseline+0x5c>
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
}
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	08 95       	ret

00001ba2 <dequeue>:

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	ed 91       	ld	r30, X+
    1ba6:	fc 91       	ld	r31, X
    1ba8:	11 97       	sbiw	r26, 0x01	; 1
    if (m)
    1baa:	30 97       	sbiw	r30, 0x00	; 0
    1bac:	59 f4       	brne	.+22     	; 0x1bc4 <dequeue+0x22>
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	80 93 ec 00 	sts	0x00EC, r24
    1bb4:	80 93 ed 00 	sts	0x00ED, r24
    1bb8:	80 93 ee 00 	sts	0x00EE, r24
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	83 bf       	out	0x33, r24	; 51
    1bc0:	88 95       	sleep
    1bc2:	fd cf       	rjmp	.-6      	; 0x1bbe <dequeue+0x1c>
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    1bc4:	20 81       	ld	r18, Z
    1bc6:	31 81       	ldd	r19, Z+1	; 0x01
    1bc8:	2d 93       	st	X+, r18
    1bca:	3c 93       	st	X, r19
    else
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}
    1bcc:	cf 01       	movw	r24, r30
    1bce:	08 95       	ret

00001bd0 <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
    1bd0:	1f 92       	push	r1
    1bd2:	0f 92       	push	r0
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	0f 92       	push	r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	2f 93       	push	r18
    1bdc:	3f 93       	push	r19
    1bde:	4f 93       	push	r20
    1be0:	5f 93       	push	r21
    1be2:	8f 93       	push	r24
    1be4:	9f 93       	push	r25
    1be6:	af 93       	push	r26
    1be8:	bf 93       	push	r27
    1bea:	ef 93       	push	r30
    1bec:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
    1bee:	20 91 1c 01 	lds	r18, 0x011C
    1bf2:	30 91 1d 01 	lds	r19, 0x011D
    1bf6:	2f 5f       	subi	r18, 0xFF	; 255
    1bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfa:	30 93 1d 01 	sts	0x011D, r19
    1bfe:	20 93 1c 01 	sts	0x011C, r18
    TIMERSET(timerQ);
    1c02:	e0 91 22 01 	lds	r30, 0x0122
    1c06:	f0 91 23 01 	lds	r31, 0x0123
    1c0a:	30 97       	sbiw	r30, 0x00	; 0
    1c0c:	01 f1       	breq	.+64     	; 0x1c4e <__vector_9+0x7e>
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	a4 81       	ldd	r26, Z+4	; 0x04
    1c14:	b5 81       	ldd	r27, Z+5	; 0x05
    1c16:	2a 17       	cp	r18, r26
    1c18:	3b 07       	cpc	r19, r27
    1c1a:	c9 f4       	brne	.+50     	; 0x1c4e <__vector_9+0x7e>
    1c1c:	20 91 84 00 	lds	r18, 0x0084
    1c20:	30 91 85 00 	lds	r19, 0x0085
    1c24:	ac 01       	movw	r20, r24
    1c26:	42 1b       	sub	r20, r18
    1c28:	53 0b       	sbc	r21, r19
    1c2a:	41 30       	cpi	r20, 0x01	; 1
    1c2c:	51 05       	cpc	r21, r1
    1c2e:	29 f4       	brne	.+10     	; 0x1c3a <__vector_9+0x6a>
    1c30:	80 91 84 00 	lds	r24, 0x0084
    1c34:	90 91 85 00 	lds	r25, 0x0085
    1c38:	01 96       	adiw	r24, 0x01	; 1
    1c3a:	90 93 89 00 	sts	0x0089, r25
    1c3e:	80 93 88 00 	sts	0x0088, r24
    1c42:	ef e6       	ldi	r30, 0x6F	; 111
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	82 60       	ori	r24, 0x02	; 2
    1c4a:	80 83       	st	Z, r24
    1c4c:	05 c0       	rjmp	.+10     	; 0x1c58 <__vector_9+0x88>
    1c4e:	ef e6       	ldi	r30, 0x6F	; 111
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8d 7f       	andi	r24, 0xFD	; 253
    1c56:	80 83       	st	Z, r24
}
    1c58:	ff 91       	pop	r31
    1c5a:	ef 91       	pop	r30
    1c5c:	bf 91       	pop	r27
    1c5e:	af 91       	pop	r26
    1c60:	9f 91       	pop	r25
    1c62:	8f 91       	pop	r24
    1c64:	5f 91       	pop	r21
    1c66:	4f 91       	pop	r20
    1c68:	3f 91       	pop	r19
    1c6a:	2f 91       	pop	r18
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <__vector_7>:

TIMER_COMPARE_INTERRUPT {
    1c76:	1f 92       	push	r1
    1c78:	0f 92       	push	r0
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	0f 92       	push	r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	cf 92       	push	r12
    1c82:	df 92       	push	r13
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	2f 93       	push	r18
    1c8a:	3f 93       	push	r19
    1c8c:	4f 93       	push	r20
    1c8e:	5f 93       	push	r21
    1c90:	6f 93       	push	r22
    1c92:	7f 93       	push	r23
    1c94:	8f 93       	push	r24
    1c96:	9f 93       	push	r25
    1c98:	af 93       	push	r26
    1c9a:	bf 93       	push	r27
    1c9c:	ef 93       	push	r30
    1c9e:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    1ca0:	c0 90 1c 01 	lds	r12, 0x011C
    1ca4:	d0 90 1d 01 	lds	r13, 0x011D
    1ca8:	80 91 84 00 	lds	r24, 0x0084
    1cac:	90 91 85 00 	lds	r25, 0x0085
    1cb0:	b0 99       	sbic	0x16, 0	; 22
    1cb2:	0e c0       	rjmp	.+28     	; 0x1cd0 <__vector_7+0x5a>
    1cb4:	ee 24       	eor	r14, r14
    1cb6:	d7 fc       	sbrc	r13, 7
    1cb8:	e0 94       	com	r14
    1cba:	fe 2c       	mov	r15, r14
    1cbc:	76 01       	movw	r14, r12
    1cbe:	dd 24       	eor	r13, r13
    1cc0:	cc 24       	eor	r12, r12
    1cc2:	a0 e0       	ldi	r26, 0x00	; 0
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	c8 2a       	or	r12, r24
    1cc8:	d9 2a       	or	r13, r25
    1cca:	ea 2a       	or	r14, r26
    1ccc:	fb 2a       	or	r15, r27
    1cce:	14 c0       	rjmp	.+40     	; 0x1cf8 <__vector_7+0x82>
    1cd0:	80 91 84 00 	lds	r24, 0x0084
    1cd4:	90 91 85 00 	lds	r25, 0x0085
    1cd8:	2f ef       	ldi	r18, 0xFF	; 255
    1cda:	c2 1a       	sub	r12, r18
    1cdc:	d2 0a       	sbc	r13, r18
    1cde:	ee 24       	eor	r14, r14
    1ce0:	d7 fc       	sbrc	r13, 7
    1ce2:	e0 94       	com	r14
    1ce4:	fe 2c       	mov	r15, r14
    1ce6:	76 01       	movw	r14, r12
    1ce8:	dd 24       	eor	r13, r13
    1cea:	cc 24       	eor	r12, r12
    1cec:	a0 e0       	ldi	r26, 0x00	; 0
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	c8 2a       	or	r12, r24
    1cf2:	d9 2a       	or	r13, r25
    1cf4:	ea 2a       	or	r14, r26
    1cf6:	fb 2a       	or	r15, r27
    while (timerQ && (timerQ->baseline - now <= 0))
    1cf8:	e0 91 22 01 	lds	r30, 0x0122
    1cfc:	f0 91 23 01 	lds	r31, 0x0123
    1d00:	30 97       	sbiw	r30, 0x00	; 0
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <__vector_7+0x90>
    1d04:	42 c0       	rjmp	.+132    	; 0x1d8a <__vector_7+0x114>
    1d06:	82 81       	ldd	r24, Z+2	; 0x02
    1d08:	93 81       	ldd	r25, Z+3	; 0x03
    1d0a:	a4 81       	ldd	r26, Z+4	; 0x04
    1d0c:	b5 81       	ldd	r27, Z+5	; 0x05
    1d0e:	8c 19       	sub	r24, r12
    1d10:	9d 09       	sbc	r25, r13
    1d12:	ae 09       	sbc	r26, r14
    1d14:	bf 09       	sbc	r27, r15
    1d16:	18 16       	cp	r1, r24
    1d18:	19 06       	cpc	r1, r25
    1d1a:	1a 06       	cpc	r1, r26
    1d1c:	1b 06       	cpc	r1, r27
    1d1e:	ec f1       	brlt	.+122    	; 0x1d9a <__vector_7+0x124>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    1d20:	82 e2       	ldi	r24, 0x22	; 34
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <dequeue>
    1d28:	64 e2       	ldi	r22, 0x24	; 36
    1d2a:	71 e0       	ldi	r23, 0x01	; 1
    1d2c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <enqueueByDeadline>

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
    1d30:	e0 91 22 01 	lds	r30, 0x0122
    1d34:	f0 91 23 01 	lds	r31, 0x0123
    1d38:	30 97       	sbiw	r30, 0x00	; 0
    1d3a:	39 f1       	breq	.+78     	; 0x1d8a <__vector_7+0x114>
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	a4 81       	ldd	r26, Z+4	; 0x04
    1d42:	b5 81       	ldd	r27, Z+5	; 0x05
    1d44:	8c 19       	sub	r24, r12
    1d46:	9d 09       	sbc	r25, r13
    1d48:	ae 09       	sbc	r26, r14
    1d4a:	bf 09       	sbc	r27, r15
    1d4c:	18 16       	cp	r1, r24
    1d4e:	19 06       	cpc	r1, r25
    1d50:	1a 06       	cpc	r1, r26
    1d52:	1b 06       	cpc	r1, r27
    1d54:	2c f7       	brge	.-54     	; 0x1d20 <__vector_7+0xaa>
    1d56:	21 c0       	rjmp	.+66     	; 0x1d9a <__vector_7+0x124>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    1d58:	20 91 84 00 	lds	r18, 0x0084
    1d5c:	30 91 85 00 	lds	r19, 0x0085
    1d60:	ac 01       	movw	r20, r24
    1d62:	42 1b       	sub	r20, r18
    1d64:	53 0b       	sbc	r21, r19
    1d66:	41 30       	cpi	r20, 0x01	; 1
    1d68:	51 05       	cpc	r21, r1
    1d6a:	29 f4       	brne	.+10     	; 0x1d76 <__vector_7+0x100>
    1d6c:	80 91 84 00 	lds	r24, 0x0084
    1d70:	90 91 85 00 	lds	r25, 0x0085
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	90 93 89 00 	sts	0x0089, r25
    1d7a:	80 93 88 00 	sts	0x0088, r24
    1d7e:	ef e6       	ldi	r30, 0x6F	; 111
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	82 60       	ori	r24, 0x02	; 2
    1d86:	80 83       	st	Z, r24
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <__vector_7+0x11e>
    1d8a:	ef e6       	ldi	r30, 0x6F	; 111
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	8d 7f       	andi	r24, 0xFD	; 253
    1d92:	80 83       	st	Z, r24
    schedule();
    1d94:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    1d98:	0c c0       	rjmp	.+24     	; 0x1db2 <__vector_7+0x13c>
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	a4 81       	ldd	r26, Z+4	; 0x04
    1da0:	b5 81       	ldd	r27, Z+5	; 0x05
    1da2:	20 91 1c 01 	lds	r18, 0x011C
    1da6:	30 91 1d 01 	lds	r19, 0x011D
    1daa:	2a 17       	cp	r18, r26
    1dac:	3b 07       	cpc	r19, r27
    1dae:	69 f7       	brne	.-38     	; 0x1d8a <__vector_7+0x114>
    1db0:	d3 cf       	rjmp	.-90     	; 0x1d58 <__vector_7+0xe2>
    schedule();
}
    1db2:	ff 91       	pop	r31
    1db4:	ef 91       	pop	r30
    1db6:	bf 91       	pop	r27
    1db8:	af 91       	pop	r26
    1dba:	9f 91       	pop	r25
    1dbc:	8f 91       	pop	r24
    1dbe:	7f 91       	pop	r23
    1dc0:	6f 91       	pop	r22
    1dc2:	5f 91       	pop	r21
    1dc4:	4f 91       	pop	r20
    1dc6:	3f 91       	pop	r19
    1dc8:	2f 91       	pop	r18
    1dca:	ff 90       	pop	r15
    1dcc:	ef 90       	pop	r14
    1dce:	df 90       	pop	r13
    1dd0:	cf 90       	pop	r12
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	0f 90       	pop	r0
    1dd8:	1f 90       	pop	r1
    1dda:	18 95       	reti

00001ddc <async>:
        dispatch(activeStack);
    }
}

/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    1ddc:	3f 92       	push	r3
    1dde:	4f 92       	push	r4
    1de0:	5f 92       	push	r5
    1de2:	6f 92       	push	r6
    1de4:	7f 92       	push	r7
    1de6:	8f 92       	push	r8
    1de8:	9f 92       	push	r9
    1dea:	af 92       	push	r10
    1dec:	bf 92       	push	r11
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	2b 01       	movw	r4, r22
    1e00:	3c 01       	movw	r6, r24
    1e02:	49 01       	movw	r8, r18
    1e04:	5a 01       	movw	r10, r20
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    1e06:	8f b7       	in	r24, 0x3f	; 63
    1e08:	80 78       	andi	r24, 0x80	; 128
    1e0a:	38 2e       	mov	r3, r24
    1e0c:	f8 94       	cli
    m = dequeue(&msgPool);
    1e0e:	86 e0       	ldi	r24, 0x06	; 6
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <dequeue>
    1e16:	ec 01       	movw	r28, r24
    m->to = to; 
    1e18:	1b 87       	std	Y+11, r17	; 0x0b
    1e1a:	0a 87       	std	Y+10, r16	; 0x0a
    m->method = meth; 
    1e1c:	fd 86       	std	Y+13, r15	; 0x0d
    1e1e:	ec 86       	std	Y+12, r14	; 0x0c
    m->arg = arg;
    1e20:	df 86       	std	Y+15, r13	; 0x0f
    1e22:	ce 86       	std	Y+14, r12	; 0x0e
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    1e24:	33 20       	and	r3, r3
    1e26:	61 f0       	breq	.+24     	; 0x1e40 <async+0x64>
    1e28:	e0 91 00 01 	lds	r30, 0x0100
    1e2c:	f0 91 01 01 	lds	r31, 0x0101
    1e30:	02 80       	ldd	r0, Z+2	; 0x02
    1e32:	f3 81       	ldd	r31, Z+3	; 0x03
    1e34:	e0 2d       	mov	r30, r0
    1e36:	82 81       	ldd	r24, Z+2	; 0x02
    1e38:	93 81       	ldd	r25, Z+3	; 0x03
    1e3a:	a4 81       	ldd	r26, Z+4	; 0x04
    1e3c:	b5 81       	ldd	r27, Z+5	; 0x05
    1e3e:	08 c0       	rjmp	.+16     	; 0x1e50 <async+0x74>
    1e40:	80 91 1e 01 	lds	r24, 0x011E
    1e44:	90 91 1f 01 	lds	r25, 0x011F
    1e48:	a0 91 20 01 	lds	r26, 0x0120
    1e4c:	b0 91 21 01 	lds	r27, 0x0121
    1e50:	48 0e       	add	r4, r24
    1e52:	59 1e       	adc	r5, r25
    1e54:	6a 1e       	adc	r6, r26
    1e56:	7b 1e       	adc	r7, r27
    1e58:	4a 82       	std	Y+2, r4	; 0x02
    1e5a:	5b 82       	std	Y+3, r5	; 0x03
    1e5c:	6c 82       	std	Y+4, r6	; 0x04
    1e5e:	7d 82       	std	Y+5, r7	; 0x05
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    1e60:	18 14       	cp	r1, r8
    1e62:	19 04       	cpc	r1, r9
    1e64:	1a 04       	cpc	r1, r10
    1e66:	1b 04       	cpc	r1, r11
    1e68:	44 f0       	brlt	.+16     	; 0x1e7a <async+0x9e>
    1e6a:	0f 2e       	mov	r0, r31
    1e6c:	88 24       	eor	r8, r8
    1e6e:	8a 94       	dec	r8
    1e70:	98 2c       	mov	r9, r8
    1e72:	a8 2c       	mov	r10, r8
    1e74:	ff e7       	ldi	r31, 0x7F	; 127
    1e76:	bf 2e       	mov	r11, r31
    1e78:	f0 2d       	mov	r31, r0
    1e7a:	84 0c       	add	r8, r4
    1e7c:	95 1c       	adc	r9, r5
    1e7e:	a6 1c       	adc	r10, r6
    1e80:	b7 1c       	adc	r11, r7
    1e82:	8e 82       	std	Y+6, r8	; 0x06
    1e84:	9f 82       	std	Y+7, r9	; 0x07
    1e86:	a8 86       	std	Y+8, r10	; 0x08
    1e88:	b9 86       	std	Y+9, r11	; 0x09
    
    TIMERGET(now);
    1e8a:	80 91 1c 01 	lds	r24, 0x011C
    1e8e:	90 91 1d 01 	lds	r25, 0x011D
    1e92:	40 91 84 00 	lds	r20, 0x0084
    1e96:	50 91 85 00 	lds	r21, 0x0085
    1e9a:	b0 99       	sbic	0x16, 0	; 22
    1e9c:	0e c0       	rjmp	.+28     	; 0x1eba <async+0xde>
    1e9e:	aa 27       	eor	r26, r26
    1ea0:	97 fd       	sbrc	r25, 7
    1ea2:	a0 95       	com	r26
    1ea4:	ba 2f       	mov	r27, r26
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	99 27       	eor	r25, r25
    1eaa:	88 27       	eor	r24, r24
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	84 2b       	or	r24, r20
    1eb2:	95 2b       	or	r25, r21
    1eb4:	a6 2b       	or	r26, r22
    1eb6:	b7 2b       	or	r27, r23
    1eb8:	12 c0       	rjmp	.+36     	; 0x1ede <async+0x102>
    1eba:	40 91 84 00 	lds	r20, 0x0084
    1ebe:	50 91 85 00 	lds	r21, 0x0085
    1ec2:	01 96       	adiw	r24, 0x01	; 1
    1ec4:	aa 27       	eor	r26, r26
    1ec6:	97 fd       	sbrc	r25, 7
    1ec8:	a0 95       	com	r26
    1eca:	ba 2f       	mov	r27, r26
    1ecc:	dc 01       	movw	r26, r24
    1ece:	99 27       	eor	r25, r25
    1ed0:	88 27       	eor	r24, r24
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	84 2b       	or	r24, r20
    1ed8:	95 2b       	or	r25, r21
    1eda:	a6 2b       	or	r26, r22
    1edc:	b7 2b       	or	r27, r23
    if (m->baseline - now > 0) {        // baseline has not yet passed
    1ede:	48 1a       	sub	r4, r24
    1ee0:	59 0a       	sbc	r5, r25
    1ee2:	6a 0a       	sbc	r6, r26
    1ee4:	7b 0a       	sbc	r7, r27
    1ee6:	14 14       	cp	r1, r4
    1ee8:	15 04       	cpc	r1, r5
    1eea:	16 04       	cpc	r1, r6
    1eec:	17 04       	cpc	r1, r7
    1eee:	ac f5       	brge	.+106    	; 0x1f5a <async+0x17e>
        enqueueByBaseline(m, &timerQ);
    1ef0:	62 e2       	ldi	r22, 0x22	; 34
    1ef2:	71 e0       	ldi	r23, 0x01	; 1
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <enqueueByBaseline>
        TIMERSET(timerQ);
    1efa:	e0 91 22 01 	lds	r30, 0x0122
    1efe:	f0 91 23 01 	lds	r31, 0x0123
    1f02:	30 97       	sbiw	r30, 0x00	; 0
    1f04:	21 f1       	breq	.+72     	; 0x1f4e <async+0x172>
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	a4 81       	ldd	r26, Z+4	; 0x04
    1f0c:	b5 81       	ldd	r27, Z+5	; 0x05
    1f0e:	20 91 1c 01 	lds	r18, 0x011C
    1f12:	30 91 1d 01 	lds	r19, 0x011D
    1f16:	2a 17       	cp	r18, r26
    1f18:	3b 07       	cpc	r19, r27
    1f1a:	c9 f4       	brne	.+50     	; 0x1f4e <async+0x172>
    1f1c:	20 91 84 00 	lds	r18, 0x0084
    1f20:	30 91 85 00 	lds	r19, 0x0085
    1f24:	ac 01       	movw	r20, r24
    1f26:	42 1b       	sub	r20, r18
    1f28:	53 0b       	sbc	r21, r19
    1f2a:	41 30       	cpi	r20, 0x01	; 1
    1f2c:	51 05       	cpc	r21, r1
    1f2e:	29 f4       	brne	.+10     	; 0x1f3a <async+0x15e>
    1f30:	80 91 84 00 	lds	r24, 0x0084
    1f34:	90 91 85 00 	lds	r25, 0x0085
    1f38:	01 96       	adiw	r24, 0x01	; 1
    1f3a:	90 93 89 00 	sts	0x0089, r25
    1f3e:	80 93 88 00 	sts	0x0088, r24
    1f42:	ef e6       	ldi	r30, 0x6F	; 111
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	82 60       	ori	r24, 0x02	; 2
    1f4a:	80 83       	st	Z, r24
    1f4c:	41 c0       	rjmp	.+130    	; 0x1fd0 <async+0x1f4>
    1f4e:	ef e6       	ldi	r30, 0x6F	; 111
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	8d 7f       	andi	r24, 0xFD	; 253
    1f56:	80 83       	st	Z, r24
    1f58:	3b c0       	rjmp	.+118    	; 0x1fd0 <async+0x1f4>
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
    1f5a:	64 e2       	ldi	r22, 0x24	; 36
    1f5c:	71 e0       	ldi	r23, 0x01	; 1
    1f5e:	ce 01       	movw	r24, r28
    1f60:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <enqueueByDeadline>
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
    1f64:	33 20       	and	r3, r3
    1f66:	b9 f1       	breq	.+110    	; 0x1fd6 <async+0x1fa>
    1f68:	80 91 04 01 	lds	r24, 0x0104
    1f6c:	90 91 05 01 	lds	r25, 0x0105
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	81 f1       	breq	.+96     	; 0x1fd4 <async+0x1f8>
    1f74:	e0 91 02 01 	lds	r30, 0x0102
    1f78:	f0 91 03 01 	lds	r31, 0x0103
    1f7c:	20 91 24 01 	lds	r18, 0x0124
    1f80:	30 91 25 01 	lds	r19, 0x0125
    1f84:	02 81       	ldd	r16, Z+2	; 0x02
    1f86:	13 81       	ldd	r17, Z+3	; 0x03
    1f88:	d9 01       	movw	r26, r18
    1f8a:	16 96       	adiw	r26, 0x06	; 6
    1f8c:	4d 91       	ld	r20, X+
    1f8e:	5d 91       	ld	r21, X+
    1f90:	6d 91       	ld	r22, X+
    1f92:	7c 91       	ld	r23, X
    1f94:	19 97       	sbiw	r26, 0x09	; 9
    1f96:	d8 01       	movw	r26, r16
    1f98:	16 96       	adiw	r26, 0x06	; 6
    1f9a:	0d 91       	ld	r16, X+
    1f9c:	1d 91       	ld	r17, X+
    1f9e:	2d 91       	ld	r18, X+
    1fa0:	3c 91       	ld	r19, X
    1fa2:	19 97       	sbiw	r26, 0x09	; 9
    1fa4:	40 1b       	sub	r20, r16
    1fa6:	51 0b       	sbc	r21, r17
    1fa8:	62 0b       	sbc	r22, r18
    1faa:	73 0b       	sbc	r23, r19
    1fac:	9a f4       	brpl	.+38     	; 0x1fd4 <async+0x1f8>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    1fae:	dc 01       	movw	r26, r24
    1fb0:	2d 91       	ld	r18, X+
    1fb2:	3c 91       	ld	r19, X
    1fb4:	11 97       	sbiw	r26, 0x01	; 1
    1fb6:	30 93 05 01 	sts	0x0105, r19
    1fba:	20 93 04 01 	sts	0x0104, r18
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    1fbe:	ed 93       	st	X+, r30
    1fc0:	fc 93       	st	X, r31
    *stack = t;
    1fc2:	90 93 03 01 	sts	0x0103, r25
    1fc6:	80 93 02 01 	sts	0x0102, r24
        TIMERSET(timerQ);
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
            push(pop(&threadPool), &activeStack);
            dispatch(activeStack);
    1fca:	0e 94 5d 05 	call	0xaba	; 0xaba <dispatch>
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <async+0x1f8>
        }
    }
    
    ENABLE(status);
    1fd0:	33 20       	and	r3, r3
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <async+0x1fa>
    1fd4:	78 94       	sei
    return m;
}
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	ff 90       	pop	r15
    1fe2:	ef 90       	pop	r14
    1fe4:	df 90       	pop	r13
    1fe6:	cf 90       	pop	r12
    1fe8:	bf 90       	pop	r11
    1fea:	af 90       	pop	r10
    1fec:	9f 90       	pop	r9
    1fee:	8f 90       	pop	r8
    1ff0:	7f 90       	pop	r7
    1ff2:	6f 90       	pop	r6
    1ff4:	5f 90       	pop	r5
    1ff6:	4f 90       	pop	r4
    1ff8:	3f 90       	pop	r3
    1ffa:	08 95       	ret

00001ffc <sync>:

int sync(Object *to, Method meth, int arg) {
    1ffc:	bf 92       	push	r11
    1ffe:	cf 92       	push	r12
    2000:	df 92       	push	r13
    2002:	ef 92       	push	r14
    2004:	ff 92       	push	r15
    2006:	0f 93       	push	r16
    2008:	1f 93       	push	r17
    200a:	cf 93       	push	r28
    200c:	df 93       	push	r29
    200e:	8c 01       	movw	r16, r24
    2010:	7b 01       	movw	r14, r22
    2012:	6a 01       	movw	r12, r20
    Thread t;
    int result;
    char status, status_ignore;
    
    DISABLE(status);
    2014:	8f b7       	in	r24, 0x3f	; 63
    2016:	80 78       	andi	r24, 0x80	; 128
    2018:	b8 2e       	mov	r11, r24
    201a:	f8 94       	cli
    t = to->ownedBy;
    201c:	f8 01       	movw	r30, r16
    201e:	c0 81       	ld	r28, Z
    2020:	d1 81       	ldd	r29, Z+1	; 0x01
    if (t) {                            // to is already locked
    2022:	20 97       	sbiw	r28, 0x00	; 0
    2024:	51 f1       	breq	.+84     	; 0x207a <sync+0x7e>
        while (t->waitsFor) 
    2026:	ac 81       	ldd	r26, Y+4	; 0x04
    2028:	bd 81       	ldd	r27, Y+5	; 0x05
    202a:	10 97       	sbiw	r26, 0x00	; 0
    202c:	31 f0       	breq	.+12     	; 0x203a <sync+0x3e>
            t = t->waitsFor->ownedBy;
    202e:	cd 91       	ld	r28, X+
    2030:	dc 91       	ld	r29, X
    char status, status_ignore;
    
    DISABLE(status);
    t = to->ownedBy;
    if (t) {                            // to is already locked
        while (t->waitsFor) 
    2032:	ac 81       	ldd	r26, Y+4	; 0x04
    2034:	bd 81       	ldd	r27, Y+5	; 0x05
    2036:	10 97       	sbiw	r26, 0x00	; 0
    2038:	d1 f7       	brne	.-12     	; 0x202e <sync+0x32>
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
    203a:	a0 91 00 01 	lds	r26, 0x0100
    203e:	b0 91 01 01 	lds	r27, 0x0101
    2042:	ca 17       	cp	r28, r26
    2044:	db 07       	cpc	r29, r27
    2046:	21 f0       	breq	.+8      	; 0x2050 <sync+0x54>
    2048:	bb 20       	and	r11, r11
    204a:	09 f4       	brne	.+2      	; 0x204e <sync+0x52>
    204c:	42 c0       	rjmp	.+132    	; 0x20d2 <sync+0xd6>
    204e:	07 c0       	rjmp	.+14     	; 0x205e <sync+0x62>
            ENABLE(status);
    2050:	bb 20       	and	r11, r11
    2052:	09 f4       	brne	.+2      	; 0x2056 <sync+0x5a>
    2054:	41 c0       	rjmp	.+130    	; 0x20d8 <sync+0xdc>
    2056:	78 94       	sei
            return -1;
    2058:	8f ef       	ldi	r24, 0xFF	; 255
    205a:	9f ef       	ldi	r25, 0xFF	; 255
    205c:	5b c0       	rjmp	.+182    	; 0x2114 <sync+0x118>
        }
        if (to->wantedBy)               // must be a lower priority thread
    205e:	f8 01       	movw	r30, r16
    2060:	82 81       	ldd	r24, Z+2	; 0x02
    2062:	93 81       	ldd	r25, Z+3	; 0x03
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	09 f4       	brne	.+2      	; 0x206a <sync+0x6e>
    2068:	3d c0       	rjmp	.+122    	; 0x20e4 <sync+0xe8>
            to->wantedBy->waitsFor = NULL;
    206a:	fc 01       	movw	r30, r24
    206c:	15 82       	std	Z+5, r1	; 0x05
    206e:	14 82       	std	Z+4, r1	; 0x04
    2070:	39 c0       	rjmp	.+114    	; 0x20e4 <sync+0xe8>
        to->wantedBy = current;
        current->waitsFor = to;
        dispatch(t);
        if (current->msg == NULL) {     // message was aborted (when called from run)
            ENABLE(status);
    2072:	78 94       	sei
            return 0;
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	4d c0       	rjmp	.+154    	; 0x2114 <sync+0x118>
        }
    }
    to->ownedBy = current;
    207a:	80 91 00 01 	lds	r24, 0x0100
    207e:	90 91 01 01 	lds	r25, 0x0101
    2082:	f8 01       	movw	r30, r16
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	80 83       	st	Z, r24
    ENABLE(status && (to->wantedBy != INSTALLED_TAG));
    2088:	bb 20       	and	r11, r11
    208a:	31 f0       	breq	.+12     	; 0x2098 <sync+0x9c>
    208c:	f8 01       	movw	r30, r16
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	09 f0       	breq	.+2      	; 0x2098 <sync+0x9c>
    2096:	78 94       	sei
    result = meth(to, arg);
    2098:	b6 01       	movw	r22, r12
    209a:	c8 01       	movw	r24, r16
    209c:	f7 01       	movw	r30, r14
    209e:	09 95       	icall
    20a0:	d8 2f       	mov	r29, r24
    20a2:	c9 2f       	mov	r28, r25
    DISABLE(status_ignore);
    20a4:	8f b7       	in	r24, 0x3f	; 63
    20a6:	f8 94       	cli
    to->ownedBy = NULL; 
    20a8:	f8 01       	movw	r30, r16
    20aa:	11 82       	std	Z+1, r1	; 0x01
    20ac:	10 82       	st	Z, r1
    t = to->wantedBy;
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    if (t && (t != INSTALLED_TAG)) {      // we have run on someone's behalf
    20b2:	82 30       	cpi	r24, 0x02	; 2
    20b4:	91 05       	cpc	r25, r1
    20b6:	38 f0       	brcs	.+14     	; 0x20c6 <sync+0xca>
        to->wantedBy = NULL; 
    20b8:	13 82       	std	Z+3, r1	; 0x03
    20ba:	12 82       	std	Z+2, r1	; 0x02
        t->waitsFor = NULL;
    20bc:	fc 01       	movw	r30, r24
    20be:	15 82       	std	Z+5, r1	; 0x05
    20c0:	14 82       	std	Z+4, r1	; 0x04
        dispatch(t);
    20c2:	0e 94 5d 05 	call	0xaba	; 0xaba <dispatch>
    }
    ENABLE(status);
    20c6:	bb 20       	and	r11, r11
    20c8:	51 f0       	breq	.+20     	; 0x20de <sync+0xe2>
    20ca:	78 94       	sei
    return result;
    20cc:	8d 2f       	mov	r24, r29
    20ce:	9c 2f       	mov	r25, r28
    20d0:	21 c0       	rjmp	.+66     	; 0x2114 <sync+0x118>
    if (t) {                            // to is already locked
        while (t->waitsFor) 
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
            ENABLE(status);
            return -1;
    20d2:	8f ef       	ldi	r24, 0xFF	; 255
    20d4:	9f ef       	ldi	r25, 0xFF	; 255
    20d6:	1e c0       	rjmp	.+60     	; 0x2114 <sync+0x118>
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	9f ef       	ldi	r25, 0xFF	; 255
    20dc:	1b c0       	rjmp	.+54     	; 0x2114 <sync+0x118>
        to->wantedBy = NULL; 
        t->waitsFor = NULL;
        dispatch(t);
    }
    ENABLE(status);
    return result;
    20de:	8d 2f       	mov	r24, r29
    20e0:	9c 2f       	mov	r25, r28
    20e2:	18 c0       	rjmp	.+48     	; 0x2114 <sync+0x118>
            ENABLE(status);
            return -1;
        }
        if (to->wantedBy)               // must be a lower priority thread
            to->wantedBy->waitsFor = NULL;
        to->wantedBy = current;
    20e4:	f8 01       	movw	r30, r16
    20e6:	b3 83       	std	Z+3, r27	; 0x03
    20e8:	a2 83       	std	Z+2, r26	; 0x02
        current->waitsFor = to;
    20ea:	15 96       	adiw	r26, 0x05	; 5
    20ec:	1c 93       	st	X, r17
    20ee:	0e 93       	st	-X, r16
    20f0:	14 97       	sbiw	r26, 0x04	; 4
        dispatch(t);
    20f2:	ce 01       	movw	r24, r28
    20f4:	0e 94 5d 05 	call	0xaba	; 0xaba <dispatch>
        if (current->msg == NULL) {     // message was aborted (when called from run)
    20f8:	e0 91 00 01 	lds	r30, 0x0100
    20fc:	f0 91 01 01 	lds	r31, 0x0101
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	89 2b       	or	r24, r25
    2106:	09 f4       	brne	.+2      	; 0x210a <sync+0x10e>
    2108:	b4 cf       	rjmp	.-152    	; 0x2072 <sync+0x76>
            ENABLE(status);
            return 0;
        }
    }
    to->ownedBy = current;
    210a:	cf 01       	movw	r24, r30
    210c:	f8 01       	movw	r30, r16
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	bc cf       	rjmp	.-136    	; 0x208c <sync+0x90>
        t->waitsFor = NULL;
        dispatch(t);
    }
    ENABLE(status);
    return result;
}
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	08 95       	ret

00002128 <run>:
    }
}

static void run(void) {
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    2128:	00 91 00 01 	lds	r16, 0x0100
    212c:	10 91 01 01 	lds	r17, 0x0101
    2130:	84 e2       	ldi	r24, 0x24	; 36
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <dequeue>
    2138:	ec 01       	movw	r28, r24
    213a:	d8 01       	movw	r26, r16
    213c:	13 96       	adiw	r26, 0x03	; 3
    213e:	9c 93       	st	X, r25
    2140:	8e 93       	st	-X, r24
    2142:	12 97       	sbiw	r26, 0x02	; 2
        Msg oldMsg;
        char status = 1;
        
        ENABLE(status);
    2144:	78 94       	sei
        SYNC(this->to, this->method, this->arg);
    2146:	4e 85       	ldd	r20, Y+14	; 0x0e
    2148:	5f 85       	ldd	r21, Y+15	; 0x0f
    214a:	6c 85       	ldd	r22, Y+12	; 0x0c
    214c:	7d 85       	ldd	r23, Y+13	; 0x0d
    214e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2150:	9b 85       	ldd	r25, Y+11	; 0x0b
    2152:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
        DISABLE(status);
    2156:	8f b7       	in	r24, 0x3f	; 63
    2158:	f8 94       	cli
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}

void insert(Msg m, Msg *queue) {
    m->next = *queue;
    215a:	80 91 06 01 	lds	r24, 0x0106
    215e:	90 91 07 01 	lds	r25, 0x0107
    2162:	99 83       	std	Y+1, r25	; 0x01
    2164:	88 83       	st	Y, r24
    *queue = m;
    2166:	d0 93 07 01 	sts	0x0107, r29
    216a:	c0 93 06 01 	sts	0x0106, r28
        ENABLE(status);
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
       
        oldMsg = activeStack->next->msg;
    216e:	e0 91 02 01 	lds	r30, 0x0102
    2172:	f0 91 03 01 	lds	r31, 0x0103
    2176:	00 81       	ld	r16, Z
    2178:	11 81       	ldd	r17, Z+1	; 0x01
    217a:	e8 01       	movw	r28, r16
    217c:	2a 81       	ldd	r18, Y+2	; 0x02
    217e:	3b 81       	ldd	r19, Y+3	; 0x03
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    2180:	a0 91 24 01 	lds	r26, 0x0124
    2184:	b0 91 25 01 	lds	r27, 0x0125
    2188:	10 97       	sbiw	r26, 0x00	; 0
    218a:	c1 f0       	breq	.+48     	; 0x21bc <run+0x94>
    218c:	21 15       	cp	r18, r1
    218e:	31 05       	cpc	r19, r1
    2190:	59 f2       	breq	.-106    	; 0x2128 <run>
    2192:	16 96       	adiw	r26, 0x06	; 6
    2194:	8d 91       	ld	r24, X+
    2196:	9d 91       	ld	r25, X+
    2198:	0d 90       	ld	r0, X+
    219a:	bc 91       	ld	r27, X
    219c:	a0 2d       	mov	r26, r0
    219e:	e9 01       	movw	r28, r18
    21a0:	4e 81       	ldd	r20, Y+6	; 0x06
    21a2:	5f 81       	ldd	r21, Y+7	; 0x07
    21a4:	68 85       	ldd	r22, Y+8	; 0x08
    21a6:	79 85       	ldd	r23, Y+9	; 0x09
    21a8:	84 1b       	sub	r24, r20
    21aa:	95 0b       	sbc	r25, r21
    21ac:	a6 0b       	sbc	r26, r22
    21ae:	b7 0b       	sbc	r27, r23
    21b0:	18 16       	cp	r1, r24
    21b2:	19 06       	cpc	r1, r25
    21b4:	1a 06       	cpc	r1, r26
    21b6:	1b 06       	cpc	r1, r27
    21b8:	0c f0       	brlt	.+2      	; 0x21bc <run+0x94>
    21ba:	b6 cf       	rjmp	.-148    	; 0x2128 <run>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    21bc:	10 93 03 01 	sts	0x0103, r17
    21c0:	00 93 02 01 	sts	0x0102, r16
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    21c4:	80 91 04 01 	lds	r24, 0x0104
    21c8:	90 91 05 01 	lds	r25, 0x0105
    21cc:	91 83       	std	Z+1, r25	; 0x01
    21ce:	80 83       	st	Z, r24
    *stack = t;
    21d0:	f0 93 05 01 	sts	0x0105, r31
    21d4:	e0 93 04 01 	sts	0x0104, r30
       
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
    21d8:	a0 91 02 01 	lds	r26, 0x0102
    21dc:	b0 91 03 01 	lds	r27, 0x0103
            while (t->waitsFor) 
    21e0:	14 96       	adiw	r26, 0x04	; 4
    21e2:	ed 91       	ld	r30, X+
    21e4:	fc 91       	ld	r31, X
    21e6:	15 97       	sbiw	r26, 0x05	; 5
    21e8:	30 97       	sbiw	r30, 0x00	; 0
    21ea:	41 f0       	breq	.+16     	; 0x21fc <run+0xd4>
	            t = t->waitsFor->ownedBy;
    21ec:	a0 81       	ld	r26, Z
    21ee:	b1 81       	ldd	r27, Z+1	; 0x01
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
    21f0:	14 96       	adiw	r26, 0x04	; 4
    21f2:	ed 91       	ld	r30, X+
    21f4:	fc 91       	ld	r31, X
    21f6:	15 97       	sbiw	r26, 0x05	; 5
    21f8:	30 97       	sbiw	r30, 0x00	; 0
    21fa:	c1 f7       	brne	.-16     	; 0x21ec <run+0xc4>
	            t = t->waitsFor->ownedBy;
            dispatch(t);
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 5d 05 	call	0xaba	; 0xaba <dispatch>
    2202:	92 cf       	rjmp	.-220    	; 0x2128 <run>

00002204 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2204:	42 31       	cpi	r20, 0x12	; 18
    2206:	b8 f4       	brcc	.+46     	; 0x2236 <install+0x32>
        char status;
        DISABLE(status);
    2208:	af b7       	in	r26, 0x3f	; 63
    220a:	f8 94       	cli
        otable[i] = obj;
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	44 0f       	add	r20, r20
    2210:	55 1f       	adc	r21, r21
    2212:	fa 01       	movw	r30, r20
    2214:	ea 5d       	subi	r30, 0xDA	; 218
    2216:	fe 4f       	sbci	r31, 0xFE	; 254
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
        mtable[i] = m;
    221c:	fa 01       	movw	r30, r20
    221e:	e2 54       	subi	r30, 0x42	; 66
    2220:	fe 4f       	sbci	r31, 0xFE	; 254
    2222:	71 83       	std	Z+1, r23	; 0x01
    2224:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2226:	21 e0       	ldi	r18, 0x01	; 1
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	fc 01       	movw	r30, r24
    222c:	33 83       	std	Z+3, r19	; 0x03
    222e:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    2230:	aa 23       	and	r26, r26
    2232:	0c f4       	brge	.+2      	; 0x2236 <install+0x32>
    2234:	78 94       	sei
    2236:	08 95       	ret

00002238 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2238:	8c 01       	movw	r16, r24
    223a:	7b 01       	movw	r14, r22
    223c:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    223e:	8f b7       	in	r24, 0x3f	; 63
    2240:	f8 94       	cli
    initialize();
    2242:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <initialize>
    ENABLE(1);
    2246:	78 94       	sei
    if (m != NULL)
    2248:	e1 14       	cp	r14, r1
    224a:	f1 04       	cpc	r15, r1
    224c:	41 f0       	breq	.+16     	; 0x225e <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	a9 01       	movw	r20, r18
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	cb 01       	movw	r24, r22
    225a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <async>
    DISABLE(status);
    225e:	8f b7       	in	r24, 0x3f	; 63
    2260:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2262:	0e 94 7d 05 	call	0xafa	; 0xafa <schedule>
    ENABLE(1);
    2266:	78 94       	sei
    while (1) {
        SLEEP();
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	83 bf       	out	0x33, r24	; 51
    226c:	88 95       	sleep
    226e:	fd cf       	rjmp	.-6      	; 0x226a <tinytimber+0x32>

00002270 <write>:
 */ 
#include "LCD.h"
#include "Pulser.h"
#include "avr/io.h"
void write(Writer *self, int arg) {
	if (arg==4){ //generator 1
    2270:	64 30       	cpi	r22, 0x04	; 4
    2272:	71 05       	cpc	r23, r1
    2274:	29 f4       	brne	.+10     	; 0x2280 <write+0x10>
		//LCDDR1 = LCDDR1 ^ 0xFFFF;
		PORTE = PORTE ^ 16; //XOR toggles between xxx1 xxxx and xxx0 xxxx. also need to keep old value from port 6, not overwrite
    2276:	9e b1       	in	r25, 0x0e	; 14
    2278:	80 e1       	ldi	r24, 0x10	; 16
    227a:	89 27       	eor	r24, r25
    227c:	8e b9       	out	0x0e, r24	; 14
    227e:	08 95       	ret
	} else if (arg==6) { //generator 2
    2280:	66 30       	cpi	r22, 0x06	; 6
    2282:	71 05       	cpc	r23, r1
    2284:	21 f4       	brne	.+8      	; 0x228e <write+0x1e>
		PORTE = PORTE ^ 64;
    2286:	9e b1       	in	r25, 0x0e	; 14
    2288:	80 e4       	ldi	r24, 0x40	; 64
    228a:	89 27       	eor	r24, r25
    228c:	8e b9       	out	0x0e, r24	; 14
    228e:	08 95       	ret

00002290 <__divmodsi4>:
    2290:	05 2e       	mov	r0, r21
    2292:	97 fb       	bst	r25, 7
    2294:	1e f4       	brtc	.+6      	; 0x229c <__divmodsi4+0xc>
    2296:	00 94       	com	r0
    2298:	0e 94 5f 11 	call	0x22be	; 0x22be <__negsi2>
    229c:	57 fd       	sbrc	r21, 7
    229e:	07 d0       	rcall	.+14     	; 0x22ae <__divmodsi4_neg2>
    22a0:	0e 94 67 11 	call	0x22ce	; 0x22ce <__udivmodsi4>
    22a4:	07 fc       	sbrc	r0, 7
    22a6:	03 d0       	rcall	.+6      	; 0x22ae <__divmodsi4_neg2>
    22a8:	4e f4       	brtc	.+18     	; 0x22bc <__divmodsi4_exit>
    22aa:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__negsi2>

000022ae <__divmodsi4_neg2>:
    22ae:	50 95       	com	r21
    22b0:	40 95       	com	r20
    22b2:	30 95       	com	r19
    22b4:	21 95       	neg	r18
    22b6:	3f 4f       	sbci	r19, 0xFF	; 255
    22b8:	4f 4f       	sbci	r20, 0xFF	; 255
    22ba:	5f 4f       	sbci	r21, 0xFF	; 255

000022bc <__divmodsi4_exit>:
    22bc:	08 95       	ret

000022be <__negsi2>:
    22be:	90 95       	com	r25
    22c0:	80 95       	com	r24
    22c2:	70 95       	com	r23
    22c4:	61 95       	neg	r22
    22c6:	7f 4f       	sbci	r23, 0xFF	; 255
    22c8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	08 95       	ret

000022ce <__udivmodsi4>:
    22ce:	a1 e2       	ldi	r26, 0x21	; 33
    22d0:	1a 2e       	mov	r1, r26
    22d2:	aa 1b       	sub	r26, r26
    22d4:	bb 1b       	sub	r27, r27
    22d6:	fd 01       	movw	r30, r26
    22d8:	0d c0       	rjmp	.+26     	; 0x22f4 <__udivmodsi4_ep>

000022da <__udivmodsi4_loop>:
    22da:	aa 1f       	adc	r26, r26
    22dc:	bb 1f       	adc	r27, r27
    22de:	ee 1f       	adc	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	a2 17       	cp	r26, r18
    22e4:	b3 07       	cpc	r27, r19
    22e6:	e4 07       	cpc	r30, r20
    22e8:	f5 07       	cpc	r31, r21
    22ea:	20 f0       	brcs	.+8      	; 0x22f4 <__udivmodsi4_ep>
    22ec:	a2 1b       	sub	r26, r18
    22ee:	b3 0b       	sbc	r27, r19
    22f0:	e4 0b       	sbc	r30, r20
    22f2:	f5 0b       	sbc	r31, r21

000022f4 <__udivmodsi4_ep>:
    22f4:	66 1f       	adc	r22, r22
    22f6:	77 1f       	adc	r23, r23
    22f8:	88 1f       	adc	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	1a 94       	dec	r1
    22fe:	69 f7       	brne	.-38     	; 0x22da <__udivmodsi4_loop>
    2300:	60 95       	com	r22
    2302:	70 95       	com	r23
    2304:	80 95       	com	r24
    2306:	90 95       	com	r25
    2308:	9b 01       	movw	r18, r22
    230a:	ac 01       	movw	r20, r24
    230c:	bd 01       	movw	r22, r26
    230e:	cf 01       	movw	r24, r30
    2310:	08 95       	ret

00002312 <setjmp>:
    2312:	dc 01       	movw	r26, r24
    2314:	2d 92       	st	X+, r2
    2316:	3d 92       	st	X+, r3
    2318:	4d 92       	st	X+, r4
    231a:	5d 92       	st	X+, r5
    231c:	6d 92       	st	X+, r6
    231e:	7d 92       	st	X+, r7
    2320:	8d 92       	st	X+, r8
    2322:	9d 92       	st	X+, r9
    2324:	ad 92       	st	X+, r10
    2326:	bd 92       	st	X+, r11
    2328:	cd 92       	st	X+, r12
    232a:	dd 92       	st	X+, r13
    232c:	ed 92       	st	X+, r14
    232e:	fd 92       	st	X+, r15
    2330:	0d 93       	st	X+, r16
    2332:	1d 93       	st	X+, r17
    2334:	cd 93       	st	X+, r28
    2336:	dd 93       	st	X+, r29
    2338:	ff 91       	pop	r31
    233a:	ef 91       	pop	r30
    233c:	8d b7       	in	r24, 0x3d	; 61
    233e:	8d 93       	st	X+, r24
    2340:	8e b7       	in	r24, 0x3e	; 62
    2342:	8d 93       	st	X+, r24
    2344:	8f b7       	in	r24, 0x3f	; 63
    2346:	8d 93       	st	X+, r24
    2348:	ed 93       	st	X+, r30
    234a:	fd 93       	st	X+, r31
    234c:	88 27       	eor	r24, r24
    234e:	99 27       	eor	r25, r25
    2350:	09 94       	ijmp

00002352 <longjmp>:
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	81 30       	cpi	r24, 0x01	; 1
    2358:	91 05       	cpc	r25, r1
    235a:	81 1d       	adc	r24, r1
    235c:	2d 90       	ld	r2, X+
    235e:	3d 90       	ld	r3, X+
    2360:	4d 90       	ld	r4, X+
    2362:	5d 90       	ld	r5, X+
    2364:	6d 90       	ld	r6, X+
    2366:	7d 90       	ld	r7, X+
    2368:	8d 90       	ld	r8, X+
    236a:	9d 90       	ld	r9, X+
    236c:	ad 90       	ld	r10, X+
    236e:	bd 90       	ld	r11, X+
    2370:	cd 90       	ld	r12, X+
    2372:	dd 90       	ld	r13, X+
    2374:	ed 90       	ld	r14, X+
    2376:	fd 90       	ld	r15, X+
    2378:	0d 91       	ld	r16, X+
    237a:	1d 91       	ld	r17, X+
    237c:	cd 91       	ld	r28, X+
    237e:	dd 91       	ld	r29, X+
    2380:	ed 91       	ld	r30, X+
    2382:	fd 91       	ld	r31, X+
    2384:	0d 90       	ld	r0, X+
    2386:	f8 94       	cli
    2388:	fe bf       	out	0x3e, r31	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	ed bf       	out	0x3d, r30	; 61
    238e:	ed 91       	ld	r30, X+
    2390:	fd 91       	ld	r31, X+
    2392:	09 94       	ijmp

00002394 <_exit>:
    2394:	f8 94       	cli

00002396 <__stop_program>:
    2396:	ff cf       	rjmp	.-2      	; 0x2396 <__stop_program>
