
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000023fc  00002490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  000024ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024ac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000258  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000284a  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ab4  00000000  00000000  00004f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ceb  00000000  00000000  00005a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c14  00000000  00000000  00006720  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000674  00000000  00000000  00007334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000287c  00000000  00000000  000079a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  0000a224  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_1>
       8:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__vector_2>
       c:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__vector_3>
      10:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_4>
      14:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <__vector_9>
      28:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__vector_10>
      2c:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_11>
      30:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_12>
      34:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_13>
      38:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_14>
      3c:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__vector_15>
      40:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_16>
      44:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__vector_17>
      48:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__vector_18>
      4c:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_19>
      50:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__vector_20>
      54:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__vector_21>
      58:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ec ef       	ldi	r30, 0xFC	; 252
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 b0 01 	call	0x360	; 0x360 <main>
      92:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <checkhold>:
		AFTER(MSEC(500),self->Pulse,metronome,1);
	}
	
    
}
void checkhold(GUI *self) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
	self->checking_hold = 1;
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	9b 87       	std	Y+11, r25	; 0x0b
      b2:	8a 87       	std	Y+10, r24	; 0x0a
	if (((PINB & 64) == 0 || (PINB & 128) == 0)) {
      b4:	1e 9b       	sbis	0x03, 6	; 3
      b6:	02 c0       	rjmp	.+4      	; 0xbc <checkhold+0x22>
      b8:	1f 99       	sbic	0x03, 7	; 3
      ba:	16 c0       	rjmp	.+44     	; 0xe8 <checkhold+0x4e>
		ASYNC(self->Pulse,metronome,1);
      bc:	08 85       	ldd	r16, Y+8	; 0x08
      be:	19 85       	ldd	r17, Y+9	; 0x09
      c0:	cc 24       	eor	r12, r12
      c2:	c3 94       	inc	r12
      c4:	d1 2c       	mov	r13, r1
      c6:	0f 2e       	mov	r0, r31
      c8:	f0 ed       	ldi	r31, 0xD0	; 208
      ca:	ef 2e       	mov	r14, r31
      cc:	f4 e0       	ldi	r31, 0x04	; 4
      ce:	ff 2e       	mov	r15, r31
      d0:	f0 2d       	mov	r31, r0
      d2:	20 e0       	ldi	r18, 0x00	; 0
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	a9 01       	movw	r20, r18
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	cb 01       	movw	r24, r22
      de:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
		self->checking_hold = 0;
      e2:	1b 86       	std	Y+11, r1	; 0x0b
      e4:	1a 86       	std	Y+10, r1	; 0x0a
      e6:	02 c0       	rjmp	.+4      	; 0xec <checkhold+0x52>
	} else {
		self->checking_hold = 0;
      e8:	1b 86       	std	Y+11, r1	; 0x0b
      ea:	1a 86       	std	Y+10, r1	; 0x0a
		return;
	}
}
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	1f 91       	pop	r17
      f2:	0f 91       	pop	r16
      f4:	ff 90       	pop	r15
      f6:	ef 90       	pop	r14
      f8:	df 90       	pop	r13
      fa:	cf 90       	pop	r12
      fc:	08 95       	ret

000000fe <portB>:
BIT 3 = right


this was kinda annoying to figure out.
*/
void portB(GUI *self) {
      fe:	cf 92       	push	r12
     100:	df 92       	push	r13
     102:	ef 92       	push	r14
     104:	ff 92       	push	r15
     106:	0f 93       	push	r16
     108:	1f 93       	push	r17
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	ec 01       	movw	r28, r24
	//self->hold = 0;
	//BIT 4:  press
	if ((PINB & 16) == 0) {// & self->hold==0) {
     110:	1c 99       	sbic	0x03, 4	; 3
     112:	69 c0       	rjmp	.+210    	; 0x1e6 <portB+0xe8>
		if (self->LCD->curgen->freq == 0) {
     114:	ee 81       	ldd	r30, Y+6	; 0x06
     116:	ff 81       	ldd	r31, Y+7	; 0x07
     118:	00 84       	ldd	r0, Z+8	; 0x08
     11a:	f1 85       	ldd	r31, Z+9	; 0x09
     11c:	e0 2d       	mov	r30, r0
     11e:	84 81       	ldd	r24, Z+4	; 0x04
     120:	95 81       	ldd	r25, Z+5	; 0x05
     122:	89 2b       	or	r24, r25
     124:	e1 f5       	brne	.+120    	; 0x19e <portB+0xa0>
			self->LCD->curgen->freq = self->LCD->curgen->saved_freq;
     126:	86 81       	ldd	r24, Z+6	; 0x06
     128:	97 81       	ldd	r25, Z+7	; 0x07
     12a:	95 83       	std	Z+5, r25	; 0x05
     12c:	84 83       	std	Z+4, r24	; 0x04
			self->LCD->curgen->saved_freq = 0;
     12e:	ee 81       	ldd	r30, Y+6	; 0x06
     130:	ff 81       	ldd	r31, Y+7	; 0x07
     132:	00 84       	ldd	r0, Z+8	; 0x08
     134:	f1 85       	ldd	r31, Z+9	; 0x09
     136:	e0 2d       	mov	r30, r0
     138:	17 82       	std	Z+7, r1	; 0x07
     13a:	16 82       	std	Z+6, r1	; 0x06
			AFTER(MSEC(1000/self->LCD->curgen->freq/2),self->LCD->curgen,infinity,0); //need to resume pulsing
     13c:	ee 81       	ldd	r30, Y+6	; 0x06
     13e:	ff 81       	ldd	r31, Y+7	; 0x07
     140:	00 85       	ldd	r16, Z+8	; 0x08
     142:	11 85       	ldd	r17, Z+9	; 0x09
     144:	f8 01       	movw	r30, r16
     146:	64 81       	ldd	r22, Z+4	; 0x04
     148:	75 81       	ldd	r23, Z+5	; 0x05
     14a:	84 ef       	ldi	r24, 0xF4	; 244
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__divmodhi4>
     152:	2d e7       	ldi	r18, 0x7D	; 125
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	db 01       	movw	r26, r22
     158:	0e 94 91 11 	call	0x2322	; 0x2322 <__usmulhisi3>
     15c:	6b 01       	movw	r12, r22
     15e:	7c 01       	movw	r14, r24
     160:	99 23       	and	r25, r25
     162:	2c f4       	brge	.+10     	; 0x16e <portB+0x70>
     164:	f3 e0       	ldi	r31, 0x03	; 3
     166:	cf 0e       	add	r12, r31
     168:	d1 1c       	adc	r13, r1
     16a:	e1 1c       	adc	r14, r1
     16c:	f1 1c       	adc	r15, r1
     16e:	c7 01       	movw	r24, r14
     170:	b6 01       	movw	r22, r12
     172:	95 95       	asr	r25
     174:	87 95       	ror	r24
     176:	77 95       	ror	r23
     178:	67 95       	ror	r22
     17a:	95 95       	asr	r25
     17c:	87 95       	ror	r24
     17e:	77 95       	ror	r23
     180:	67 95       	ror	r22
     182:	c1 2c       	mov	r12, r1
     184:	d1 2c       	mov	r13, r1
     186:	0f 2e       	mov	r0, r31
     188:	f7 e2       	ldi	r31, 0x27	; 39
     18a:	ef 2e       	mov	r14, r31
     18c:	f4 e0       	ldi	r31, 0x04	; 4
     18e:	ff 2e       	mov	r15, r31
     190:	f0 2d       	mov	r31, r0
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	a9 01       	movw	r20, r18
     198:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
     19c:	11 c0       	rjmp	.+34     	; 0x1c0 <portB+0xc2>
			
		} else if (self->LCD->curgen->freq != 0) {
			ASYNC(self->LCD->curgen,save,0);
     19e:	c1 2c       	mov	r12, r1
     1a0:	d1 2c       	mov	r13, r1
     1a2:	0f 2e       	mov	r0, r31
     1a4:	f6 ec       	ldi	r31, 0xC6	; 198
     1a6:	ef 2e       	mov	r14, r31
     1a8:	f4 e0       	ldi	r31, 0x04	; 4
     1aa:	ff 2e       	mov	r15, r31
     1ac:	f0 2d       	mov	r31, r0
     1ae:	8f 01       	movw	r16, r30
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	a9 01       	movw	r20, r18
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	cb 01       	movw	r24, r22
     1bc:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
			//self->hold = 1;
		}
		ASYNC(self->LCD,update_screen,0);
     1c0:	0e 81       	ldd	r16, Y+6	; 0x06
     1c2:	1f 81       	ldd	r17, Y+7	; 0x07
     1c4:	c1 2c       	mov	r12, r1
     1c6:	d1 2c       	mov	r13, r1
     1c8:	0f 2e       	mov	r0, r31
     1ca:	f9 ee       	ldi	r31, 0xE9	; 233
     1cc:	ef 2e       	mov	r14, r31
     1ce:	f3 e0       	ldi	r31, 0x03	; 3
     1d0:	ff 2e       	mov	r15, r31
     1d2:	f0 2d       	mov	r31, r0
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	a9 01       	movw	r20, r18
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	cb 01       	movw	r24, r22
     1e0:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
     1e4:	64 c0       	rjmp	.+200    	; 0x2ae <portB+0x1b0>
		
	}
	
	//BIT 6:  up
	else if ((PINB & 64) == 0) {// & self->hold==0) {
     1e6:	1e 99       	sbic	0x03, 6	; 3
     1e8:	30 c0       	rjmp	.+96     	; 0x24a <portB+0x14c>
		SYNC(self->LCD->curgen,update_F,1);
     1ea:	ee 81       	ldd	r30, Y+6	; 0x06
     1ec:	ff 81       	ldd	r31, Y+7	; 0x07
     1ee:	41 e0       	ldi	r20, 0x01	; 1
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	62 e7       	ldi	r22, 0x72	; 114
     1f4:	74 e0       	ldi	r23, 0x04	; 4
     1f6:	80 85       	ldd	r24, Z+8	; 0x08
     1f8:	91 85       	ldd	r25, Z+9	; 0x09
     1fa:	0e 94 33 10 	call	0x2066	; 0x2066 <sync>
		ASYNC(self->LCD,update_screen,0);
     1fe:	0e 81       	ldd	r16, Y+6	; 0x06
     200:	1f 81       	ldd	r17, Y+7	; 0x07
     202:	c1 2c       	mov	r12, r1
     204:	d1 2c       	mov	r13, r1
     206:	0f 2e       	mov	r0, r31
     208:	f9 ee       	ldi	r31, 0xE9	; 233
     20a:	ef 2e       	mov	r14, r31
     20c:	f3 e0       	ldi	r31, 0x03	; 3
     20e:	ff 2e       	mov	r15, r31
     210:	f0 2d       	mov	r31, r0
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	a9 01       	movw	r20, r18
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	cb 01       	movw	r24, r22
     21e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
		AFTER(MSEC(500),self,checkhold,1);
     222:	cc 24       	eor	r12, r12
     224:	c3 94       	inc	r12
     226:	d1 2c       	mov	r13, r1
     228:	0f 2e       	mov	r0, r31
     22a:	fd e4       	ldi	r31, 0x4D	; 77
     22c:	ef 2e       	mov	r14, r31
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	ff 2e       	mov	r15, r31
     232:	f0 2d       	mov	r31, r0
     234:	8e 01       	movw	r16, r28
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	a9 01       	movw	r20, r18
     23c:	69 e0       	ldi	r22, 0x09	; 9
     23e:	7d e3       	ldi	r23, 0x3D	; 61
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
     248:	32 c0       	rjmp	.+100    	; 0x2ae <portB+0x1b0>
		
		 //bit of start delay for hold
	}
	
	//BIT 7:  down
	else if ((PINB & 128) == 0) {// & self->hold==0) {
     24a:	1f 99       	sbic	0x03, 7	; 3
     24c:	30 c0       	rjmp	.+96     	; 0x2ae <portB+0x1b0>
		SYNC(self->LCD->curgen,update_F,-1);
     24e:	ee 81       	ldd	r30, Y+6	; 0x06
     250:	ff 81       	ldd	r31, Y+7	; 0x07
     252:	4f ef       	ldi	r20, 0xFF	; 255
     254:	5f ef       	ldi	r21, 0xFF	; 255
     256:	62 e7       	ldi	r22, 0x72	; 114
     258:	74 e0       	ldi	r23, 0x04	; 4
     25a:	80 85       	ldd	r24, Z+8	; 0x08
     25c:	91 85       	ldd	r25, Z+9	; 0x09
     25e:	0e 94 33 10 	call	0x2066	; 0x2066 <sync>
		ASYNC(self->LCD,update_screen,0);
     262:	0e 81       	ldd	r16, Y+6	; 0x06
     264:	1f 81       	ldd	r17, Y+7	; 0x07
     266:	c1 2c       	mov	r12, r1
     268:	d1 2c       	mov	r13, r1
     26a:	0f 2e       	mov	r0, r31
     26c:	f9 ee       	ldi	r31, 0xE9	; 233
     26e:	ef 2e       	mov	r14, r31
     270:	f3 e0       	ldi	r31, 0x03	; 3
     272:	ff 2e       	mov	r15, r31
     274:	f0 2d       	mov	r31, r0
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	a9 01       	movw	r20, r18
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	cb 01       	movw	r24, r22
     282:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
		AFTER(MSEC(500),self->Pulse,metronome,1);
     286:	08 85       	ldd	r16, Y+8	; 0x08
     288:	19 85       	ldd	r17, Y+9	; 0x09
     28a:	cc 24       	eor	r12, r12
     28c:	c3 94       	inc	r12
     28e:	d1 2c       	mov	r13, r1
     290:	0f 2e       	mov	r0, r31
     292:	f0 ed       	ldi	r31, 0xD0	; 208
     294:	ef 2e       	mov	r14, r31
     296:	f4 e0       	ldi	r31, 0x04	; 4
     298:	ff 2e       	mov	r15, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	a9 01       	movw	r20, r18
     2a2:	69 e0       	ldi	r22, 0x09	; 9
     2a4:	7d e3       	ldi	r23, 0x3D	; 61
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
	}
	
    
}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	08 95       	ret

000002c0 <portE>:
	} else {
		self->checking_hold = 0;
		return;
	}
}
void portE(GUI *self) {
     2c0:	cf 92       	push	r12
     2c2:	df 92       	push	r13
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	ec 01       	movw	r28, r24
	//self->hold = 0;
	//BIT 2 = left
	if ((PINE & 4) == 0){// && &self->curgen==Gen2) {
     2d2:	62 99       	sbic	0x0c, 2	; 12
     2d4:	14 c0       	rjmp	.+40     	; 0x2fe <portE+0x3e>
		//self->curgen=Gen1;
		ASYNC(self->LCD,shift,1);
     2d6:	0e 81       	ldd	r16, Y+6	; 0x06
     2d8:	1f 81       	ldd	r17, Y+7	; 0x07
     2da:	cc 24       	eor	r12, r12
     2dc:	c3 94       	inc	r12
     2de:	d1 2c       	mov	r13, r1
     2e0:	0f 2e       	mov	r0, r31
     2e2:	f7 e0       	ldi	r31, 0x07	; 7
     2e4:	ef 2e       	mov	r14, r31
     2e6:	f4 e0       	ldi	r31, 0x04	; 4
     2e8:	ff 2e       	mov	r15, r31
     2ea:	f0 2d       	mov	r31, r0
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	a9 01       	movw	r20, r18
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	cb 01       	movw	r24, r22
     2f8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
     2fc:	16 c0       	rjmp	.+44     	; 0x32a <portE+0x6a>
		//ASYNC(self->Gen1,Pulse1,0);
		//self->hold = 1;
		//switch to gen1 if cur gen is 2
	}else if ((PINE & 8) == 0){//&& &self->curgen==Gen1) {//BIT 3 = right
     2fe:	63 99       	sbic	0x0c, 3	; 12
     300:	14 c0       	rjmp	.+40     	; 0x32a <portE+0x6a>
		//self->curgen=Gen2;
		ASYNC(self->LCD,shift,2);
     302:	0e 81       	ldd	r16, Y+6	; 0x06
     304:	1f 81       	ldd	r17, Y+7	; 0x07
     306:	68 94       	set
     308:	cc 24       	eor	r12, r12
     30a:	c1 f8       	bld	r12, 1
     30c:	d1 2c       	mov	r13, r1
     30e:	0f 2e       	mov	r0, r31
     310:	f7 e0       	ldi	r31, 0x07	; 7
     312:	ef 2e       	mov	r14, r31
     314:	f4 e0       	ldi	r31, 0x04	; 4
     316:	ff 2e       	mov	r15, r31
     318:	f0 2d       	mov	r31, r0
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	a9 01       	movw	r20, r18
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	cb 01       	movw	r24, r22
     326:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
		//ASYNC(self->Gen2,Pulse2,0);
		//self->hold = 1;
		//switch to gen2 if cur gen is 1
	}
	
	ASYNC(self->LCD,update_screen,0);
     32a:	0e 81       	ldd	r16, Y+6	; 0x06
     32c:	1f 81       	ldd	r17, Y+7	; 0x07
     32e:	c1 2c       	mov	r12, r1
     330:	d1 2c       	mov	r13, r1
     332:	0f 2e       	mov	r0, r31
     334:	f9 ee       	ldi	r31, 0xE9	; 233
     336:	ef 2e       	mov	r14, r31
     338:	f3 e0       	ldi	r31, 0x03	; 3
     33a:	ff 2e       	mov	r15, r31
     33c:	f0 2d       	mov	r31, r0
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	a9 01       	movw	r20, r18
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	cb 01       	movw	r24, r22
     34a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
}
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	df 90       	pop	r13
     35c:	cf 90       	pop	r12
     35e:	08 95       	ret

00000360 <main>:
#include "GUI.h"
#include "LCD.h"
#include "Pulser.h"

int main(void) 
{
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	c0 54       	subi	r28, 0x40	; 64
     36e:	d1 09       	sbc	r29, r1
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
	
	
	LCD_init();
     37a:	0e 94 30 02 	call	0x460	; 0x460 <LCD_init>
    //Creating objects
	Writer Write1 = initWriter(0);
     37e:	1a 82       	std	Y+2, r1	; 0x02
     380:	19 82       	std	Y+1, r1	; 0x01
     382:	1c 82       	std	Y+4, r1	; 0x04
     384:	1b 82       	std	Y+3, r1	; 0x03
     386:	1e 82       	std	Y+6, r1	; 0x06
     388:	1d 82       	std	Y+5, r1	; 0x05
    PulseGen Gen1 = initGEN(0,0,&Write1,4,0);
     38a:	18 86       	std	Y+8, r1	; 0x08
     38c:	1f 82       	std	Y+7, r1	; 0x07
     38e:	1a 86       	std	Y+10, r1	; 0x0a
     390:	19 86       	std	Y+9, r1	; 0x09
     392:	1c 86       	std	Y+12, r1	; 0x0c
     394:	1b 86       	std	Y+11, r1	; 0x0b
     396:	1e 86       	std	Y+14, r1	; 0x0e
     398:	1d 86       	std	Y+13, r1	; 0x0d
     39a:	ce 01       	movw	r24, r28
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	98 8b       	std	Y+16, r25	; 0x10
     3a0:	8f 87       	std	Y+15, r24	; 0x0f
     3a2:	24 e0       	ldi	r18, 0x04	; 4
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	3a 8b       	std	Y+18, r19	; 0x12
     3a8:	29 8b       	std	Y+17, r18	; 0x11
     3aa:	1c 8a       	std	Y+20, r1	; 0x14
     3ac:	1b 8a       	std	Y+19, r1	; 0x13
    PulseGen Gen2 = initGEN(0,0,&Write1,6,0);
     3ae:	1e 8a       	std	Y+22, r1	; 0x16
     3b0:	1d 8a       	std	Y+21, r1	; 0x15
     3b2:	18 8e       	std	Y+24, r1	; 0x18
     3b4:	1f 8a       	std	Y+23, r1	; 0x17
     3b6:	1a 8e       	std	Y+26, r1	; 0x1a
     3b8:	19 8e       	std	Y+25, r1	; 0x19
     3ba:	1c 8e       	std	Y+28, r1	; 0x1c
     3bc:	1b 8e       	std	Y+27, r1	; 0x1b
     3be:	9e 8f       	std	Y+30, r25	; 0x1e
     3c0:	8d 8f       	std	Y+29, r24	; 0x1d
     3c2:	86 e0       	ldi	r24, 0x06	; 6
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	98 a3       	std	Y+32, r25	; 0x20
     3c8:	8f 8f       	std	Y+31, r24	; 0x1f
     3ca:	1a a2       	std	Y+34, r1	; 0x22
     3cc:	19 a2       	std	Y+33, r1	; 0x21
	LCD LCD1 = initLCD(&Gen1,&Gen2,&Gen1);
     3ce:	1c a2       	std	Y+36, r1	; 0x24
     3d0:	1b a2       	std	Y+35, r1	; 0x23
     3d2:	1e a2       	std	Y+38, r1	; 0x26
     3d4:	1d a2       	std	Y+37, r1	; 0x25
     3d6:	ce 01       	movw	r24, r28
     3d8:	07 96       	adiw	r24, 0x07	; 7
     3da:	98 a7       	std	Y+40, r25	; 0x28
     3dc:	8f a3       	std	Y+39, r24	; 0x27
     3de:	9e 01       	movw	r18, r28
     3e0:	2b 5e       	subi	r18, 0xEB	; 235
     3e2:	3f 4f       	sbci	r19, 0xFF	; 255
     3e4:	3a a7       	std	Y+42, r19	; 0x2a
     3e6:	29 a7       	std	Y+41, r18	; 0x29
     3e8:	9c a7       	std	Y+44, r25	; 0x2c
     3ea:	8b a7       	std	Y+43, r24	; 0x2b
	Pulser Pulse1 = initPulser(0,&LCD1);
     3ec:	1e a6       	std	Y+46, r1	; 0x2e
     3ee:	1d a6       	std	Y+45, r1	; 0x2d
     3f0:	18 aa       	std	Y+48, r1	; 0x30
     3f2:	1f a6       	std	Y+47, r1	; 0x2f
     3f4:	1a aa       	std	Y+50, r1	; 0x32
     3f6:	19 aa       	std	Y+49, r1	; 0x31
     3f8:	8e 01       	movw	r16, r28
     3fa:	0d 5d       	subi	r16, 0xDD	; 221
     3fc:	1f 4f       	sbci	r17, 0xFF	; 255
     3fe:	1c ab       	std	Y+52, r17	; 0x34
     400:	0b ab       	std	Y+51, r16	; 0x33
	GUI GUI1 = initGUI(0,&LCD1,&Pulse1,0);
     402:	1e aa       	std	Y+54, r1	; 0x36
     404:	1d aa       	std	Y+53, r1	; 0x35
     406:	18 ae       	std	Y+56, r1	; 0x38
     408:	1f aa       	std	Y+55, r1	; 0x37
     40a:	1a ae       	std	Y+58, r1	; 0x3a
     40c:	19 ae       	std	Y+57, r1	; 0x39
     40e:	1c af       	std	Y+60, r17	; 0x3c
     410:	0b af       	std	Y+59, r16	; 0x3b
     412:	86 96       	adiw	r24, 0x26	; 38
     414:	9e af       	std	Y+62, r25	; 0x3e
     416:	8d af       	std	Y+61, r24	; 0x3d
     418:	21 96       	adiw	r28, 0x01	; 1
     41a:	1f ae       	std	Y+63, r1	; 0x3f
     41c:	1e ae       	std	Y+62, r1	; 0x3e
     41e:	21 97       	sbiw	r28, 0x01	; 1
	//SYNC(&LCD,LCD_init,0);
	//LCDDR1 = 32;
	//LCDDR2 = 0xFFFF;

	//Installing method as interrupt handler with obj and interrupt source as arguments
    INSTALL(&GUI1, portB, IRQ_PCINT1); //Button down/up/press interrupt handler. 
     420:	42 e0       	ldi	r20, 0x02	; 2
     422:	6f e7       	ldi	r22, 0x7F	; 127
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	08 96       	adiw	r24, 0x08	; 8
     428:	0e 94 37 11 	call	0x226e	; 0x226e <install>
	INSTALL(&GUI1, portE, IRQ_PCINT0); //Button right/left interrupt handler.
     42c:	41 e0       	ldi	r20, 0x01	; 1
     42e:	60 e6       	ldi	r22, 0x60	; 96
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	ce 01       	movw	r24, r28
     434:	c5 96       	adiw	r24, 0x35	; 53
     436:	0e 94 37 11 	call	0x226e	; 0x226e <install>
	
	//Must give control to TinyTimber scheduler, starting event-handling. Method(obj,arg) is startup event
    return TINYTIMBER(&LCD1, update_screen, 0); 
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	69 ee       	ldi	r22, 0xE9	; 233
     440:	73 e0       	ldi	r23, 0x03	; 3
     442:	c8 01       	movw	r24, r16
     444:	0e 94 51 11 	call	0x22a2	; 0x22a2 <tinytimber>

     448:	c0 5c       	subi	r28, 0xC0	; 192
     44a:	df 4f       	sbci	r29, 0xFF	; 255
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	08 95       	ret

00000460 <LCD_init>:

#include "LCD.h"
#include <avr/io.h>

void LCD_init(void) {
	CLKPR = 0x80;
     460:	e1 e6       	ldi	r30, 0x61	; 97
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 e8       	ldi	r24, 0x80	; 128
     466:	80 83       	st	Z, r24
	CLKPR = 0x00;
     468:	10 82       	st	Z, r1
	EIFR = 0xC0;
	EICRA |= (1 << ISC01);*/
	
	
	
	PORTB = 208;
     46a:	20 ed       	ldi	r18, 0xD0	; 208
     46c:	25 b9       	out	0x05, r18	; 5
	PORTE = 12;
     46e:	9c e0       	ldi	r25, 0x0C	; 12
     470:	9e b9       	out	0x0e, r25	; 14
	EIMSK = 192;
     472:	80 ec       	ldi	r24, 0xC0	; 192
     474:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 = 208;
     476:	20 93 6c 00 	sts	0x006C, r18
	PCMSK0 = 12;
     47a:	90 93 6b 00 	sts	0x006B, r25
	
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
     47e:	97 eb       	ldi	r25, 0xB7	; 183
     480:	90 93 e5 00 	sts	0x00E5, r25
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
     484:	97 e0       	ldi	r25, 0x07	; 7
     486:	90 93 e6 00 	sts	0x00E6, r25
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
     48a:	9f e0       	ldi	r25, 0x0F	; 15
     48c:	90 93 e7 00 	sts	0x00E7, r25
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
     490:	80 93 e4 00 	sts	0x00E4, r24
		
	LCDDR3 = 1 | LCDDR3; //gen 1 selected indicator
     494:	ef ee       	ldi	r30, 0xEF	; 239
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	81 60       	ori	r24, 0x01	; 1
     49c:	80 83       	st	Z, r24
	LCDDR1 = 0x0;
     49e:	10 92 ed 00 	sts	0x00ED, r1
     4a2:	08 95       	ret

000004a4 <writeChar>:
}

void writeChar(char ch, int pos) {
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	64 97       	sbiw	r28, 0x14	; 20
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
	int numbers[10] = {
     4b8:	94 e1       	ldi	r25, 0x14	; 20
     4ba:	e8 e0       	ldi	r30, 0x08	; 8
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	de 01       	movw	r26, r28
     4c0:	11 96       	adiw	r26, 0x01	; 1
     4c2:	01 90       	ld	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	9a 95       	dec	r25
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <writeChar+0x1e>
		0x1F41,
		0x0111,
		0x1F51,
		0x0B51
	};
	if (pos >= 0 && pos <= 5) {
     4ca:	66 30       	cpi	r22, 0x06	; 6
     4cc:	71 05       	cpc	r23, r1
     4ce:	08 f0       	brcs	.+2      	; 0x4d2 <writeChar+0x2e>
     4d0:	43 c1       	rjmp	.+646    	; 0x758 <__stack+0x259>
		if (ch < 0 || ch > 9){
     4d2:	8a 30       	cpi	r24, 0x0A	; 10
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <writeChar+0x34>
			ch = ch - '0';
     4d6:	80 53       	subi	r24, 0x30	; 48
		}
		if (ch>= 0 && ch <9) {
     4d8:	89 30       	cpi	r24, 0x09	; 9
     4da:	08 f0       	brcs	.+2      	; 0x4de <writeChar+0x3a>
     4dc:	3d c1       	rjmp	.+634    	; 0x758 <__stack+0x259>
			int mask = 0xF;
			int mask2 = 0xF0;
			int towrite = numbers[ch];
     4de:	e8 2f       	mov	r30, r24
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	ec 0f       	add	r30, r28
     4e8:	fd 1f       	adc	r31, r29
     4ea:	81 81       	ldd	r24, Z+1	; 0x01
     4ec:	92 81       	ldd	r25, Z+2	; 0x02
			
			if (pos == 0) {
     4ee:	61 15       	cp	r22, r1
     4f0:	71 05       	cpc	r23, r1
     4f2:	71 f5       	brne	.+92     	; 0x550 <__stack+0x51>
				LCDDR0 = (mask & towrite) | (LCDDR0) & mask2;
     4f4:	ec ee       	ldi	r30, 0xEC	; 236
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	20 81       	ld	r18, Z
     4fa:	38 2f       	mov	r19, r24
     4fc:	3f 70       	andi	r19, 0x0F	; 15
     4fe:	20 7f       	andi	r18, 0xF0	; 240
     500:	23 2b       	or	r18, r19
     502:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     504:	9c 01       	movw	r18, r24
     506:	35 95       	asr	r19
     508:	27 95       	ror	r18
     50a:	35 95       	asr	r19
     50c:	27 95       	ror	r18
     50e:	35 95       	asr	r19
     510:	27 95       	ror	r18
     512:	35 95       	asr	r19
     514:	27 95       	ror	r18
				LCDDR5 = (mask & towrite) | (LCDDR5) & mask2;
     516:	e1 ef       	ldi	r30, 0xF1	; 241
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	30 81       	ld	r19, Z
     51c:	2f 70       	andi	r18, 0x0F	; 15
     51e:	30 7f       	andi	r19, 0xF0	; 240
     520:	23 2b       	or	r18, r19
     522:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) | (LCDDR10) & mask2;
     524:	e6 ef       	ldi	r30, 0xF6	; 246
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	20 81       	ld	r18, Z
     52a:	39 2f       	mov	r19, r25
     52c:	3f 70       	andi	r19, 0x0F	; 15
     52e:	20 7f       	andi	r18, 0xF0	; 240
     530:	23 2b       	or	r18, r19
     532:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     534:	80 e1       	ldi	r24, 0x10	; 16
     536:	98 02       	muls	r25, r24
     538:	81 2d       	mov	r24, r1
     53a:	99 0b       	sbc	r25, r25
     53c:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) | (LCDDR15) & mask2;
     53e:	eb ef       	ldi	r30, 0xFB	; 251
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	20 81       	ld	r18, Z
     544:	38 2f       	mov	r19, r24
     546:	3f 70       	andi	r19, 0x0F	; 15
     548:	20 7f       	andi	r18, 0xF0	; 240
     54a:	23 2b       	or	r18, r19
     54c:	20 83       	st	Z, r18
     54e:	66 c0       	rjmp	.+204    	; 0x61c <__stack+0x11d>
			}
			if (pos == 1) {
     550:	61 30       	cpi	r22, 0x01	; 1
     552:	71 05       	cpc	r23, r1
     554:	91 f5       	brne	.+100    	; 0x5ba <__stack+0xbb>
				LCDDR0 = (mask & towrite) << 4 | LCDDR0 & mask;
     556:	ec ee       	ldi	r30, 0xEC	; 236
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	20 81       	ld	r18, Z
     55c:	38 2f       	mov	r19, r24
     55e:	32 95       	swap	r19
     560:	30 7f       	andi	r19, 0xF0	; 240
     562:	2f 70       	andi	r18, 0x0F	; 15
     564:	23 2b       	or	r18, r19
     566:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR5 = (mask & towrite) << 4 | LCDDR5 & mask;
     568:	e1 ef       	ldi	r30, 0xF1	; 241
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	40 81       	ld	r20, Z
     56e:	9c 01       	movw	r18, r24
     570:	20 7f       	andi	r18, 0xF0	; 240
     572:	33 27       	eor	r19, r19
     574:	34 2f       	mov	r19, r20
     576:	3f 70       	andi	r19, 0x0F	; 15
     578:	23 2b       	or	r18, r19
     57a:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) << 4 | LCDDR10 & mask;
     57c:	e6 ef       	ldi	r30, 0xF6	; 246
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	40 81       	ld	r20, Z
     582:	9c 01       	movw	r18, r24
     584:	32 95       	swap	r19
     586:	22 95       	swap	r18
     588:	2f 70       	andi	r18, 0x0F	; 15
     58a:	23 27       	eor	r18, r19
     58c:	3f 70       	andi	r19, 0x0F	; 15
     58e:	23 27       	eor	r18, r19
     590:	20 7f       	andi	r18, 0xF0	; 240
     592:	33 27       	eor	r19, r19
     594:	34 2f       	mov	r19, r20
     596:	3f 70       	andi	r19, 0x0F	; 15
     598:	23 2b       	or	r18, r19
     59a:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	98 02       	muls	r25, r24
     5a0:	81 2d       	mov	r24, r1
     5a2:	99 0b       	sbc	r25, r25
     5a4:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) << 4 | LCDDR15 & mask;
     5a6:	eb ef       	ldi	r30, 0xFB	; 251
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	20 81       	ld	r18, Z
     5ac:	38 2f       	mov	r19, r24
     5ae:	32 95       	swap	r19
     5b0:	30 7f       	andi	r19, 0xF0	; 240
     5b2:	2f 70       	andi	r18, 0x0F	; 15
     5b4:	23 2b       	or	r18, r19
     5b6:	20 83       	st	Z, r18
     5b8:	69 c0       	rjmp	.+210    	; 0x68c <__stack+0x18d>
			}
			if (pos == 2) {
     5ba:	62 30       	cpi	r22, 0x02	; 2
     5bc:	71 05       	cpc	r23, r1
     5be:	71 f5       	brne	.+92     	; 0x61c <__stack+0x11d>
				LCDDR1 = (mask & towrite) | (LCDDR1) & mask2;
     5c0:	ed ee       	ldi	r30, 0xED	; 237
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	20 81       	ld	r18, Z
     5c6:	38 2f       	mov	r19, r24
     5c8:	3f 70       	andi	r19, 0x0F	; 15
     5ca:	20 7f       	andi	r18, 0xF0	; 240
     5cc:	23 2b       	or	r18, r19
     5ce:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     5d0:	9c 01       	movw	r18, r24
     5d2:	35 95       	asr	r19
     5d4:	27 95       	ror	r18
     5d6:	35 95       	asr	r19
     5d8:	27 95       	ror	r18
     5da:	35 95       	asr	r19
     5dc:	27 95       	ror	r18
     5de:	35 95       	asr	r19
     5e0:	27 95       	ror	r18
				LCDDR6 = (mask & towrite) | (LCDDR6) & mask2;
     5e2:	e2 ef       	ldi	r30, 0xF2	; 242
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	30 81       	ld	r19, Z
     5e8:	2f 70       	andi	r18, 0x0F	; 15
     5ea:	30 7f       	andi	r19, 0xF0	; 240
     5ec:	23 2b       	or	r18, r19
     5ee:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) | (LCDDR11) & mask2;
     5f0:	e7 ef       	ldi	r30, 0xF7	; 247
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	20 81       	ld	r18, Z
     5f6:	39 2f       	mov	r19, r25
     5f8:	3f 70       	andi	r19, 0x0F	; 15
     5fa:	20 7f       	andi	r18, 0xF0	; 240
     5fc:	23 2b       	or	r18, r19
     5fe:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     600:	80 e1       	ldi	r24, 0x10	; 16
     602:	98 02       	muls	r25, r24
     604:	81 2d       	mov	r24, r1
     606:	99 0b       	sbc	r25, r25
     608:	11 24       	eor	r1, r1
				LCDDR16 = (mask & towrite) | (LCDDR16) & mask2;
     60a:	ec ef       	ldi	r30, 0xFC	; 252
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	20 81       	ld	r18, Z
     610:	38 2f       	mov	r19, r24
     612:	3f 70       	andi	r19, 0x0F	; 15
     614:	20 7f       	andi	r18, 0xF0	; 240
     616:	23 2b       	or	r18, r19
     618:	20 83       	st	Z, r18
     61a:	67 c0       	rjmp	.+206    	; 0x6ea <__stack+0x1eb>
			}
			if (pos == 3) {
     61c:	63 30       	cpi	r22, 0x03	; 3
     61e:	71 05       	cpc	r23, r1
     620:	a9 f5       	brne	.+106    	; 0x68c <__stack+0x18d>
				LCDDR1 = (mask & towrite) << 4| LCDDR1 & mask;
     622:	ed ee       	ldi	r30, 0xED	; 237
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	20 81       	ld	r18, Z
     628:	38 2f       	mov	r19, r24
     62a:	32 95       	swap	r19
     62c:	30 7f       	andi	r19, 0xF0	; 240
     62e:	2f 70       	andi	r18, 0x0F	; 15
     630:	23 2b       	or	r18, r19
     632:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR6 = (mask & towrite) << 4| LCDDR6 & mask;
     634:	e2 ef       	ldi	r30, 0xF2	; 242
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	40 81       	ld	r20, Z
     63a:	9c 01       	movw	r18, r24
     63c:	20 7f       	andi	r18, 0xF0	; 240
     63e:	33 27       	eor	r19, r19
     640:	34 2f       	mov	r19, r20
     642:	3f 70       	andi	r19, 0x0F	; 15
     644:	23 2b       	or	r18, r19
     646:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) << 4| LCDDR11 & mask;
     648:	e7 ef       	ldi	r30, 0xF7	; 247
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	40 81       	ld	r20, Z
     64e:	9c 01       	movw	r18, r24
     650:	32 95       	swap	r19
     652:	22 95       	swap	r18
     654:	2f 70       	andi	r18, 0x0F	; 15
     656:	23 27       	eor	r18, r19
     658:	3f 70       	andi	r19, 0x0F	; 15
     65a:	23 27       	eor	r18, r19
     65c:	20 7f       	andi	r18, 0xF0	; 240
     65e:	33 27       	eor	r19, r19
     660:	34 2f       	mov	r19, r20
     662:	3f 70       	andi	r19, 0x0F	; 15
     664:	23 2b       	or	r18, r19
     666:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR16 = (mask & towrite) << 4| LCDDR16 & mask;
     668:	ec ef       	ldi	r30, 0xFC	; 252
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	20 81       	ld	r18, Z
     66e:	89 2f       	mov	r24, r25
     670:	99 27       	eor	r25, r25
     672:	82 95       	swap	r24
     674:	8f 70       	andi	r24, 0x0F	; 15
     676:	82 95       	swap	r24
     678:	92 95       	swap	r25
     67a:	90 7f       	andi	r25, 0xF0	; 240
     67c:	98 27       	eor	r25, r24
     67e:	80 7f       	andi	r24, 0xF0	; 240
     680:	98 27       	eor	r25, r24
     682:	92 2f       	mov	r25, r18
     684:	9f 70       	andi	r25, 0x0F	; 15
     686:	89 2b       	or	r24, r25
     688:	80 83       	st	Z, r24
     68a:	66 c0       	rjmp	.+204    	; 0x758 <__stack+0x259>
			}
			if (pos == 4) {
     68c:	64 30       	cpi	r22, 0x04	; 4
     68e:	71 05       	cpc	r23, r1
     690:	61 f5       	brne	.+88     	; 0x6ea <__stack+0x1eb>
				LCDDR2 = (mask & towrite) | LCDDR2 & mask2 ;
     692:	ee ee       	ldi	r30, 0xEE	; 238
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	20 81       	ld	r18, Z
     698:	38 2f       	mov	r19, r24
     69a:	3f 70       	andi	r19, 0x0F	; 15
     69c:	20 7f       	andi	r18, 0xF0	; 240
     69e:	23 2b       	or	r18, r19
     6a0:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     6a2:	9c 01       	movw	r18, r24
     6a4:	35 95       	asr	r19
     6a6:	27 95       	ror	r18
     6a8:	35 95       	asr	r19
     6aa:	27 95       	ror	r18
     6ac:	35 95       	asr	r19
     6ae:	27 95       	ror	r18
     6b0:	35 95       	asr	r19
     6b2:	27 95       	ror	r18
				LCDDR7 = (mask & towrite) | LCDDR7 & mask2;
     6b4:	e3 ef       	ldi	r30, 0xF3	; 243
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	2f 70       	andi	r18, 0x0F	; 15
     6bc:	80 7f       	andi	r24, 0xF0	; 240
     6be:	28 2b       	or	r18, r24
     6c0:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite)| LCDDR12 & mask2;
     6c2:	e8 ef       	ldi	r30, 0xF8	; 248
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
     6c8:	29 2f       	mov	r18, r25
     6ca:	2f 70       	andi	r18, 0x0F	; 15
     6cc:	80 7f       	andi	r24, 0xF0	; 240
     6ce:	82 2b       	or	r24, r18
     6d0:	80 83       	st	Z, r24
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite)| LCDDR17 & mask2;
     6d2:	ed ef       	ldi	r30, 0xFD	; 253
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
				LCDDR2 = (mask & towrite) | LCDDR2 & mask2 ;
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) | LCDDR7 & mask2;
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite)| LCDDR12 & mask2;
				towrite = (towrite >> 4);
     6d8:	95 95       	asr	r25
     6da:	95 95       	asr	r25
     6dc:	95 95       	asr	r25
     6de:	95 95       	asr	r25
				LCDDR17 = (mask & towrite)| LCDDR17 & mask2;
     6e0:	9f 70       	andi	r25, 0x0F	; 15
     6e2:	80 7f       	andi	r24, 0xF0	; 240
     6e4:	89 2b       	or	r24, r25
     6e6:	80 83       	st	Z, r24
     6e8:	37 c0       	rjmp	.+110    	; 0x758 <__stack+0x259>
			}
			if (pos == 5) {
     6ea:	65 30       	cpi	r22, 0x05	; 5
     6ec:	71 05       	cpc	r23, r1
     6ee:	a1 f5       	brne	.+104    	; 0x758 <__stack+0x259>
				LCDDR2 = (mask & towrite) << 4| LCDDR2 & mask;
     6f0:	ee ee       	ldi	r30, 0xEE	; 238
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	20 81       	ld	r18, Z
     6f6:	38 2f       	mov	r19, r24
     6f8:	32 95       	swap	r19
     6fa:	30 7f       	andi	r19, 0xF0	; 240
     6fc:	2f 70       	andi	r18, 0x0F	; 15
     6fe:	23 2b       	or	r18, r19
     700:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) << 4| LCDDR7 & mask;
     702:	e3 ef       	ldi	r30, 0xF3	; 243
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	40 81       	ld	r20, Z
     708:	9c 01       	movw	r18, r24
     70a:	20 7f       	andi	r18, 0xF0	; 240
     70c:	33 27       	eor	r19, r19
     70e:	34 2f       	mov	r19, r20
     710:	3f 70       	andi	r19, 0x0F	; 15
     712:	23 2b       	or	r18, r19
     714:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite) << 4| LCDDR12 & mask;
     716:	e8 ef       	ldi	r30, 0xF8	; 248
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	40 81       	ld	r20, Z
     71c:	9c 01       	movw	r18, r24
     71e:	32 95       	swap	r19
     720:	22 95       	swap	r18
     722:	2f 70       	andi	r18, 0x0F	; 15
     724:	23 27       	eor	r18, r19
     726:	3f 70       	andi	r19, 0x0F	; 15
     728:	23 27       	eor	r18, r19
     72a:	20 7f       	andi	r18, 0xF0	; 240
     72c:	33 27       	eor	r19, r19
     72e:	34 2f       	mov	r19, r20
     730:	3f 70       	andi	r19, 0x0F	; 15
     732:	23 2b       	or	r18, r19
     734:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite) << 4| LCDDR17 & mask;
     736:	ed ef       	ldi	r30, 0xFD	; 253
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	20 81       	ld	r18, Z
     73c:	89 2f       	mov	r24, r25
     73e:	99 27       	eor	r25, r25
     740:	82 95       	swap	r24
     742:	8f 70       	andi	r24, 0x0F	; 15
     744:	82 95       	swap	r24
     746:	92 95       	swap	r25
     748:	90 7f       	andi	r25, 0xF0	; 240
     74a:	98 27       	eor	r25, r24
     74c:	80 7f       	andi	r24, 0xF0	; 240
     74e:	98 27       	eor	r25, r24
     750:	92 2f       	mov	r25, r18
     752:	9f 70       	andi	r25, 0x0F	; 15
     754:	89 2b       	or	r24, r25
     756:	80 83       	st	Z, r24
			}
		}
	}
}
     758:	64 96       	adiw	r28, 0x14	; 20
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <printAt>:

void printAt(long num, int pos) {
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	16 2f       	mov	r17, r22
     774:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (char)num % 100 / 10 + '0', pp);
     776:	89 e2       	ldi	r24, 0x29	; 41
     778:	68 9f       	mul	r22, r24
     77a:	81 2d       	mov	r24, r1
     77c:	11 24       	eor	r1, r1
     77e:	82 95       	swap	r24
     780:	8f 70       	andi	r24, 0x0F	; 15
     782:	96 2f       	mov	r25, r22
     784:	24 e6       	ldi	r18, 0x64	; 100
     786:	82 9f       	mul	r24, r18
     788:	90 19       	sub	r25, r0
     78a:	11 24       	eor	r1, r1
     78c:	0d ec       	ldi	r16, 0xCD	; 205
     78e:	90 9f       	mul	r25, r16
     790:	81 2d       	mov	r24, r1
     792:	11 24       	eor	r1, r1
     794:	86 95       	lsr	r24
     796:	86 95       	lsr	r24
     798:	86 95       	lsr	r24
     79a:	ba 01       	movw	r22, r20
     79c:	80 5d       	subi	r24, 0xD0	; 208
     79e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <writeChar>
	pp++;
     7a2:	be 01       	movw	r22, r28
     7a4:	6f 5f       	subi	r22, 0xFF	; 255
     7a6:	7f 4f       	sbci	r23, 0xFF	; 255
	writeChar( (char)num % 10 + '0', pp);
     7a8:	10 9f       	mul	r17, r16
     7aa:	01 2d       	mov	r16, r1
     7ac:	11 24       	eor	r1, r1
     7ae:	06 95       	lsr	r16
     7b0:	06 95       	lsr	r16
     7b2:	06 95       	lsr	r16
     7b4:	00 0f       	add	r16, r16
     7b6:	80 2f       	mov	r24, r16
     7b8:	88 0f       	add	r24, r24
     7ba:	88 0f       	add	r24, r24
     7bc:	08 0f       	add	r16, r24
     7be:	81 2f       	mov	r24, r17
     7c0:	80 1b       	sub	r24, r16
     7c2:	80 5d       	subi	r24, 0xD0	; 208
     7c4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <writeChar>
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <update_screen>:

void update_screen(LCD *self,int gen) {
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	printAt(self->Gen1->freq,0);
     7d8:	ec 81       	ldd	r30, Y+4	; 0x04
     7da:	fd 81       	ldd	r31, Y+5	; 0x05
     7dc:	64 81       	ldd	r22, Z+4	; 0x04
     7de:	75 81       	ldd	r23, Z+5	; 0x05
     7e0:	88 27       	eor	r24, r24
     7e2:	77 fd       	sbrc	r23, 7
     7e4:	80 95       	com	r24
     7e6:	98 2f       	mov	r25, r24
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	0e 94 b5 03 	call	0x76a	; 0x76a <printAt>
	printAt(self->Gen2->freq,4);
     7f0:	ee 81       	ldd	r30, Y+6	; 0x06
     7f2:	ff 81       	ldd	r31, Y+7	; 0x07
     7f4:	64 81       	ldd	r22, Z+4	; 0x04
     7f6:	75 81       	ldd	r23, Z+5	; 0x05
     7f8:	88 27       	eor	r24, r24
     7fa:	77 fd       	sbrc	r23, 7
     7fc:	80 95       	com	r24
     7fe:	98 2f       	mov	r25, r24
     800:	44 e0       	ldi	r20, 0x04	; 4
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	0e 94 b5 03 	call	0x76a	; 0x76a <printAt>
		LCDDR18 = 0x0;
	} else if(self->curgen == self->Gen1){
		LCDDR13 = 0x0;
		LCDDR18 = 0x1;
	}*/
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <shift>:

void shift(LCD *self, int gen) {
	if (gen == 1) {
     80e:	61 30       	cpi	r22, 0x01	; 1
     810:	71 05       	cpc	r23, r1
     812:	69 f4       	brne	.+26     	; 0x82e <shift+0x20>
		LCDDR3 = 1 | LCDDR3; //gen 1 selected indicator
     814:	ef ee       	ldi	r30, 0xEF	; 239
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	20 81       	ld	r18, Z
     81a:	21 60       	ori	r18, 0x01	; 1
     81c:	20 83       	st	Z, r18
		LCDDR1 = 0x0;
     81e:	10 92 ed 00 	sts	0x00ED, r1
		self->curgen = self->Gen1;
     822:	fc 01       	movw	r30, r24
     824:	24 81       	ldd	r18, Z+4	; 0x04
     826:	35 81       	ldd	r19, Z+5	; 0x05
     828:	31 87       	std	Z+9, r19	; 0x09
     82a:	20 87       	std	Z+8, r18	; 0x08
     82c:	08 95       	ret
		
	} else if (gen == 2) {
     82e:	62 30       	cpi	r22, 0x02	; 2
     830:	71 05       	cpc	r23, r1
     832:	61 f4       	brne	.+24     	; 0x84c <shift+0x3e>
		LCDDR1 = 0x2 | LCDDR1; //gen 2 selected indicator
     834:	ed ee       	ldi	r30, 0xED	; 237
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	20 81       	ld	r18, Z
     83a:	22 60       	ori	r18, 0x02	; 2
     83c:	20 83       	st	Z, r18
		LCDDR3 = 0;
     83e:	10 92 ef 00 	sts	0x00EF, r1
		self->curgen = self->Gen2;
     842:	fc 01       	movw	r30, r24
     844:	26 81       	ldd	r18, Z+6	; 0x06
     846:	37 81       	ldd	r19, Z+7	; 0x07
     848:	31 87       	std	Z+9, r19	; 0x09
     84a:	20 87       	std	Z+8, r18	; 0x08
     84c:	08 95       	ret

0000084e <infinity>:
    self->saved_freq = self->freq;
    self->freq = 0;
	self->first_call = 0; //so the pulse loop starts again
}

void infinity(PulseGen *self) {
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	ec 01       	movw	r28, r24
	if (self->freq>0) {
     860:	8c 81       	ldd	r24, Y+4	; 0x04
     862:	9d 81       	ldd	r25, Y+5	; 0x05
     864:	18 16       	cp	r1, r24
     866:	19 06       	cpc	r1, r25
     868:	a4 f5       	brge	.+104    	; 0x8d2 <infinity+0x84>
		SYNC(self->Write1,write,self->portnr);//pulse once
     86a:	4a 85       	ldd	r20, Y+10	; 0x0a
     86c:	5b 85       	ldd	r21, Y+11	; 0x0b
     86e:	6d e6       	ldi	r22, 0x6D	; 109
     870:	71 e1       	ldi	r23, 0x11	; 17
     872:	88 85       	ldd	r24, Y+8	; 0x08
     874:	99 85       	ldd	r25, Y+9	; 0x09
     876:	0e 94 33 10 	call	0x2066	; 0x2066 <sync>
		AFTER(MSEC(1000/self->freq/2),self,infinity,0);
     87a:	6c 81       	ldd	r22, Y+4	; 0x04
     87c:	7d 81       	ldd	r23, Y+5	; 0x05
     87e:	84 ef       	ldi	r24, 0xF4	; 244
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__divmodhi4>
     886:	2d e7       	ldi	r18, 0x7D	; 125
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	db 01       	movw	r26, r22
     88c:	0e 94 91 11 	call	0x2322	; 0x2322 <__usmulhisi3>
     890:	6b 01       	movw	r12, r22
     892:	7c 01       	movw	r14, r24
     894:	99 23       	and	r25, r25
     896:	2c f4       	brge	.+10     	; 0x8a2 <infinity+0x54>
     898:	23 e0       	ldi	r18, 0x03	; 3
     89a:	c2 0e       	add	r12, r18
     89c:	d1 1c       	adc	r13, r1
     89e:	e1 1c       	adc	r14, r1
     8a0:	f1 1c       	adc	r15, r1
     8a2:	c7 01       	movw	r24, r14
     8a4:	b6 01       	movw	r22, r12
     8a6:	95 95       	asr	r25
     8a8:	87 95       	ror	r24
     8aa:	77 95       	ror	r23
     8ac:	67 95       	ror	r22
     8ae:	95 95       	asr	r25
     8b0:	87 95       	ror	r24
     8b2:	77 95       	ror	r23
     8b4:	67 95       	ror	r22
     8b6:	c1 2c       	mov	r12, r1
     8b8:	d1 2c       	mov	r13, r1
     8ba:	0f 2e       	mov	r0, r31
     8bc:	f7 e2       	ldi	r31, 0x27	; 39
     8be:	ef 2e       	mov	r14, r31
     8c0:	f4 e0       	ldi	r31, 0x04	; 4
     8c2:	ff 2e       	mov	r15, r31
     8c4:	f0 2d       	mov	r31, r0
     8c6:	8e 01       	movw	r16, r28
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	a9 01       	movw	r20, r18
     8ce:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
		 
	} else {
		SYNC(self->Write1,write,self->portnr);//pulse once
	
	}*/
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	08 95       	ret

000008e4 <update_F>:
 *  Author: Klas Mannberg
 */ 
#include "PulseGen.h"
#include "avr/io.h"

void update_F(PulseGen *self,int val) {
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	ec 01       	movw	r28, r24
	
    if (val<0 && self->freq>0) {
     8f6:	77 23       	and	r23, r23
     8f8:	54 f4       	brge	.+20     	; 0x90e <update_F+0x2a>
     8fa:	8c 81       	ldd	r24, Y+4	; 0x04
     8fc:	9d 81       	ldd	r25, Y+5	; 0x05
     8fe:	18 16       	cp	r1, r24
     900:	19 06       	cpc	r1, r25
     902:	2c f4       	brge	.+10     	; 0x90e <update_F+0x2a>
        self->freq += val;
     904:	68 0f       	add	r22, r24
     906:	79 1f       	adc	r23, r25
     908:	7d 83       	std	Y+5, r23	; 0x05
     90a:	6c 83       	std	Y+4, r22	; 0x04
     90c:	36 c0       	rjmp	.+108    	; 0x97a <update_F+0x96>
    } else if(val>0 && self->freq<100 && self->freq>0) {
     90e:	16 16       	cp	r1, r22
     910:	17 06       	cpc	r1, r23
     912:	6c f4       	brge	.+26     	; 0x92e <update_F+0x4a>
     914:	8c 81       	ldd	r24, Y+4	; 0x04
     916:	9d 81       	ldd	r25, Y+5	; 0x05
     918:	9c 01       	movw	r18, r24
     91a:	21 50       	subi	r18, 0x01	; 1
     91c:	31 09       	sbc	r19, r1
     91e:	23 36       	cpi	r18, 0x63	; 99
     920:	31 05       	cpc	r19, r1
     922:	28 f4       	brcc	.+10     	; 0x92e <update_F+0x4a>
        self->freq += val;
     924:	68 0f       	add	r22, r24
     926:	79 1f       	adc	r23, r25
     928:	7d 83       	std	Y+5, r23	; 0x05
     92a:	6c 83       	std	Y+4, r22	; 0x04
     92c:	26 c0       	rjmp	.+76     	; 0x97a <update_F+0x96>
    } else if(self->freq==0 && val==1){
     92e:	8c 81       	ldd	r24, Y+4	; 0x04
     930:	9d 81       	ldd	r25, Y+5	; 0x05
     932:	89 2b       	or	r24, r25
     934:	11 f5       	brne	.+68     	; 0x97a <update_F+0x96>
     936:	61 30       	cpi	r22, 0x01	; 1
     938:	71 05       	cpc	r23, r1
     93a:	f9 f4       	brne	.+62     	; 0x97a <update_F+0x96>
		if(self->first_call == 0) {
     93c:	8c 85       	ldd	r24, Y+12	; 0x0c
     93e:	9d 85       	ldd	r25, Y+13	; 0x0d
     940:	89 2b       	or	r24, r25
     942:	b1 f4       	brne	.+44     	; 0x970 <update_F+0x8c>
			self->first_call = 1;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	9d 87       	std	Y+13, r25	; 0x0d
     94a:	8c 87       	std	Y+12, r24	; 0x0c
			AFTER(MSEC(1000)/2,self,infinity,0); //since from 0 its guaranteed 1hz so call after 1sec 2),/,/
     94c:	c1 2c       	mov	r12, r1
     94e:	d1 2c       	mov	r13, r1
     950:	0f 2e       	mov	r0, r31
     952:	f7 e2       	ldi	r31, 0x27	; 39
     954:	ef 2e       	mov	r14, r31
     956:	f4 e0       	ldi	r31, 0x04	; 4
     958:	ff 2e       	mov	r15, r31
     95a:	f0 2d       	mov	r31, r0
     95c:	8e 01       	movw	r16, r28
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	a9 01       	movw	r20, r18
     964:	69 e0       	ldi	r22, 0x09	; 9
     966:	7d e3       	ldi	r23, 0x3D	; 61
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
		}
		self->freq += val;
     970:	8c 81       	ldd	r24, Y+4	; 0x04
     972:	9d 81       	ldd	r25, Y+5	; 0x05
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	9d 83       	std	Y+5, r25	; 0x05
     978:	8c 83       	std	Y+4, r24	; 0x04
	}
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	08 95       	ret

0000098c <save>:

void save(PulseGen *self) {
     98c:	fc 01       	movw	r30, r24
    self->saved_freq = self->freq;
     98e:	84 81       	ldd	r24, Z+4	; 0x04
     990:	95 81       	ldd	r25, Z+5	; 0x05
     992:	97 83       	std	Z+7, r25	; 0x07
     994:	86 83       	std	Z+6, r24	; 0x06
    self->freq = 0;
     996:	15 82       	std	Z+5, r1	; 0x05
     998:	14 82       	std	Z+4, r1	; 0x04
	self->first_call = 0; //so the pulse loop starts again
     99a:	15 86       	std	Z+13, r1	; 0x0d
     99c:	14 86       	std	Z+12, r1	; 0x0c
     99e:	08 95       	ret

000009a0 <metronome>:
 *  Author: Klas Mannberg
 */ 
#include "LCD.h"
#include "Pulser.h"
#include "avr/io.h"
void metronome(Pulser *self) {
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
	
	if (self->cont == 1) {
     9b2:	8c 81       	ldd	r24, Y+4	; 0x04
     9b4:	9d 81       	ldd	r25, Y+5	; 0x05
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	e9 f4       	brne	.+58     	; 0x9f4 <metronome+0x54>
		if ((PINB & 64) == 0) {
     9ba:	1e 99       	sbic	0x03, 6	; 3
     9bc:	0b c0       	rjmp	.+22     	; 0x9d4 <metronome+0x34>
			SYNC(self->LCD->curgen,update_F,1);
     9be:	ee 81       	ldd	r30, Y+6	; 0x06
     9c0:	ff 81       	ldd	r31, Y+7	; 0x07
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	62 e7       	ldi	r22, 0x72	; 114
     9c8:	74 e0       	ldi	r23, 0x04	; 4
     9ca:	80 85       	ldd	r24, Z+8	; 0x08
     9cc:	91 85       	ldd	r25, Z+9	; 0x09
     9ce:	0e 94 33 10 	call	0x2066	; 0x2066 <sync>
     9d2:	14 c0       	rjmp	.+40     	; 0x9fc <metronome+0x5c>
		}
		else if ((PINB & 128) == 0) {
     9d4:	1f 99       	sbic	0x03, 7	; 3
     9d6:	0b c0       	rjmp	.+22     	; 0x9ee <metronome+0x4e>
			SYNC(self->LCD->curgen,update_F,-1);
     9d8:	ee 81       	ldd	r30, Y+6	; 0x06
     9da:	ff 81       	ldd	r31, Y+7	; 0x07
     9dc:	4f ef       	ldi	r20, 0xFF	; 255
     9de:	5f ef       	ldi	r21, 0xFF	; 255
     9e0:	62 e7       	ldi	r22, 0x72	; 114
     9e2:	74 e0       	ldi	r23, 0x04	; 4
     9e4:	80 85       	ldd	r24, Z+8	; 0x08
     9e6:	91 85       	ldd	r25, Z+9	; 0x09
     9e8:	0e 94 33 10 	call	0x2066	; 0x2066 <sync>
     9ec:	07 c0       	rjmp	.+14     	; 0x9fc <metronome+0x5c>
		} else {
			self->cont = 0;
     9ee:	1d 82       	std	Y+5, r1	; 0x05
     9f0:	1c 82       	std	Y+4, r1	; 0x04
			return;
     9f2:	1e c0       	rjmp	.+60     	; 0xa30 <metronome+0x90>
		}
	}
	else {
		self->cont = 1;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	9d 83       	std	Y+5, r25	; 0x05
     9fa:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	SYNC(self->LCD,update_screen,1);
     9fc:	41 e0       	ldi	r20, 0x01	; 1
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	69 ee       	ldi	r22, 0xE9	; 233
     a02:	73 e0       	ldi	r23, 0x03	; 3
     a04:	8e 81       	ldd	r24, Y+6	; 0x06
     a06:	9f 81       	ldd	r25, Y+7	; 0x07
     a08:	0e 94 33 10 	call	0x2066	; 0x2066 <sync>
	AFTER(MSEC(200),self,metronome,0); // call on self with 200msec delay
     a0c:	c1 2c       	mov	r12, r1
     a0e:	d1 2c       	mov	r13, r1
     a10:	0f 2e       	mov	r0, r31
     a12:	f0 ed       	ldi	r31, 0xD0	; 208
     a14:	ef 2e       	mov	r14, r31
     a16:	f4 e0       	ldi	r31, 0x04	; 4
     a18:	ff 2e       	mov	r15, r31
     a1a:	f0 2d       	mov	r31, r0
     a1c:	8e 01       	movw	r16, r28
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	a9 01       	movw	r20, r18
     a24:	6a e6       	ldi	r22, 0x6A	; 106
     a26:	78 e1       	ldi	r23, 0x18	; 24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	08 95       	ret

00000a42 <initialize>:
    return now - (status ? current->msg->baseline : timestamp);
}

    
/* initialization */
static void initialize(void) {
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	00 d0       	rcall	.+0      	; 0xa48 <initialize+0x6>
     a48:	00 d0       	rcall	.+0      	; 0xa4a <initialize+0x8>
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	8f e0       	ldi	r24, 0x0F	; 15
     a50:	92 e0       	ldi	r25, 0x02	; 2
     a52:	2f ee       	ldi	r18, 0xEF	; 239
     a54:	32 e0       	ldi	r19, 0x02	; 2
     a56:	fc 01       	movw	r30, r24
     a58:	70 97       	sbiw	r30, 0x10	; 16
    int i;

    for (i=0; i<NMSGS-1; i++)
        messages[i].next = &messages[i+1];
     a5a:	91 83       	std	Z+1, r25	; 0x01
     a5c:	80 83       	st	Z, r24
     a5e:	40 96       	adiw	r24, 0x10	; 16
    
/* initialization */
static void initialize(void) {
    int i;

    for (i=0; i<NMSGS-1; i++)
     a60:	82 17       	cp	r24, r18
     a62:	93 07       	cpc	r25, r19
     a64:	c1 f7       	brne	.-16     	; 0xa56 <initialize+0x14>
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
     a66:	10 92 e0 02 	sts	0x02E0, r1
     a6a:	10 92 df 02 	sts	0x02DF, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
     a6e:	e7 e6       	ldi	r30, 0x67	; 103
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	f0 93 4b 01 	sts	0x014B, r31
     a76:	e0 93 4a 01 	sts	0x014A, r30
     a7a:	a4 e8       	ldi	r26, 0x84	; 132
     a7c:	b1 e0       	ldi	r27, 0x01	; 1
     a7e:	b1 83       	std	Z+1, r27	; 0x01
     a80:	a0 83       	st	Z, r26
     a82:	e1 ea       	ldi	r30, 0xA1	; 161
     a84:	f1 e0       	ldi	r31, 0x01	; 1
     a86:	ed 93       	st	X+, r30
     a88:	fc 93       	st	X, r31
    threads[NTHREADS-1].next = NULL;
     a8a:	11 82       	std	Z+1, r1	; 0x01
     a8c:	10 82       	st	Z, r1
     a8e:	80 e5       	ldi	r24, 0x50	; 80
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	9a 83       	std	Y+2, r25	; 0x02
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	eb e4       	ldi	r30, 0x4B	; 75
     a98:	f3 e0       	ldi	r31, 0x03	; 3
     a9a:	fc 83       	std	Y+4, r31	; 0x04
     a9c:	eb 83       	std	Y+3, r30	; 0x03
    
    for (i=0; i<NTHREADS; i++) {
        setjmp( threads[i].context );
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	9a 81       	ldd	r25, Y+2	; 0x02
     aa2:	0e 94 bb 11 	call	0x2376	; 0x2376 <setjmp>
        SETSTACK( &threads[i].context, &stacks[i] );
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	9c 81       	ldd	r25, Y+4	; 0x04
     aaa:	e9 81       	ldd	r30, Y+1	; 0x01
     aac:	fa 81       	ldd	r31, Y+2	; 0x02
     aae:	91 8b       	std	Z+17, r25	; 0x11
     ab0:	80 8b       	std	Z+16, r24	; 0x10
     ab2:	93 8b       	std	Z+19, r25	; 0x13
     ab4:	82 8b       	std	Z+18, r24	; 0x12
        SETPC( &threads[i].context, run );
     ab6:	89 ec       	ldi	r24, 0xC9	; 201
     ab8:	90 e1       	ldi	r25, 0x10	; 16
     aba:	96 8b       	std	Z+22, r25	; 0x16
     abc:	85 8b       	std	Z+21, r24	; 0x15
     abe:	32 97       	sbiw	r30, 0x02	; 2
        threads[i].waitsFor = NULL;
     ac0:	11 82       	std	Z+1, r1	; 0x01
     ac2:	10 82       	st	Z, r1
     ac4:	e9 81       	ldd	r30, Y+1	; 0x01
     ac6:	fa 81       	ldd	r31, Y+2	; 0x02
     ac8:	7d 96       	adiw	r30, 0x1d	; 29
     aca:	fa 83       	std	Y+2, r31	; 0x02
     acc:	e9 83       	std	Y+1, r30	; 0x01
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	9c 81       	ldd	r25, Y+4	; 0x04
     ad2:	80 5a       	subi	r24, 0xA0	; 160
     ad4:	9f 4f       	sbci	r25, 0xFF	; 255
     ad6:	9c 83       	std	Y+4, r25	; 0x04
     ad8:	8b 83       	std	Y+3, r24	; 0x03
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
     ada:	e4 5c       	subi	r30, 0xC4	; 196
     adc:	f1 40       	sbci	r31, 0x01	; 1
     ade:	f9 f6       	brne	.-66     	; 0xa9e <initialize+0x5c>
        SETSTACK( &threads[i].context, &stacks[i] );
        SETPC( &threads[i].context, run );
        threads[i].waitsFor = NULL;
    }

    thread0.next = NULL;
     ae0:	10 92 e3 01 	sts	0x01E3, r1
     ae4:	10 92 e2 01 	sts	0x01E2, r1
    thread0.waitsFor = NULL;
     ae8:	10 92 e7 01 	sts	0x01E7, r1
     aec:	10 92 e6 01 	sts	0x01E6, r1
    thread0.msg = NULL;
     af0:	10 92 e5 01 	sts	0x01E5, r1
     af4:	10 92 e4 01 	sts	0x01E4, r1
    
    TIMER_INIT();
     af8:	e1 e6       	ldi	r30, 0x61	; 97
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 e8       	ldi	r24, 0x80	; 128
     afe:	80 83       	st	Z, r24
     b00:	10 82       	st	Z, r1
     b02:	10 92 85 00 	sts	0x0085, r1
     b06:	10 92 84 00 	sts	0x0084, r1
     b0a:	84 e0       	ldi	r24, 0x04	; 4
     b0c:	80 93 81 00 	sts	0x0081, r24
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	80 93 6f 00 	sts	0x006F, r24
}
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <dispatch>:
    TIMERSET(timerQ);
    schedule();
}

/* context switching */
static void dispatch( Thread next ) {
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	00 d0       	rcall	.+0      	; 0xb2a <dispatch+0x6>
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	9a 83       	std	Y+2, r25	; 0x02
     b30:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp( current->context ) == 0) {
     b32:	80 91 00 01 	lds	r24, 0x0100
     b36:	90 91 01 01 	lds	r25, 0x0101
     b3a:	06 96       	adiw	r24, 0x06	; 6
     b3c:	0e 94 bb 11 	call	0x2376	; 0x2376 <setjmp>
     b40:	89 2b       	or	r24, r25
     b42:	59 f4       	brne	.+22     	; 0xb5a <dispatch+0x36>
        current = next;
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	9a 81       	ldd	r25, Y+2	; 0x02
     b48:	90 93 01 01 	sts	0x0101, r25
     b4c:	80 93 00 01 	sts	0x0100, r24
        longjmp( next->context, 1 );
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	06 96       	adiw	r24, 0x06	; 6
     b56:	0e 94 db 11 	call	0x23b6	; 0x23b6 <longjmp>
    }
}
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <schedule>:
    while (1) {
        SLEEP();
    }
}

static void schedule(void) {
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
    Msg topMsg = activeStack->msg;
     b6c:	e0 91 02 01 	lds	r30, 0x0102
     b70:	f0 91 03 01 	lds	r31, 0x0103
     b74:	c2 81       	ldd	r28, Z+2	; 0x02
     b76:	d3 81       	ldd	r29, Z+3	; 0x03
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
     b78:	a0 91 24 01 	lds	r26, 0x0124
     b7c:	b0 91 25 01 	lds	r27, 0x0125
     b80:	10 97       	sbiw	r26, 0x00	; 0
     b82:	39 f1       	breq	.+78     	; 0xbd2 <schedule+0x6e>
     b84:	80 91 04 01 	lds	r24, 0x0104
     b88:	90 91 05 01 	lds	r25, 0x0105
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	09 f1       	breq	.+66     	; 0xbd2 <schedule+0x6e>
     b90:	20 97       	sbiw	r28, 0x00	; 0
     b92:	79 f0       	breq	.+30     	; 0xbb2 <schedule+0x4e>
     b94:	16 96       	adiw	r26, 0x06	; 6
     b96:	4d 91       	ld	r20, X+
     b98:	5d 91       	ld	r21, X+
     b9a:	6d 91       	ld	r22, X+
     b9c:	7c 91       	ld	r23, X
     b9e:	19 97       	sbiw	r26, 0x09	; 9
     ba0:	0e 81       	ldd	r16, Y+6	; 0x06
     ba2:	1f 81       	ldd	r17, Y+7	; 0x07
     ba4:	28 85       	ldd	r18, Y+8	; 0x08
     ba6:	39 85       	ldd	r19, Y+9	; 0x09
     ba8:	40 1b       	sub	r20, r16
     baa:	51 0b       	sbc	r21, r17
     bac:	62 0b       	sbc	r22, r18
     bae:	73 0b       	sbc	r23, r19
     bb0:	82 f4       	brpl	.+32     	; 0xbd2 <schedule+0x6e>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
     bb2:	dc 01       	movw	r26, r24
     bb4:	2d 91       	ld	r18, X+
     bb6:	3c 91       	ld	r19, X
     bb8:	11 97       	sbiw	r26, 0x01	; 1
     bba:	30 93 05 01 	sts	0x0105, r19
     bbe:	20 93 04 01 	sts	0x0104, r18
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
     bc2:	ed 93       	st	X+, r30
     bc4:	fc 93       	st	X, r31
    *stack = t;
     bc6:	90 93 03 01 	sts	0x0103, r25
     bca:	80 93 02 01 	sts	0x0102, r24

static void schedule(void) {
    Msg topMsg = activeStack->msg;
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
        push(pop(&threadPool), &activeStack);
        dispatch(activeStack);
     bce:	0e 94 92 05 	call	0xb24	; 0xb24 <dispatch>
    }
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <__vector_1>:
#define TIMER_COMPARE_INTERRUPT  ISR(TIMER1_COMPA_vect)
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	6f 93       	push	r22
     bf0:	7f 93       	push	r23
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
     bfe:	20 91 1c 01 	lds	r18, 0x011C
     c02:	30 91 1d 01 	lds	r19, 0x011D
     c06:	40 91 84 00 	lds	r20, 0x0084
     c0a:	50 91 85 00 	lds	r21, 0x0085
     c0e:	c9 01       	movw	r24, r18
     c10:	aa 27       	eor	r26, r26
     c12:	97 fd       	sbrc	r25, 7
     c14:	a0 95       	com	r26
     c16:	ba 2f       	mov	r27, r26
     c18:	dc 01       	movw	r26, r24
     c1a:	99 27       	eor	r25, r25
     c1c:	88 27       	eor	r24, r24
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	84 2b       	or	r24, r20
     c24:	95 2b       	or	r25, r21
     c26:	a6 2b       	or	r26, r22
     c28:	b7 2b       	or	r27, r23
     c2a:	80 93 1e 01 	sts	0x011E, r24
     c2e:	90 93 1f 01 	sts	0x011F, r25
     c32:	a0 93 20 01 	sts	0x0120, r26
     c36:	b0 93 21 01 	sts	0x0121, r27
     c3a:	b0 9b       	sbis	0x16, 0	; 22
     c3c:	1b c0       	rjmp	.+54     	; 0xc74 <__vector_1+0x98>
     c3e:	40 91 84 00 	lds	r20, 0x0084
     c42:	50 91 85 00 	lds	r21, 0x0085
     c46:	c9 01       	movw	r24, r18
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	aa 27       	eor	r26, r26
     c4c:	97 fd       	sbrc	r25, 7
     c4e:	a0 95       	com	r26
     c50:	ba 2f       	mov	r27, r26
     c52:	dc 01       	movw	r26, r24
     c54:	99 27       	eor	r25, r25
     c56:	88 27       	eor	r24, r24
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	84 2b       	or	r24, r20
     c5e:	95 2b       	or	r25, r21
     c60:	a6 2b       	or	r26, r22
     c62:	b7 2b       	or	r27, r23
     c64:	80 93 1e 01 	sts	0x011E, r24
     c68:	90 93 1f 01 	sts	0x011F, r25
     c6c:	a0 93 20 01 	sts	0x0120, r26
     c70:	b0 93 21 01 	sts	0x0121, r27
     c74:	e0 91 be 01 	lds	r30, 0x01BE
     c78:	f0 91 bf 01 	lds	r31, 0x01BF
     c7c:	30 97       	sbiw	r30, 0x00	; 0
     c7e:	39 f0       	breq	.+14     	; 0xc8e <__vector_1+0xb2>
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 91 26 01 	lds	r24, 0x0126
     c88:	90 91 27 01 	lds	r25, 0x0127
     c8c:	09 95       	icall
     c8e:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
     c92:	ff 91       	pop	r31
     c94:	ef 91       	pop	r30
     c96:	bf 91       	pop	r27
     c98:	af 91       	pop	r26
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	7f 91       	pop	r23
     ca0:	6f 91       	pop	r22
     ca2:	5f 91       	pop	r21
     ca4:	4f 91       	pop	r20
     ca6:	3f 91       	pop	r19
     ca8:	2f 91       	pop	r18
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0
     cb0:	1f 90       	pop	r1
     cb2:	18 95       	reti

00000cb4 <__vector_2>:
IRQ(IRQ_PCINT0,          PCINT0_vect);
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	2f 93       	push	r18
     cc0:	3f 93       	push	r19
     cc2:	4f 93       	push	r20
     cc4:	5f 93       	push	r21
     cc6:	6f 93       	push	r22
     cc8:	7f 93       	push	r23
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
     cd6:	20 91 1c 01 	lds	r18, 0x011C
     cda:	30 91 1d 01 	lds	r19, 0x011D
     cde:	40 91 84 00 	lds	r20, 0x0084
     ce2:	50 91 85 00 	lds	r21, 0x0085
     ce6:	c9 01       	movw	r24, r18
     ce8:	aa 27       	eor	r26, r26
     cea:	97 fd       	sbrc	r25, 7
     cec:	a0 95       	com	r26
     cee:	ba 2f       	mov	r27, r26
     cf0:	dc 01       	movw	r26, r24
     cf2:	99 27       	eor	r25, r25
     cf4:	88 27       	eor	r24, r24
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	84 2b       	or	r24, r20
     cfc:	95 2b       	or	r25, r21
     cfe:	a6 2b       	or	r26, r22
     d00:	b7 2b       	or	r27, r23
     d02:	80 93 1e 01 	sts	0x011E, r24
     d06:	90 93 1f 01 	sts	0x011F, r25
     d0a:	a0 93 20 01 	sts	0x0120, r26
     d0e:	b0 93 21 01 	sts	0x0121, r27
     d12:	b0 9b       	sbis	0x16, 0	; 22
     d14:	1b c0       	rjmp	.+54     	; 0xd4c <__vector_2+0x98>
     d16:	40 91 84 00 	lds	r20, 0x0084
     d1a:	50 91 85 00 	lds	r21, 0x0085
     d1e:	c9 01       	movw	r24, r18
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	aa 27       	eor	r26, r26
     d24:	97 fd       	sbrc	r25, 7
     d26:	a0 95       	com	r26
     d28:	ba 2f       	mov	r27, r26
     d2a:	dc 01       	movw	r26, r24
     d2c:	99 27       	eor	r25, r25
     d2e:	88 27       	eor	r24, r24
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	84 2b       	or	r24, r20
     d36:	95 2b       	or	r25, r21
     d38:	a6 2b       	or	r26, r22
     d3a:	b7 2b       	or	r27, r23
     d3c:	80 93 1e 01 	sts	0x011E, r24
     d40:	90 93 1f 01 	sts	0x011F, r25
     d44:	a0 93 20 01 	sts	0x0120, r26
     d48:	b0 93 21 01 	sts	0x0121, r27
     d4c:	e0 91 c0 01 	lds	r30, 0x01C0
     d50:	f0 91 c1 01 	lds	r31, 0x01C1
     d54:	30 97       	sbiw	r30, 0x00	; 0
     d56:	39 f0       	breq	.+14     	; 0xd66 <__vector_2+0xb2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	80 91 28 01 	lds	r24, 0x0128
     d60:	90 91 29 01 	lds	r25, 0x0129
     d64:	09 95       	icall
     d66:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__vector_3>:
IRQ(IRQ_PCINT1,          PCINT1_vect);
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
     dae:	20 91 1c 01 	lds	r18, 0x011C
     db2:	30 91 1d 01 	lds	r19, 0x011D
     db6:	40 91 84 00 	lds	r20, 0x0084
     dba:	50 91 85 00 	lds	r21, 0x0085
     dbe:	c9 01       	movw	r24, r18
     dc0:	aa 27       	eor	r26, r26
     dc2:	97 fd       	sbrc	r25, 7
     dc4:	a0 95       	com	r26
     dc6:	ba 2f       	mov	r27, r26
     dc8:	dc 01       	movw	r26, r24
     dca:	99 27       	eor	r25, r25
     dcc:	88 27       	eor	r24, r24
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	84 2b       	or	r24, r20
     dd4:	95 2b       	or	r25, r21
     dd6:	a6 2b       	or	r26, r22
     dd8:	b7 2b       	or	r27, r23
     dda:	80 93 1e 01 	sts	0x011E, r24
     dde:	90 93 1f 01 	sts	0x011F, r25
     de2:	a0 93 20 01 	sts	0x0120, r26
     de6:	b0 93 21 01 	sts	0x0121, r27
     dea:	b0 9b       	sbis	0x16, 0	; 22
     dec:	1b c0       	rjmp	.+54     	; 0xe24 <__vector_3+0x98>
     dee:	40 91 84 00 	lds	r20, 0x0084
     df2:	50 91 85 00 	lds	r21, 0x0085
     df6:	c9 01       	movw	r24, r18
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	aa 27       	eor	r26, r26
     dfc:	97 fd       	sbrc	r25, 7
     dfe:	a0 95       	com	r26
     e00:	ba 2f       	mov	r27, r26
     e02:	dc 01       	movw	r26, r24
     e04:	99 27       	eor	r25, r25
     e06:	88 27       	eor	r24, r24
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	84 2b       	or	r24, r20
     e0e:	95 2b       	or	r25, r21
     e10:	a6 2b       	or	r26, r22
     e12:	b7 2b       	or	r27, r23
     e14:	80 93 1e 01 	sts	0x011E, r24
     e18:	90 93 1f 01 	sts	0x011F, r25
     e1c:	a0 93 20 01 	sts	0x0120, r26
     e20:	b0 93 21 01 	sts	0x0121, r27
     e24:	e0 91 c2 01 	lds	r30, 0x01C2
     e28:	f0 91 c3 01 	lds	r31, 0x01C3
     e2c:	30 97       	sbiw	r30, 0x00	; 0
     e2e:	39 f0       	breq	.+14     	; 0xe3e <__vector_3+0xb2>
     e30:	62 e0       	ldi	r22, 0x02	; 2
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	80 91 2a 01 	lds	r24, 0x012A
     e38:	90 91 2b 01 	lds	r25, 0x012B
     e3c:	09 95       	icall
     e3e:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
     e42:	ff 91       	pop	r31
     e44:	ef 91       	pop	r30
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <__vector_4>:
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	20 91 1c 01 	lds	r18, 0x011C
     e8a:	30 91 1d 01 	lds	r19, 0x011D
     e8e:	40 91 84 00 	lds	r20, 0x0084
     e92:	50 91 85 00 	lds	r21, 0x0085
     e96:	c9 01       	movw	r24, r18
     e98:	aa 27       	eor	r26, r26
     e9a:	97 fd       	sbrc	r25, 7
     e9c:	a0 95       	com	r26
     e9e:	ba 2f       	mov	r27, r26
     ea0:	dc 01       	movw	r26, r24
     ea2:	99 27       	eor	r25, r25
     ea4:	88 27       	eor	r24, r24
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	84 2b       	or	r24, r20
     eac:	95 2b       	or	r25, r21
     eae:	a6 2b       	or	r26, r22
     eb0:	b7 2b       	or	r27, r23
     eb2:	80 93 1e 01 	sts	0x011E, r24
     eb6:	90 93 1f 01 	sts	0x011F, r25
     eba:	a0 93 20 01 	sts	0x0120, r26
     ebe:	b0 93 21 01 	sts	0x0121, r27
     ec2:	b0 9b       	sbis	0x16, 0	; 22
     ec4:	1b c0       	rjmp	.+54     	; 0xefc <__vector_4+0x98>
     ec6:	40 91 84 00 	lds	r20, 0x0084
     eca:	50 91 85 00 	lds	r21, 0x0085
     ece:	c9 01       	movw	r24, r18
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	aa 27       	eor	r26, r26
     ed4:	97 fd       	sbrc	r25, 7
     ed6:	a0 95       	com	r26
     ed8:	ba 2f       	mov	r27, r26
     eda:	dc 01       	movw	r26, r24
     edc:	99 27       	eor	r25, r25
     ede:	88 27       	eor	r24, r24
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	84 2b       	or	r24, r20
     ee6:	95 2b       	or	r25, r21
     ee8:	a6 2b       	or	r26, r22
     eea:	b7 2b       	or	r27, r23
     eec:	80 93 1e 01 	sts	0x011E, r24
     ef0:	90 93 1f 01 	sts	0x011F, r25
     ef4:	a0 93 20 01 	sts	0x0120, r26
     ef8:	b0 93 21 01 	sts	0x0121, r27
     efc:	e0 91 c4 01 	lds	r30, 0x01C4
     f00:	f0 91 c5 01 	lds	r31, 0x01C5
     f04:	30 97       	sbiw	r30, 0x00	; 0
     f06:	39 f0       	breq	.+14     	; 0xf16 <__vector_4+0xb2>
     f08:	63 e0       	ldi	r22, 0x03	; 3
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	80 91 2c 01 	lds	r24, 0x012C
     f10:	90 91 2d 01 	lds	r25, 0x012D
     f14:	09 95       	icall
     f16:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
     f1a:	ff 91       	pop	r31
     f1c:	ef 91       	pop	r30
     f1e:	bf 91       	pop	r27
     f20:	af 91       	pop	r26
     f22:	9f 91       	pop	r25
     f24:	8f 91       	pop	r24
     f26:	7f 91       	pop	r23
     f28:	6f 91       	pop	r22
     f2a:	5f 91       	pop	r21
     f2c:	4f 91       	pop	r20
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti

00000f3c <__vector_5>:
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
     f5e:	20 91 1c 01 	lds	r18, 0x011C
     f62:	30 91 1d 01 	lds	r19, 0x011D
     f66:	40 91 84 00 	lds	r20, 0x0084
     f6a:	50 91 85 00 	lds	r21, 0x0085
     f6e:	c9 01       	movw	r24, r18
     f70:	aa 27       	eor	r26, r26
     f72:	97 fd       	sbrc	r25, 7
     f74:	a0 95       	com	r26
     f76:	ba 2f       	mov	r27, r26
     f78:	dc 01       	movw	r26, r24
     f7a:	99 27       	eor	r25, r25
     f7c:	88 27       	eor	r24, r24
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	84 2b       	or	r24, r20
     f84:	95 2b       	or	r25, r21
     f86:	a6 2b       	or	r26, r22
     f88:	b7 2b       	or	r27, r23
     f8a:	80 93 1e 01 	sts	0x011E, r24
     f8e:	90 93 1f 01 	sts	0x011F, r25
     f92:	a0 93 20 01 	sts	0x0120, r26
     f96:	b0 93 21 01 	sts	0x0121, r27
     f9a:	b0 9b       	sbis	0x16, 0	; 22
     f9c:	1b c0       	rjmp	.+54     	; 0xfd4 <__vector_5+0x98>
     f9e:	40 91 84 00 	lds	r20, 0x0084
     fa2:	50 91 85 00 	lds	r21, 0x0085
     fa6:	c9 01       	movw	r24, r18
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	aa 27       	eor	r26, r26
     fac:	97 fd       	sbrc	r25, 7
     fae:	a0 95       	com	r26
     fb0:	ba 2f       	mov	r27, r26
     fb2:	dc 01       	movw	r26, r24
     fb4:	99 27       	eor	r25, r25
     fb6:	88 27       	eor	r24, r24
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	84 2b       	or	r24, r20
     fbe:	95 2b       	or	r25, r21
     fc0:	a6 2b       	or	r26, r22
     fc2:	b7 2b       	or	r27, r23
     fc4:	80 93 1e 01 	sts	0x011E, r24
     fc8:	90 93 1f 01 	sts	0x011F, r25
     fcc:	a0 93 20 01 	sts	0x0120, r26
     fd0:	b0 93 21 01 	sts	0x0121, r27
     fd4:	e0 91 c6 01 	lds	r30, 0x01C6
     fd8:	f0 91 c7 01 	lds	r31, 0x01C7
     fdc:	30 97       	sbiw	r30, 0x00	; 0
     fde:	39 f0       	breq	.+14     	; 0xfee <__vector_5+0xb2>
     fe0:	64 e0       	ldi	r22, 0x04	; 4
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	80 91 2e 01 	lds	r24, 0x012E
     fe8:	90 91 2f 01 	lds	r25, 0x012F
     fec:	09 95       	icall
     fee:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <__vector_10>:
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
    1036:	20 91 1c 01 	lds	r18, 0x011C
    103a:	30 91 1d 01 	lds	r19, 0x011D
    103e:	40 91 84 00 	lds	r20, 0x0084
    1042:	50 91 85 00 	lds	r21, 0x0085
    1046:	c9 01       	movw	r24, r18
    1048:	aa 27       	eor	r26, r26
    104a:	97 fd       	sbrc	r25, 7
    104c:	a0 95       	com	r26
    104e:	ba 2f       	mov	r27, r26
    1050:	dc 01       	movw	r26, r24
    1052:	99 27       	eor	r25, r25
    1054:	88 27       	eor	r24, r24
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	84 2b       	or	r24, r20
    105c:	95 2b       	or	r25, r21
    105e:	a6 2b       	or	r26, r22
    1060:	b7 2b       	or	r27, r23
    1062:	80 93 1e 01 	sts	0x011E, r24
    1066:	90 93 1f 01 	sts	0x011F, r25
    106a:	a0 93 20 01 	sts	0x0120, r26
    106e:	b0 93 21 01 	sts	0x0121, r27
    1072:	b0 9b       	sbis	0x16, 0	; 22
    1074:	1b c0       	rjmp	.+54     	; 0x10ac <__vector_10+0x98>
    1076:	40 91 84 00 	lds	r20, 0x0084
    107a:	50 91 85 00 	lds	r21, 0x0085
    107e:	c9 01       	movw	r24, r18
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	aa 27       	eor	r26, r26
    1084:	97 fd       	sbrc	r25, 7
    1086:	a0 95       	com	r26
    1088:	ba 2f       	mov	r27, r26
    108a:	dc 01       	movw	r26, r24
    108c:	99 27       	eor	r25, r25
    108e:	88 27       	eor	r24, r24
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	84 2b       	or	r24, r20
    1096:	95 2b       	or	r25, r21
    1098:	a6 2b       	or	r26, r22
    109a:	b7 2b       	or	r27, r23
    109c:	80 93 1e 01 	sts	0x011E, r24
    10a0:	90 93 1f 01 	sts	0x011F, r25
    10a4:	a0 93 20 01 	sts	0x0120, r26
    10a8:	b0 93 21 01 	sts	0x0121, r27
    10ac:	e0 91 c8 01 	lds	r30, 0x01C8
    10b0:	f0 91 c9 01 	lds	r31, 0x01C9
    10b4:	30 97       	sbiw	r30, 0x00	; 0
    10b6:	39 f0       	breq	.+14     	; 0x10c6 <__vector_10+0xb2>
    10b8:	65 e0       	ldi	r22, 0x05	; 5
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	80 91 30 01 	lds	r24, 0x0130
    10c0:	90 91 31 01 	lds	r25, 0x0131
    10c4:	09 95       	icall
    10c6:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    10ca:	ff 91       	pop	r31
    10cc:	ef 91       	pop	r30
    10ce:	bf 91       	pop	r27
    10d0:	af 91       	pop	r26
    10d2:	9f 91       	pop	r25
    10d4:	8f 91       	pop	r24
    10d6:	7f 91       	pop	r23
    10d8:	6f 91       	pop	r22
    10da:	5f 91       	pop	r21
    10dc:	4f 91       	pop	r20
    10de:	3f 91       	pop	r19
    10e0:	2f 91       	pop	r18
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <__vector_11>:
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	2f 93       	push	r18
    10f8:	3f 93       	push	r19
    10fa:	4f 93       	push	r20
    10fc:	5f 93       	push	r21
    10fe:	6f 93       	push	r22
    1100:	7f 93       	push	r23
    1102:	8f 93       	push	r24
    1104:	9f 93       	push	r25
    1106:	af 93       	push	r26
    1108:	bf 93       	push	r27
    110a:	ef 93       	push	r30
    110c:	ff 93       	push	r31
    110e:	20 91 1c 01 	lds	r18, 0x011C
    1112:	30 91 1d 01 	lds	r19, 0x011D
    1116:	40 91 84 00 	lds	r20, 0x0084
    111a:	50 91 85 00 	lds	r21, 0x0085
    111e:	c9 01       	movw	r24, r18
    1120:	aa 27       	eor	r26, r26
    1122:	97 fd       	sbrc	r25, 7
    1124:	a0 95       	com	r26
    1126:	ba 2f       	mov	r27, r26
    1128:	dc 01       	movw	r26, r24
    112a:	99 27       	eor	r25, r25
    112c:	88 27       	eor	r24, r24
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	84 2b       	or	r24, r20
    1134:	95 2b       	or	r25, r21
    1136:	a6 2b       	or	r26, r22
    1138:	b7 2b       	or	r27, r23
    113a:	80 93 1e 01 	sts	0x011E, r24
    113e:	90 93 1f 01 	sts	0x011F, r25
    1142:	a0 93 20 01 	sts	0x0120, r26
    1146:	b0 93 21 01 	sts	0x0121, r27
    114a:	b0 9b       	sbis	0x16, 0	; 22
    114c:	1b c0       	rjmp	.+54     	; 0x1184 <__vector_11+0x98>
    114e:	40 91 84 00 	lds	r20, 0x0084
    1152:	50 91 85 00 	lds	r21, 0x0085
    1156:	c9 01       	movw	r24, r18
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	aa 27       	eor	r26, r26
    115c:	97 fd       	sbrc	r25, 7
    115e:	a0 95       	com	r26
    1160:	ba 2f       	mov	r27, r26
    1162:	dc 01       	movw	r26, r24
    1164:	99 27       	eor	r25, r25
    1166:	88 27       	eor	r24, r24
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	84 2b       	or	r24, r20
    116e:	95 2b       	or	r25, r21
    1170:	a6 2b       	or	r26, r22
    1172:	b7 2b       	or	r27, r23
    1174:	80 93 1e 01 	sts	0x011E, r24
    1178:	90 93 1f 01 	sts	0x011F, r25
    117c:	a0 93 20 01 	sts	0x0120, r26
    1180:	b0 93 21 01 	sts	0x0121, r27
    1184:	e0 91 ca 01 	lds	r30, 0x01CA
    1188:	f0 91 cb 01 	lds	r31, 0x01CB
    118c:	30 97       	sbiw	r30, 0x00	; 0
    118e:	39 f0       	breq	.+14     	; 0x119e <__vector_11+0xb2>
    1190:	66 e0       	ldi	r22, 0x06	; 6
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	80 91 32 01 	lds	r24, 0x0132
    1198:	90 91 33 01 	lds	r25, 0x0133
    119c:	09 95       	icall
    119e:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    11a2:	ff 91       	pop	r31
    11a4:	ef 91       	pop	r30
    11a6:	bf 91       	pop	r27
    11a8:	af 91       	pop	r26
    11aa:	9f 91       	pop	r25
    11ac:	8f 91       	pop	r24
    11ae:	7f 91       	pop	r23
    11b0:	6f 91       	pop	r22
    11b2:	5f 91       	pop	r21
    11b4:	4f 91       	pop	r20
    11b6:	3f 91       	pop	r19
    11b8:	2f 91       	pop	r18
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <__vector_12>:
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	11 24       	eor	r1, r1
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
    11e6:	20 91 1c 01 	lds	r18, 0x011C
    11ea:	30 91 1d 01 	lds	r19, 0x011D
    11ee:	40 91 84 00 	lds	r20, 0x0084
    11f2:	50 91 85 00 	lds	r21, 0x0085
    11f6:	c9 01       	movw	r24, r18
    11f8:	aa 27       	eor	r26, r26
    11fa:	97 fd       	sbrc	r25, 7
    11fc:	a0 95       	com	r26
    11fe:	ba 2f       	mov	r27, r26
    1200:	dc 01       	movw	r26, r24
    1202:	99 27       	eor	r25, r25
    1204:	88 27       	eor	r24, r24
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	84 2b       	or	r24, r20
    120c:	95 2b       	or	r25, r21
    120e:	a6 2b       	or	r26, r22
    1210:	b7 2b       	or	r27, r23
    1212:	80 93 1e 01 	sts	0x011E, r24
    1216:	90 93 1f 01 	sts	0x011F, r25
    121a:	a0 93 20 01 	sts	0x0120, r26
    121e:	b0 93 21 01 	sts	0x0121, r27
    1222:	b0 9b       	sbis	0x16, 0	; 22
    1224:	1b c0       	rjmp	.+54     	; 0x125c <__vector_12+0x98>
    1226:	40 91 84 00 	lds	r20, 0x0084
    122a:	50 91 85 00 	lds	r21, 0x0085
    122e:	c9 01       	movw	r24, r18
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	aa 27       	eor	r26, r26
    1234:	97 fd       	sbrc	r25, 7
    1236:	a0 95       	com	r26
    1238:	ba 2f       	mov	r27, r26
    123a:	dc 01       	movw	r26, r24
    123c:	99 27       	eor	r25, r25
    123e:	88 27       	eor	r24, r24
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	84 2b       	or	r24, r20
    1246:	95 2b       	or	r25, r21
    1248:	a6 2b       	or	r26, r22
    124a:	b7 2b       	or	r27, r23
    124c:	80 93 1e 01 	sts	0x011E, r24
    1250:	90 93 1f 01 	sts	0x011F, r25
    1254:	a0 93 20 01 	sts	0x0120, r26
    1258:	b0 93 21 01 	sts	0x0121, r27
    125c:	e0 91 cc 01 	lds	r30, 0x01CC
    1260:	f0 91 cd 01 	lds	r31, 0x01CD
    1264:	30 97       	sbiw	r30, 0x00	; 0
    1266:	39 f0       	breq	.+14     	; 0x1276 <__vector_12+0xb2>
    1268:	67 e0       	ldi	r22, 0x07	; 7
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	80 91 34 01 	lds	r24, 0x0134
    1270:	90 91 35 01 	lds	r25, 0x0135
    1274:	09 95       	icall
    1276:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    127a:	ff 91       	pop	r31
    127c:	ef 91       	pop	r30
    127e:	bf 91       	pop	r27
    1280:	af 91       	pop	r26
    1282:	9f 91       	pop	r25
    1284:	8f 91       	pop	r24
    1286:	7f 91       	pop	r23
    1288:	6f 91       	pop	r22
    128a:	5f 91       	pop	r21
    128c:	4f 91       	pop	r20
    128e:	3f 91       	pop	r19
    1290:	2f 91       	pop	r18
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	0f 90       	pop	r0
    1298:	1f 90       	pop	r1
    129a:	18 95       	reti

0000129c <__vector_13>:
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	2f 93       	push	r18
    12a8:	3f 93       	push	r19
    12aa:	4f 93       	push	r20
    12ac:	5f 93       	push	r21
    12ae:	6f 93       	push	r22
    12b0:	7f 93       	push	r23
    12b2:	8f 93       	push	r24
    12b4:	9f 93       	push	r25
    12b6:	af 93       	push	r26
    12b8:	bf 93       	push	r27
    12ba:	ef 93       	push	r30
    12bc:	ff 93       	push	r31
    12be:	20 91 1c 01 	lds	r18, 0x011C
    12c2:	30 91 1d 01 	lds	r19, 0x011D
    12c6:	40 91 84 00 	lds	r20, 0x0084
    12ca:	50 91 85 00 	lds	r21, 0x0085
    12ce:	c9 01       	movw	r24, r18
    12d0:	aa 27       	eor	r26, r26
    12d2:	97 fd       	sbrc	r25, 7
    12d4:	a0 95       	com	r26
    12d6:	ba 2f       	mov	r27, r26
    12d8:	dc 01       	movw	r26, r24
    12da:	99 27       	eor	r25, r25
    12dc:	88 27       	eor	r24, r24
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	84 2b       	or	r24, r20
    12e4:	95 2b       	or	r25, r21
    12e6:	a6 2b       	or	r26, r22
    12e8:	b7 2b       	or	r27, r23
    12ea:	80 93 1e 01 	sts	0x011E, r24
    12ee:	90 93 1f 01 	sts	0x011F, r25
    12f2:	a0 93 20 01 	sts	0x0120, r26
    12f6:	b0 93 21 01 	sts	0x0121, r27
    12fa:	b0 9b       	sbis	0x16, 0	; 22
    12fc:	1b c0       	rjmp	.+54     	; 0x1334 <__vector_13+0x98>
    12fe:	40 91 84 00 	lds	r20, 0x0084
    1302:	50 91 85 00 	lds	r21, 0x0085
    1306:	c9 01       	movw	r24, r18
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	aa 27       	eor	r26, r26
    130c:	97 fd       	sbrc	r25, 7
    130e:	a0 95       	com	r26
    1310:	ba 2f       	mov	r27, r26
    1312:	dc 01       	movw	r26, r24
    1314:	99 27       	eor	r25, r25
    1316:	88 27       	eor	r24, r24
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	84 2b       	or	r24, r20
    131e:	95 2b       	or	r25, r21
    1320:	a6 2b       	or	r26, r22
    1322:	b7 2b       	or	r27, r23
    1324:	80 93 1e 01 	sts	0x011E, r24
    1328:	90 93 1f 01 	sts	0x011F, r25
    132c:	a0 93 20 01 	sts	0x0120, r26
    1330:	b0 93 21 01 	sts	0x0121, r27
    1334:	e0 91 ce 01 	lds	r30, 0x01CE
    1338:	f0 91 cf 01 	lds	r31, 0x01CF
    133c:	30 97       	sbiw	r30, 0x00	; 0
    133e:	39 f0       	breq	.+14     	; 0x134e <__vector_13+0xb2>
    1340:	68 e0       	ldi	r22, 0x08	; 8
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	80 91 36 01 	lds	r24, 0x0136
    1348:	90 91 37 01 	lds	r25, 0x0137
    134c:	09 95       	icall
    134e:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1352:	ff 91       	pop	r31
    1354:	ef 91       	pop	r30
    1356:	bf 91       	pop	r27
    1358:	af 91       	pop	r26
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	7f 91       	pop	r23
    1360:	6f 91       	pop	r22
    1362:	5f 91       	pop	r21
    1364:	4f 91       	pop	r20
    1366:	3f 91       	pop	r19
    1368:	2f 91       	pop	r18
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_14>:
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	11 24       	eor	r1, r1
    137e:	2f 93       	push	r18
    1380:	3f 93       	push	r19
    1382:	4f 93       	push	r20
    1384:	5f 93       	push	r21
    1386:	6f 93       	push	r22
    1388:	7f 93       	push	r23
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25
    138e:	af 93       	push	r26
    1390:	bf 93       	push	r27
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
    1396:	20 91 1c 01 	lds	r18, 0x011C
    139a:	30 91 1d 01 	lds	r19, 0x011D
    139e:	40 91 84 00 	lds	r20, 0x0084
    13a2:	50 91 85 00 	lds	r21, 0x0085
    13a6:	c9 01       	movw	r24, r18
    13a8:	aa 27       	eor	r26, r26
    13aa:	97 fd       	sbrc	r25, 7
    13ac:	a0 95       	com	r26
    13ae:	ba 2f       	mov	r27, r26
    13b0:	dc 01       	movw	r26, r24
    13b2:	99 27       	eor	r25, r25
    13b4:	88 27       	eor	r24, r24
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	84 2b       	or	r24, r20
    13bc:	95 2b       	or	r25, r21
    13be:	a6 2b       	or	r26, r22
    13c0:	b7 2b       	or	r27, r23
    13c2:	80 93 1e 01 	sts	0x011E, r24
    13c6:	90 93 1f 01 	sts	0x011F, r25
    13ca:	a0 93 20 01 	sts	0x0120, r26
    13ce:	b0 93 21 01 	sts	0x0121, r27
    13d2:	b0 9b       	sbis	0x16, 0	; 22
    13d4:	1b c0       	rjmp	.+54     	; 0x140c <__vector_14+0x98>
    13d6:	40 91 84 00 	lds	r20, 0x0084
    13da:	50 91 85 00 	lds	r21, 0x0085
    13de:	c9 01       	movw	r24, r18
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	aa 27       	eor	r26, r26
    13e4:	97 fd       	sbrc	r25, 7
    13e6:	a0 95       	com	r26
    13e8:	ba 2f       	mov	r27, r26
    13ea:	dc 01       	movw	r26, r24
    13ec:	99 27       	eor	r25, r25
    13ee:	88 27       	eor	r24, r24
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	84 2b       	or	r24, r20
    13f6:	95 2b       	or	r25, r21
    13f8:	a6 2b       	or	r26, r22
    13fa:	b7 2b       	or	r27, r23
    13fc:	80 93 1e 01 	sts	0x011E, r24
    1400:	90 93 1f 01 	sts	0x011F, r25
    1404:	a0 93 20 01 	sts	0x0120, r26
    1408:	b0 93 21 01 	sts	0x0121, r27
    140c:	e0 91 d0 01 	lds	r30, 0x01D0
    1410:	f0 91 d1 01 	lds	r31, 0x01D1
    1414:	30 97       	sbiw	r30, 0x00	; 0
    1416:	39 f0       	breq	.+14     	; 0x1426 <__vector_14+0xb2>
    1418:	69 e0       	ldi	r22, 0x09	; 9
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	80 91 38 01 	lds	r24, 0x0138
    1420:	90 91 39 01 	lds	r25, 0x0139
    1424:	09 95       	icall
    1426:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    142a:	ff 91       	pop	r31
    142c:	ef 91       	pop	r30
    142e:	bf 91       	pop	r27
    1430:	af 91       	pop	r26
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	7f 91       	pop	r23
    1438:	6f 91       	pop	r22
    143a:	5f 91       	pop	r21
    143c:	4f 91       	pop	r20
    143e:	3f 91       	pop	r19
    1440:	2f 91       	pop	r18
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	1f 90       	pop	r1
    144a:	18 95       	reti

0000144c <__vector_15>:
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
    144c:	1f 92       	push	r1
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	2f 93       	push	r18
    1458:	3f 93       	push	r19
    145a:	4f 93       	push	r20
    145c:	5f 93       	push	r21
    145e:	6f 93       	push	r22
    1460:	7f 93       	push	r23
    1462:	8f 93       	push	r24
    1464:	9f 93       	push	r25
    1466:	af 93       	push	r26
    1468:	bf 93       	push	r27
    146a:	ef 93       	push	r30
    146c:	ff 93       	push	r31
    146e:	20 91 1c 01 	lds	r18, 0x011C
    1472:	30 91 1d 01 	lds	r19, 0x011D
    1476:	40 91 84 00 	lds	r20, 0x0084
    147a:	50 91 85 00 	lds	r21, 0x0085
    147e:	c9 01       	movw	r24, r18
    1480:	aa 27       	eor	r26, r26
    1482:	97 fd       	sbrc	r25, 7
    1484:	a0 95       	com	r26
    1486:	ba 2f       	mov	r27, r26
    1488:	dc 01       	movw	r26, r24
    148a:	99 27       	eor	r25, r25
    148c:	88 27       	eor	r24, r24
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	84 2b       	or	r24, r20
    1494:	95 2b       	or	r25, r21
    1496:	a6 2b       	or	r26, r22
    1498:	b7 2b       	or	r27, r23
    149a:	80 93 1e 01 	sts	0x011E, r24
    149e:	90 93 1f 01 	sts	0x011F, r25
    14a2:	a0 93 20 01 	sts	0x0120, r26
    14a6:	b0 93 21 01 	sts	0x0121, r27
    14aa:	b0 9b       	sbis	0x16, 0	; 22
    14ac:	1b c0       	rjmp	.+54     	; 0x14e4 <__vector_15+0x98>
    14ae:	40 91 84 00 	lds	r20, 0x0084
    14b2:	50 91 85 00 	lds	r21, 0x0085
    14b6:	c9 01       	movw	r24, r18
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	aa 27       	eor	r26, r26
    14bc:	97 fd       	sbrc	r25, 7
    14be:	a0 95       	com	r26
    14c0:	ba 2f       	mov	r27, r26
    14c2:	dc 01       	movw	r26, r24
    14c4:	99 27       	eor	r25, r25
    14c6:	88 27       	eor	r24, r24
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	84 2b       	or	r24, r20
    14ce:	95 2b       	or	r25, r21
    14d0:	a6 2b       	or	r26, r22
    14d2:	b7 2b       	or	r27, r23
    14d4:	80 93 1e 01 	sts	0x011E, r24
    14d8:	90 93 1f 01 	sts	0x011F, r25
    14dc:	a0 93 20 01 	sts	0x0120, r26
    14e0:	b0 93 21 01 	sts	0x0121, r27
    14e4:	e0 91 d2 01 	lds	r30, 0x01D2
    14e8:	f0 91 d3 01 	lds	r31, 0x01D3
    14ec:	30 97       	sbiw	r30, 0x00	; 0
    14ee:	39 f0       	breq	.+14     	; 0x14fe <__vector_15+0xb2>
    14f0:	6a e0       	ldi	r22, 0x0A	; 10
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	80 91 3a 01 	lds	r24, 0x013A
    14f8:	90 91 3b 01 	lds	r25, 0x013B
    14fc:	09 95       	icall
    14fe:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1502:	ff 91       	pop	r31
    1504:	ef 91       	pop	r30
    1506:	bf 91       	pop	r27
    1508:	af 91       	pop	r26
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	7f 91       	pop	r23
    1510:	6f 91       	pop	r22
    1512:	5f 91       	pop	r21
    1514:	4f 91       	pop	r20
    1516:	3f 91       	pop	r19
    1518:	2f 91       	pop	r18
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <__vector_16>:
IRQ(IRQ_USI_START,       USI_START_vect);
    1524:	1f 92       	push	r1
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	2f 93       	push	r18
    1530:	3f 93       	push	r19
    1532:	4f 93       	push	r20
    1534:	5f 93       	push	r21
    1536:	6f 93       	push	r22
    1538:	7f 93       	push	r23
    153a:	8f 93       	push	r24
    153c:	9f 93       	push	r25
    153e:	af 93       	push	r26
    1540:	bf 93       	push	r27
    1542:	ef 93       	push	r30
    1544:	ff 93       	push	r31
    1546:	20 91 1c 01 	lds	r18, 0x011C
    154a:	30 91 1d 01 	lds	r19, 0x011D
    154e:	40 91 84 00 	lds	r20, 0x0084
    1552:	50 91 85 00 	lds	r21, 0x0085
    1556:	c9 01       	movw	r24, r18
    1558:	aa 27       	eor	r26, r26
    155a:	97 fd       	sbrc	r25, 7
    155c:	a0 95       	com	r26
    155e:	ba 2f       	mov	r27, r26
    1560:	dc 01       	movw	r26, r24
    1562:	99 27       	eor	r25, r25
    1564:	88 27       	eor	r24, r24
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	84 2b       	or	r24, r20
    156c:	95 2b       	or	r25, r21
    156e:	a6 2b       	or	r26, r22
    1570:	b7 2b       	or	r27, r23
    1572:	80 93 1e 01 	sts	0x011E, r24
    1576:	90 93 1f 01 	sts	0x011F, r25
    157a:	a0 93 20 01 	sts	0x0120, r26
    157e:	b0 93 21 01 	sts	0x0121, r27
    1582:	b0 9b       	sbis	0x16, 0	; 22
    1584:	1b c0       	rjmp	.+54     	; 0x15bc <__vector_16+0x98>
    1586:	40 91 84 00 	lds	r20, 0x0084
    158a:	50 91 85 00 	lds	r21, 0x0085
    158e:	c9 01       	movw	r24, r18
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	aa 27       	eor	r26, r26
    1594:	97 fd       	sbrc	r25, 7
    1596:	a0 95       	com	r26
    1598:	ba 2f       	mov	r27, r26
    159a:	dc 01       	movw	r26, r24
    159c:	99 27       	eor	r25, r25
    159e:	88 27       	eor	r24, r24
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	84 2b       	or	r24, r20
    15a6:	95 2b       	or	r25, r21
    15a8:	a6 2b       	or	r26, r22
    15aa:	b7 2b       	or	r27, r23
    15ac:	80 93 1e 01 	sts	0x011E, r24
    15b0:	90 93 1f 01 	sts	0x011F, r25
    15b4:	a0 93 20 01 	sts	0x0120, r26
    15b8:	b0 93 21 01 	sts	0x0121, r27
    15bc:	e0 91 d4 01 	lds	r30, 0x01D4
    15c0:	f0 91 d5 01 	lds	r31, 0x01D5
    15c4:	30 97       	sbiw	r30, 0x00	; 0
    15c6:	39 f0       	breq	.+14     	; 0x15d6 <__vector_16+0xb2>
    15c8:	6b e0       	ldi	r22, 0x0B	; 11
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	80 91 3c 01 	lds	r24, 0x013C
    15d0:	90 91 3d 01 	lds	r25, 0x013D
    15d4:	09 95       	icall
    15d6:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    15da:	ff 91       	pop	r31
    15dc:	ef 91       	pop	r30
    15de:	bf 91       	pop	r27
    15e0:	af 91       	pop	r26
    15e2:	9f 91       	pop	r25
    15e4:	8f 91       	pop	r24
    15e6:	7f 91       	pop	r23
    15e8:	6f 91       	pop	r22
    15ea:	5f 91       	pop	r21
    15ec:	4f 91       	pop	r20
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	1f 90       	pop	r1
    15fa:	18 95       	reti

000015fc <__vector_17>:
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
    15fc:	1f 92       	push	r1
    15fe:	0f 92       	push	r0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	0f 92       	push	r0
    1604:	11 24       	eor	r1, r1
    1606:	2f 93       	push	r18
    1608:	3f 93       	push	r19
    160a:	4f 93       	push	r20
    160c:	5f 93       	push	r21
    160e:	6f 93       	push	r22
    1610:	7f 93       	push	r23
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
    1616:	af 93       	push	r26
    1618:	bf 93       	push	r27
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
    161e:	20 91 1c 01 	lds	r18, 0x011C
    1622:	30 91 1d 01 	lds	r19, 0x011D
    1626:	40 91 84 00 	lds	r20, 0x0084
    162a:	50 91 85 00 	lds	r21, 0x0085
    162e:	c9 01       	movw	r24, r18
    1630:	aa 27       	eor	r26, r26
    1632:	97 fd       	sbrc	r25, 7
    1634:	a0 95       	com	r26
    1636:	ba 2f       	mov	r27, r26
    1638:	dc 01       	movw	r26, r24
    163a:	99 27       	eor	r25, r25
    163c:	88 27       	eor	r24, r24
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	84 2b       	or	r24, r20
    1644:	95 2b       	or	r25, r21
    1646:	a6 2b       	or	r26, r22
    1648:	b7 2b       	or	r27, r23
    164a:	80 93 1e 01 	sts	0x011E, r24
    164e:	90 93 1f 01 	sts	0x011F, r25
    1652:	a0 93 20 01 	sts	0x0120, r26
    1656:	b0 93 21 01 	sts	0x0121, r27
    165a:	b0 9b       	sbis	0x16, 0	; 22
    165c:	1b c0       	rjmp	.+54     	; 0x1694 <__vector_17+0x98>
    165e:	40 91 84 00 	lds	r20, 0x0084
    1662:	50 91 85 00 	lds	r21, 0x0085
    1666:	c9 01       	movw	r24, r18
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	aa 27       	eor	r26, r26
    166c:	97 fd       	sbrc	r25, 7
    166e:	a0 95       	com	r26
    1670:	ba 2f       	mov	r27, r26
    1672:	dc 01       	movw	r26, r24
    1674:	99 27       	eor	r25, r25
    1676:	88 27       	eor	r24, r24
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	84 2b       	or	r24, r20
    167e:	95 2b       	or	r25, r21
    1680:	a6 2b       	or	r26, r22
    1682:	b7 2b       	or	r27, r23
    1684:	80 93 1e 01 	sts	0x011E, r24
    1688:	90 93 1f 01 	sts	0x011F, r25
    168c:	a0 93 20 01 	sts	0x0120, r26
    1690:	b0 93 21 01 	sts	0x0121, r27
    1694:	e0 91 d6 01 	lds	r30, 0x01D6
    1698:	f0 91 d7 01 	lds	r31, 0x01D7
    169c:	30 97       	sbiw	r30, 0x00	; 0
    169e:	39 f0       	breq	.+14     	; 0x16ae <__vector_17+0xb2>
    16a0:	6c e0       	ldi	r22, 0x0C	; 12
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	80 91 3e 01 	lds	r24, 0x013E
    16a8:	90 91 3f 01 	lds	r25, 0x013F
    16ac:	09 95       	icall
    16ae:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    16b2:	ff 91       	pop	r31
    16b4:	ef 91       	pop	r30
    16b6:	bf 91       	pop	r27
    16b8:	af 91       	pop	r26
    16ba:	9f 91       	pop	r25
    16bc:	8f 91       	pop	r24
    16be:	7f 91       	pop	r23
    16c0:	6f 91       	pop	r22
    16c2:	5f 91       	pop	r21
    16c4:	4f 91       	pop	r20
    16c6:	3f 91       	pop	r19
    16c8:	2f 91       	pop	r18
    16ca:	0f 90       	pop	r0
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	0f 90       	pop	r0
    16d0:	1f 90       	pop	r1
    16d2:	18 95       	reti

000016d4 <__vector_18>:
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
    16d4:	1f 92       	push	r1
    16d6:	0f 92       	push	r0
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	0f 92       	push	r0
    16dc:	11 24       	eor	r1, r1
    16de:	2f 93       	push	r18
    16e0:	3f 93       	push	r19
    16e2:	4f 93       	push	r20
    16e4:	5f 93       	push	r21
    16e6:	6f 93       	push	r22
    16e8:	7f 93       	push	r23
    16ea:	8f 93       	push	r24
    16ec:	9f 93       	push	r25
    16ee:	af 93       	push	r26
    16f0:	bf 93       	push	r27
    16f2:	ef 93       	push	r30
    16f4:	ff 93       	push	r31
    16f6:	20 91 1c 01 	lds	r18, 0x011C
    16fa:	30 91 1d 01 	lds	r19, 0x011D
    16fe:	40 91 84 00 	lds	r20, 0x0084
    1702:	50 91 85 00 	lds	r21, 0x0085
    1706:	c9 01       	movw	r24, r18
    1708:	aa 27       	eor	r26, r26
    170a:	97 fd       	sbrc	r25, 7
    170c:	a0 95       	com	r26
    170e:	ba 2f       	mov	r27, r26
    1710:	dc 01       	movw	r26, r24
    1712:	99 27       	eor	r25, r25
    1714:	88 27       	eor	r24, r24
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	84 2b       	or	r24, r20
    171c:	95 2b       	or	r25, r21
    171e:	a6 2b       	or	r26, r22
    1720:	b7 2b       	or	r27, r23
    1722:	80 93 1e 01 	sts	0x011E, r24
    1726:	90 93 1f 01 	sts	0x011F, r25
    172a:	a0 93 20 01 	sts	0x0120, r26
    172e:	b0 93 21 01 	sts	0x0121, r27
    1732:	b0 9b       	sbis	0x16, 0	; 22
    1734:	1b c0       	rjmp	.+54     	; 0x176c <__vector_18+0x98>
    1736:	40 91 84 00 	lds	r20, 0x0084
    173a:	50 91 85 00 	lds	r21, 0x0085
    173e:	c9 01       	movw	r24, r18
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	aa 27       	eor	r26, r26
    1744:	97 fd       	sbrc	r25, 7
    1746:	a0 95       	com	r26
    1748:	ba 2f       	mov	r27, r26
    174a:	dc 01       	movw	r26, r24
    174c:	99 27       	eor	r25, r25
    174e:	88 27       	eor	r24, r24
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	84 2b       	or	r24, r20
    1756:	95 2b       	or	r25, r21
    1758:	a6 2b       	or	r26, r22
    175a:	b7 2b       	or	r27, r23
    175c:	80 93 1e 01 	sts	0x011E, r24
    1760:	90 93 1f 01 	sts	0x011F, r25
    1764:	a0 93 20 01 	sts	0x0120, r26
    1768:	b0 93 21 01 	sts	0x0121, r27
    176c:	e0 91 d8 01 	lds	r30, 0x01D8
    1770:	f0 91 d9 01 	lds	r31, 0x01D9
    1774:	30 97       	sbiw	r30, 0x00	; 0
    1776:	39 f0       	breq	.+14     	; 0x1786 <__vector_18+0xb2>
    1778:	6d e0       	ldi	r22, 0x0D	; 13
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	80 91 40 01 	lds	r24, 0x0140
    1780:	90 91 41 01 	lds	r25, 0x0141
    1784:	09 95       	icall
    1786:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_19>:
IRQ(IRQ_ADC,             ADC_vect);
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	20 91 1c 01 	lds	r18, 0x011C
    17d2:	30 91 1d 01 	lds	r19, 0x011D
    17d6:	40 91 84 00 	lds	r20, 0x0084
    17da:	50 91 85 00 	lds	r21, 0x0085
    17de:	c9 01       	movw	r24, r18
    17e0:	aa 27       	eor	r26, r26
    17e2:	97 fd       	sbrc	r25, 7
    17e4:	a0 95       	com	r26
    17e6:	ba 2f       	mov	r27, r26
    17e8:	dc 01       	movw	r26, r24
    17ea:	99 27       	eor	r25, r25
    17ec:	88 27       	eor	r24, r24
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	84 2b       	or	r24, r20
    17f4:	95 2b       	or	r25, r21
    17f6:	a6 2b       	or	r26, r22
    17f8:	b7 2b       	or	r27, r23
    17fa:	80 93 1e 01 	sts	0x011E, r24
    17fe:	90 93 1f 01 	sts	0x011F, r25
    1802:	a0 93 20 01 	sts	0x0120, r26
    1806:	b0 93 21 01 	sts	0x0121, r27
    180a:	b0 9b       	sbis	0x16, 0	; 22
    180c:	1b c0       	rjmp	.+54     	; 0x1844 <__vector_19+0x98>
    180e:	40 91 84 00 	lds	r20, 0x0084
    1812:	50 91 85 00 	lds	r21, 0x0085
    1816:	c9 01       	movw	r24, r18
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	aa 27       	eor	r26, r26
    181c:	97 fd       	sbrc	r25, 7
    181e:	a0 95       	com	r26
    1820:	ba 2f       	mov	r27, r26
    1822:	dc 01       	movw	r26, r24
    1824:	99 27       	eor	r25, r25
    1826:	88 27       	eor	r24, r24
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	84 2b       	or	r24, r20
    182e:	95 2b       	or	r25, r21
    1830:	a6 2b       	or	r26, r22
    1832:	b7 2b       	or	r27, r23
    1834:	80 93 1e 01 	sts	0x011E, r24
    1838:	90 93 1f 01 	sts	0x011F, r25
    183c:	a0 93 20 01 	sts	0x0120, r26
    1840:	b0 93 21 01 	sts	0x0121, r27
    1844:	e0 91 da 01 	lds	r30, 0x01DA
    1848:	f0 91 db 01 	lds	r31, 0x01DB
    184c:	30 97       	sbiw	r30, 0x00	; 0
    184e:	39 f0       	breq	.+14     	; 0x185e <__vector_19+0xb2>
    1850:	6e e0       	ldi	r22, 0x0E	; 14
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	80 91 42 01 	lds	r24, 0x0142
    1858:	90 91 43 01 	lds	r25, 0x0143
    185c:	09 95       	icall
    185e:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	7f 91       	pop	r23
    1870:	6f 91       	pop	r22
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	1f 90       	pop	r1
    1882:	18 95       	reti

00001884 <__vector_20>:
IRQ(IRQ_EE_READY,        EE_READY_vect);
    1884:	1f 92       	push	r1
    1886:	0f 92       	push	r0
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	0f 92       	push	r0
    188c:	11 24       	eor	r1, r1
    188e:	2f 93       	push	r18
    1890:	3f 93       	push	r19
    1892:	4f 93       	push	r20
    1894:	5f 93       	push	r21
    1896:	6f 93       	push	r22
    1898:	7f 93       	push	r23
    189a:	8f 93       	push	r24
    189c:	9f 93       	push	r25
    189e:	af 93       	push	r26
    18a0:	bf 93       	push	r27
    18a2:	ef 93       	push	r30
    18a4:	ff 93       	push	r31
    18a6:	20 91 1c 01 	lds	r18, 0x011C
    18aa:	30 91 1d 01 	lds	r19, 0x011D
    18ae:	40 91 84 00 	lds	r20, 0x0084
    18b2:	50 91 85 00 	lds	r21, 0x0085
    18b6:	c9 01       	movw	r24, r18
    18b8:	aa 27       	eor	r26, r26
    18ba:	97 fd       	sbrc	r25, 7
    18bc:	a0 95       	com	r26
    18be:	ba 2f       	mov	r27, r26
    18c0:	dc 01       	movw	r26, r24
    18c2:	99 27       	eor	r25, r25
    18c4:	88 27       	eor	r24, r24
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	84 2b       	or	r24, r20
    18cc:	95 2b       	or	r25, r21
    18ce:	a6 2b       	or	r26, r22
    18d0:	b7 2b       	or	r27, r23
    18d2:	80 93 1e 01 	sts	0x011E, r24
    18d6:	90 93 1f 01 	sts	0x011F, r25
    18da:	a0 93 20 01 	sts	0x0120, r26
    18de:	b0 93 21 01 	sts	0x0121, r27
    18e2:	b0 9b       	sbis	0x16, 0	; 22
    18e4:	1b c0       	rjmp	.+54     	; 0x191c <__vector_20+0x98>
    18e6:	40 91 84 00 	lds	r20, 0x0084
    18ea:	50 91 85 00 	lds	r21, 0x0085
    18ee:	c9 01       	movw	r24, r18
    18f0:	01 96       	adiw	r24, 0x01	; 1
    18f2:	aa 27       	eor	r26, r26
    18f4:	97 fd       	sbrc	r25, 7
    18f6:	a0 95       	com	r26
    18f8:	ba 2f       	mov	r27, r26
    18fa:	dc 01       	movw	r26, r24
    18fc:	99 27       	eor	r25, r25
    18fe:	88 27       	eor	r24, r24
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	84 2b       	or	r24, r20
    1906:	95 2b       	or	r25, r21
    1908:	a6 2b       	or	r26, r22
    190a:	b7 2b       	or	r27, r23
    190c:	80 93 1e 01 	sts	0x011E, r24
    1910:	90 93 1f 01 	sts	0x011F, r25
    1914:	a0 93 20 01 	sts	0x0120, r26
    1918:	b0 93 21 01 	sts	0x0121, r27
    191c:	e0 91 dc 01 	lds	r30, 0x01DC
    1920:	f0 91 dd 01 	lds	r31, 0x01DD
    1924:	30 97       	sbiw	r30, 0x00	; 0
    1926:	39 f0       	breq	.+14     	; 0x1936 <__vector_20+0xb2>
    1928:	6f e0       	ldi	r22, 0x0F	; 15
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	80 91 44 01 	lds	r24, 0x0144
    1930:	90 91 45 01 	lds	r25, 0x0145
    1934:	09 95       	icall
    1936:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    193a:	ff 91       	pop	r31
    193c:	ef 91       	pop	r30
    193e:	bf 91       	pop	r27
    1940:	af 91       	pop	r26
    1942:	9f 91       	pop	r25
    1944:	8f 91       	pop	r24
    1946:	7f 91       	pop	r23
    1948:	6f 91       	pop	r22
    194a:	5f 91       	pop	r21
    194c:	4f 91       	pop	r20
    194e:	3f 91       	pop	r19
    1950:	2f 91       	pop	r18
    1952:	0f 90       	pop	r0
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	0f 90       	pop	r0
    1958:	1f 90       	pop	r1
    195a:	18 95       	reti

0000195c <__vector_21>:
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
    195c:	1f 92       	push	r1
    195e:	0f 92       	push	r0
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	0f 92       	push	r0
    1964:	11 24       	eor	r1, r1
    1966:	2f 93       	push	r18
    1968:	3f 93       	push	r19
    196a:	4f 93       	push	r20
    196c:	5f 93       	push	r21
    196e:	6f 93       	push	r22
    1970:	7f 93       	push	r23
    1972:	8f 93       	push	r24
    1974:	9f 93       	push	r25
    1976:	af 93       	push	r26
    1978:	bf 93       	push	r27
    197a:	ef 93       	push	r30
    197c:	ff 93       	push	r31
    197e:	20 91 1c 01 	lds	r18, 0x011C
    1982:	30 91 1d 01 	lds	r19, 0x011D
    1986:	40 91 84 00 	lds	r20, 0x0084
    198a:	50 91 85 00 	lds	r21, 0x0085
    198e:	c9 01       	movw	r24, r18
    1990:	aa 27       	eor	r26, r26
    1992:	97 fd       	sbrc	r25, 7
    1994:	a0 95       	com	r26
    1996:	ba 2f       	mov	r27, r26
    1998:	dc 01       	movw	r26, r24
    199a:	99 27       	eor	r25, r25
    199c:	88 27       	eor	r24, r24
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	84 2b       	or	r24, r20
    19a4:	95 2b       	or	r25, r21
    19a6:	a6 2b       	or	r26, r22
    19a8:	b7 2b       	or	r27, r23
    19aa:	80 93 1e 01 	sts	0x011E, r24
    19ae:	90 93 1f 01 	sts	0x011F, r25
    19b2:	a0 93 20 01 	sts	0x0120, r26
    19b6:	b0 93 21 01 	sts	0x0121, r27
    19ba:	b0 9b       	sbis	0x16, 0	; 22
    19bc:	1b c0       	rjmp	.+54     	; 0x19f4 <__vector_21+0x98>
    19be:	40 91 84 00 	lds	r20, 0x0084
    19c2:	50 91 85 00 	lds	r21, 0x0085
    19c6:	c9 01       	movw	r24, r18
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	aa 27       	eor	r26, r26
    19cc:	97 fd       	sbrc	r25, 7
    19ce:	a0 95       	com	r26
    19d0:	ba 2f       	mov	r27, r26
    19d2:	dc 01       	movw	r26, r24
    19d4:	99 27       	eor	r25, r25
    19d6:	88 27       	eor	r24, r24
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	84 2b       	or	r24, r20
    19de:	95 2b       	or	r25, r21
    19e0:	a6 2b       	or	r26, r22
    19e2:	b7 2b       	or	r27, r23
    19e4:	80 93 1e 01 	sts	0x011E, r24
    19e8:	90 93 1f 01 	sts	0x011F, r25
    19ec:	a0 93 20 01 	sts	0x0120, r26
    19f0:	b0 93 21 01 	sts	0x0121, r27
    19f4:	e0 91 de 01 	lds	r30, 0x01DE
    19f8:	f0 91 df 01 	lds	r31, 0x01DF
    19fc:	30 97       	sbiw	r30, 0x00	; 0
    19fe:	39 f0       	breq	.+14     	; 0x1a0e <__vector_21+0xb2>
    1a00:	60 e1       	ldi	r22, 0x10	; 16
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	80 91 46 01 	lds	r24, 0x0146
    1a08:	90 91 47 01 	lds	r25, 0x0147
    1a0c:	09 95       	icall
    1a0e:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1a12:	ff 91       	pop	r31
    1a14:	ef 91       	pop	r30
    1a16:	bf 91       	pop	r27
    1a18:	af 91       	pop	r26
    1a1a:	9f 91       	pop	r25
    1a1c:	8f 91       	pop	r24
    1a1e:	7f 91       	pop	r23
    1a20:	6f 91       	pop	r22
    1a22:	5f 91       	pop	r21
    1a24:	4f 91       	pop	r20
    1a26:	3f 91       	pop	r19
    1a28:	2f 91       	pop	r18
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	0f 90       	pop	r0
    1a30:	1f 90       	pop	r1
    1a32:	18 95       	reti

00001a34 <__vector_22>:
IRQ(IRQ_LCD,             LCD_vect);
    1a34:	1f 92       	push	r1
    1a36:	0f 92       	push	r0
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	0f 92       	push	r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	2f 93       	push	r18
    1a40:	3f 93       	push	r19
    1a42:	4f 93       	push	r20
    1a44:	5f 93       	push	r21
    1a46:	6f 93       	push	r22
    1a48:	7f 93       	push	r23
    1a4a:	8f 93       	push	r24
    1a4c:	9f 93       	push	r25
    1a4e:	af 93       	push	r26
    1a50:	bf 93       	push	r27
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31
    1a56:	20 91 1c 01 	lds	r18, 0x011C
    1a5a:	30 91 1d 01 	lds	r19, 0x011D
    1a5e:	40 91 84 00 	lds	r20, 0x0084
    1a62:	50 91 85 00 	lds	r21, 0x0085
    1a66:	c9 01       	movw	r24, r18
    1a68:	aa 27       	eor	r26, r26
    1a6a:	97 fd       	sbrc	r25, 7
    1a6c:	a0 95       	com	r26
    1a6e:	ba 2f       	mov	r27, r26
    1a70:	dc 01       	movw	r26, r24
    1a72:	99 27       	eor	r25, r25
    1a74:	88 27       	eor	r24, r24
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	84 2b       	or	r24, r20
    1a7c:	95 2b       	or	r25, r21
    1a7e:	a6 2b       	or	r26, r22
    1a80:	b7 2b       	or	r27, r23
    1a82:	80 93 1e 01 	sts	0x011E, r24
    1a86:	90 93 1f 01 	sts	0x011F, r25
    1a8a:	a0 93 20 01 	sts	0x0120, r26
    1a8e:	b0 93 21 01 	sts	0x0121, r27
    1a92:	b0 9b       	sbis	0x16, 0	; 22
    1a94:	1b c0       	rjmp	.+54     	; 0x1acc <__vector_22+0x98>
    1a96:	40 91 84 00 	lds	r20, 0x0084
    1a9a:	50 91 85 00 	lds	r21, 0x0085
    1a9e:	c9 01       	movw	r24, r18
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	aa 27       	eor	r26, r26
    1aa4:	97 fd       	sbrc	r25, 7
    1aa6:	a0 95       	com	r26
    1aa8:	ba 2f       	mov	r27, r26
    1aaa:	dc 01       	movw	r26, r24
    1aac:	99 27       	eor	r25, r25
    1aae:	88 27       	eor	r24, r24
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	84 2b       	or	r24, r20
    1ab6:	95 2b       	or	r25, r21
    1ab8:	a6 2b       	or	r26, r22
    1aba:	b7 2b       	or	r27, r23
    1abc:	80 93 1e 01 	sts	0x011E, r24
    1ac0:	90 93 1f 01 	sts	0x011F, r25
    1ac4:	a0 93 20 01 	sts	0x0120, r26
    1ac8:	b0 93 21 01 	sts	0x0121, r27
    1acc:	e0 91 e0 01 	lds	r30, 0x01E0
    1ad0:	f0 91 e1 01 	lds	r31, 0x01E1
    1ad4:	30 97       	sbiw	r30, 0x00	; 0
    1ad6:	39 f0       	breq	.+14     	; 0x1ae6 <__vector_22+0xb2>
    1ad8:	61 e1       	ldi	r22, 0x11	; 17
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	80 91 48 01 	lds	r24, 0x0148
    1ae0:	90 91 49 01 	lds	r25, 0x0149
    1ae4:	09 95       	icall
    1ae6:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1aea:	ff 91       	pop	r31
    1aec:	ef 91       	pop	r30
    1aee:	bf 91       	pop	r27
    1af0:	af 91       	pop	r26
    1af2:	9f 91       	pop	r25
    1af4:	8f 91       	pop	r24
    1af6:	7f 91       	pop	r23
    1af8:	6f 91       	pop	r22
    1afa:	5f 91       	pop	r21
    1afc:	4f 91       	pop	r20
    1afe:	3f 91       	pop	r19
    1b00:	2f 91       	pop	r18
    1b02:	0f 90       	pop	r0
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	0f 90       	pop	r0
    1b08:	1f 90       	pop	r1
    1b0a:	18 95       	reti

00001b0c <enqueueByDeadline>:

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    1b0c:	ef 92       	push	r14
    1b0e:	ff 92       	push	r15
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	7b 01       	movw	r14, r22
    Msg prev = NULL, q = *queue;
    1b1a:	db 01       	movw	r26, r22
    1b1c:	ed 91       	ld	r30, X+
    1b1e:	fc 91       	ld	r31, X
    while (q && (q->deadline <= p->deadline)) {
    1b20:	30 97       	sbiw	r30, 0x00	; 0
    1b22:	49 f1       	breq	.+82     	; 0x1b76 <enqueueByDeadline+0x6a>
    1b24:	ec 01       	movw	r28, r24
    1b26:	0e 81       	ldd	r16, Y+6	; 0x06
    1b28:	1f 81       	ldd	r17, Y+7	; 0x07
    1b2a:	28 85       	ldd	r18, Y+8	; 0x08
    1b2c:	39 85       	ldd	r19, Y+9	; 0x09
    1b2e:	46 81       	ldd	r20, Z+6	; 0x06
    1b30:	57 81       	ldd	r21, Z+7	; 0x07
    1b32:	60 85       	ldd	r22, Z+8	; 0x08
    1b34:	71 85       	ldd	r23, Z+9	; 0x09
    1b36:	04 17       	cp	r16, r20
    1b38:	15 07       	cpc	r17, r21
    1b3a:	26 07       	cpc	r18, r22
    1b3c:	37 07       	cpc	r19, r23
    1b3e:	dc f0       	brlt	.+54     	; 0x1b76 <enqueueByDeadline+0x6a>
        prev = q;
        q = q->next;
    1b40:	c0 81       	ld	r28, Z
    1b42:	d1 81       	ldd	r29, Z+1	; 0x01
IRQ(IRQ_LCD,             LCD_vect);

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
    1b44:	20 97       	sbiw	r28, 0x00	; 0
    1b46:	59 f0       	breq	.+22     	; 0x1b5e <enqueueByDeadline+0x52>
    1b48:	4e 81       	ldd	r20, Y+6	; 0x06
    1b4a:	5f 81       	ldd	r21, Y+7	; 0x07
    1b4c:	68 85       	ldd	r22, Y+8	; 0x08
    1b4e:	79 85       	ldd	r23, Y+9	; 0x09
    1b50:	04 17       	cp	r16, r20
    1b52:	15 07       	cpc	r17, r21
    1b54:	26 07       	cpc	r18, r22
    1b56:	37 07       	cpc	r19, r23
    1b58:	14 f0       	brlt	.+4      	; 0x1b5e <enqueueByDeadline+0x52>
        prev = q;
        q = q->next;
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	f1 cf       	rjmp	.-30     	; 0x1b40 <enqueueByDeadline+0x34>
    }
    p->next = q;
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cd 93       	st	X+, r28
    1b62:	dc 93       	st	X, r29
    if (prev == NULL)
    1b64:	30 97       	sbiw	r30, 0x00	; 0
    1b66:	21 f4       	brne	.+8      	; 0x1b70 <enqueueByDeadline+0x64>
        *queue = p;
    1b68:	e7 01       	movw	r28, r14
    1b6a:	99 83       	std	Y+1, r25	; 0x01
    1b6c:	88 83       	st	Y, r24
    1b6e:	07 c0       	rjmp	.+14     	; 0x1b7e <enqueueByDeadline+0x72>
    else
        prev->next = p;
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	80 83       	st	Z, r24
    1b74:	04 c0       	rjmp	.+8      	; 0x1b7e <enqueueByDeadline+0x72>
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
    }
    p->next = q;
    1b76:	dc 01       	movw	r26, r24
    1b78:	ed 93       	st	X+, r30
    1b7a:	fc 93       	st	X, r31
    1b7c:	f5 cf       	rjmp	.-22     	; 0x1b68 <enqueueByDeadline+0x5c>
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
}
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	ff 90       	pop	r15
    1b88:	ef 90       	pop	r14
    1b8a:	08 95       	ret

00001b8c <enqueueByBaseline>:

void enqueueByBaseline(Msg p, Msg *queue) {
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	7b 01       	movw	r14, r22
    Msg prev = NULL, q = *queue;
    1b9a:	db 01       	movw	r26, r22
    1b9c:	ed 91       	ld	r30, X+
    1b9e:	fc 91       	ld	r31, X
    while (q && (q->baseline <= p->baseline )) {
    1ba0:	30 97       	sbiw	r30, 0x00	; 0
    1ba2:	49 f1       	breq	.+82     	; 0x1bf6 <enqueueByBaseline+0x6a>
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	0a 81       	ldd	r16, Y+2	; 0x02
    1ba8:	1b 81       	ldd	r17, Y+3	; 0x03
    1baa:	2c 81       	ldd	r18, Y+4	; 0x04
    1bac:	3d 81       	ldd	r19, Y+5	; 0x05
    1bae:	42 81       	ldd	r20, Z+2	; 0x02
    1bb0:	53 81       	ldd	r21, Z+3	; 0x03
    1bb2:	64 81       	ldd	r22, Z+4	; 0x04
    1bb4:	75 81       	ldd	r23, Z+5	; 0x05
    1bb6:	04 17       	cp	r16, r20
    1bb8:	15 07       	cpc	r17, r21
    1bba:	26 07       	cpc	r18, r22
    1bbc:	37 07       	cpc	r19, r23
    1bbe:	dc f0       	brlt	.+54     	; 0x1bf6 <enqueueByBaseline+0x6a>
        prev = q;
        q = q->next;
    1bc0:	c0 81       	ld	r28, Z
    1bc2:	d1 81       	ldd	r29, Z+1	; 0x01
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
    1bc4:	20 97       	sbiw	r28, 0x00	; 0
    1bc6:	59 f0       	breq	.+22     	; 0x1bde <enqueueByBaseline+0x52>
    1bc8:	4a 81       	ldd	r20, Y+2	; 0x02
    1bca:	5b 81       	ldd	r21, Y+3	; 0x03
    1bcc:	6c 81       	ldd	r22, Y+4	; 0x04
    1bce:	7d 81       	ldd	r23, Y+5	; 0x05
    1bd0:	04 17       	cp	r16, r20
    1bd2:	15 07       	cpc	r17, r21
    1bd4:	26 07       	cpc	r18, r22
    1bd6:	37 07       	cpc	r19, r23
    1bd8:	14 f0       	brlt	.+4      	; 0x1bde <enqueueByBaseline+0x52>
        prev = q;
        q = q->next;
    1bda:	fe 01       	movw	r30, r28
    1bdc:	f1 cf       	rjmp	.-30     	; 0x1bc0 <enqueueByBaseline+0x34>
    }
    p->next = q;
    1bde:	dc 01       	movw	r26, r24
    1be0:	cd 93       	st	X+, r28
    1be2:	dc 93       	st	X, r29
    if (prev == NULL)
    1be4:	30 97       	sbiw	r30, 0x00	; 0
    1be6:	21 f4       	brne	.+8      	; 0x1bf0 <enqueueByBaseline+0x64>
        *queue = p;
    1be8:	e7 01       	movw	r28, r14
    1bea:	99 83       	std	Y+1, r25	; 0x01
    1bec:	88 83       	st	Y, r24
    1bee:	07 c0       	rjmp	.+14     	; 0x1bfe <enqueueByBaseline+0x72>
    else
        prev->next = p;
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	80 83       	st	Z, r24
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <enqueueByBaseline+0x72>
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
    }
    p->next = q;
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	ed 93       	st	X+, r30
    1bfa:	fc 93       	st	X, r31
    1bfc:	f5 cf       	rjmp	.-22     	; 0x1be8 <enqueueByBaseline+0x5c>
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
}
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	08 95       	ret

00001c0c <dequeue>:

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	ed 91       	ld	r30, X+
    1c10:	fc 91       	ld	r31, X
    1c12:	11 97       	sbiw	r26, 0x01	; 1
    if (m)
    1c14:	30 97       	sbiw	r30, 0x00	; 0
    1c16:	59 f4       	brne	.+22     	; 0x1c2e <dequeue+0x22>
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
    1c18:	8f ef       	ldi	r24, 0xFF	; 255
    1c1a:	80 93 ec 00 	sts	0x00EC, r24
    1c1e:	80 93 ed 00 	sts	0x00ED, r24
    1c22:	80 93 ee 00 	sts	0x00EE, r24
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	83 bf       	out	0x33, r24	; 51
    1c2a:	88 95       	sleep
    1c2c:	fd cf       	rjmp	.-6      	; 0x1c28 <dequeue+0x1c>
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    1c2e:	20 81       	ld	r18, Z
    1c30:	31 81       	ldd	r19, Z+1	; 0x01
    1c32:	2d 93       	st	X+, r18
    1c34:	3c 93       	st	X, r19
    else
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}
    1c36:	cf 01       	movw	r24, r30
    1c38:	08 95       	ret

00001c3a <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
    1c3a:	1f 92       	push	r1
    1c3c:	0f 92       	push	r0
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	0f 92       	push	r0
    1c42:	11 24       	eor	r1, r1
    1c44:	2f 93       	push	r18
    1c46:	3f 93       	push	r19
    1c48:	4f 93       	push	r20
    1c4a:	5f 93       	push	r21
    1c4c:	8f 93       	push	r24
    1c4e:	9f 93       	push	r25
    1c50:	af 93       	push	r26
    1c52:	bf 93       	push	r27
    1c54:	ef 93       	push	r30
    1c56:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
    1c58:	20 91 1c 01 	lds	r18, 0x011C
    1c5c:	30 91 1d 01 	lds	r19, 0x011D
    1c60:	2f 5f       	subi	r18, 0xFF	; 255
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	30 93 1d 01 	sts	0x011D, r19
    1c68:	20 93 1c 01 	sts	0x011C, r18
    TIMERSET(timerQ);
    1c6c:	e0 91 22 01 	lds	r30, 0x0122
    1c70:	f0 91 23 01 	lds	r31, 0x0123
    1c74:	30 97       	sbiw	r30, 0x00	; 0
    1c76:	01 f1       	breq	.+64     	; 0x1cb8 <__vector_9+0x7e>
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	a4 81       	ldd	r26, Z+4	; 0x04
    1c7e:	b5 81       	ldd	r27, Z+5	; 0x05
    1c80:	2a 17       	cp	r18, r26
    1c82:	3b 07       	cpc	r19, r27
    1c84:	c9 f4       	brne	.+50     	; 0x1cb8 <__vector_9+0x7e>
    1c86:	20 91 84 00 	lds	r18, 0x0084
    1c8a:	30 91 85 00 	lds	r19, 0x0085
    1c8e:	ac 01       	movw	r20, r24
    1c90:	42 1b       	sub	r20, r18
    1c92:	53 0b       	sbc	r21, r19
    1c94:	41 30       	cpi	r20, 0x01	; 1
    1c96:	51 05       	cpc	r21, r1
    1c98:	29 f4       	brne	.+10     	; 0x1ca4 <__vector_9+0x6a>
    1c9a:	80 91 84 00 	lds	r24, 0x0084
    1c9e:	90 91 85 00 	lds	r25, 0x0085
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	90 93 89 00 	sts	0x0089, r25
    1ca8:	80 93 88 00 	sts	0x0088, r24
    1cac:	ef e6       	ldi	r30, 0x6F	; 111
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	82 60       	ori	r24, 0x02	; 2
    1cb4:	80 83       	st	Z, r24
    1cb6:	05 c0       	rjmp	.+10     	; 0x1cc2 <__vector_9+0x88>
    1cb8:	ef e6       	ldi	r30, 0x6F	; 111
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8d 7f       	andi	r24, 0xFD	; 253
    1cc0:	80 83       	st	Z, r24
}
    1cc2:	ff 91       	pop	r31
    1cc4:	ef 91       	pop	r30
    1cc6:	bf 91       	pop	r27
    1cc8:	af 91       	pop	r26
    1cca:	9f 91       	pop	r25
    1ccc:	8f 91       	pop	r24
    1cce:	5f 91       	pop	r21
    1cd0:	4f 91       	pop	r20
    1cd2:	3f 91       	pop	r19
    1cd4:	2f 91       	pop	r18
    1cd6:	0f 90       	pop	r0
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	0f 90       	pop	r0
    1cdc:	1f 90       	pop	r1
    1cde:	18 95       	reti

00001ce0 <__vector_7>:

TIMER_COMPARE_INTERRUPT {
    1ce0:	1f 92       	push	r1
    1ce2:	0f 92       	push	r0
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	0f 92       	push	r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	2f 93       	push	r18
    1cf4:	3f 93       	push	r19
    1cf6:	4f 93       	push	r20
    1cf8:	5f 93       	push	r21
    1cfa:	6f 93       	push	r22
    1cfc:	7f 93       	push	r23
    1cfe:	8f 93       	push	r24
    1d00:	9f 93       	push	r25
    1d02:	af 93       	push	r26
    1d04:	bf 93       	push	r27
    1d06:	ef 93       	push	r30
    1d08:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    1d0a:	c0 90 1c 01 	lds	r12, 0x011C
    1d0e:	d0 90 1d 01 	lds	r13, 0x011D
    1d12:	80 91 84 00 	lds	r24, 0x0084
    1d16:	90 91 85 00 	lds	r25, 0x0085
    1d1a:	b0 99       	sbic	0x16, 0	; 22
    1d1c:	0e c0       	rjmp	.+28     	; 0x1d3a <__vector_7+0x5a>
    1d1e:	ee 24       	eor	r14, r14
    1d20:	d7 fc       	sbrc	r13, 7
    1d22:	e0 94       	com	r14
    1d24:	fe 2c       	mov	r15, r14
    1d26:	76 01       	movw	r14, r12
    1d28:	dd 24       	eor	r13, r13
    1d2a:	cc 24       	eor	r12, r12
    1d2c:	a0 e0       	ldi	r26, 0x00	; 0
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	c8 2a       	or	r12, r24
    1d32:	d9 2a       	or	r13, r25
    1d34:	ea 2a       	or	r14, r26
    1d36:	fb 2a       	or	r15, r27
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <__vector_7+0x82>
    1d3a:	80 91 84 00 	lds	r24, 0x0084
    1d3e:	90 91 85 00 	lds	r25, 0x0085
    1d42:	2f ef       	ldi	r18, 0xFF	; 255
    1d44:	c2 1a       	sub	r12, r18
    1d46:	d2 0a       	sbc	r13, r18
    1d48:	ee 24       	eor	r14, r14
    1d4a:	d7 fc       	sbrc	r13, 7
    1d4c:	e0 94       	com	r14
    1d4e:	fe 2c       	mov	r15, r14
    1d50:	76 01       	movw	r14, r12
    1d52:	dd 24       	eor	r13, r13
    1d54:	cc 24       	eor	r12, r12
    1d56:	a0 e0       	ldi	r26, 0x00	; 0
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	c8 2a       	or	r12, r24
    1d5c:	d9 2a       	or	r13, r25
    1d5e:	ea 2a       	or	r14, r26
    1d60:	fb 2a       	or	r15, r27
    while (timerQ && (timerQ->baseline - now <= 0))
    1d62:	e0 91 22 01 	lds	r30, 0x0122
    1d66:	f0 91 23 01 	lds	r31, 0x0123
    1d6a:	30 97       	sbiw	r30, 0x00	; 0
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <__vector_7+0x90>
    1d6e:	42 c0       	rjmp	.+132    	; 0x1df4 <__vector_7+0x114>
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	a4 81       	ldd	r26, Z+4	; 0x04
    1d76:	b5 81       	ldd	r27, Z+5	; 0x05
    1d78:	8c 19       	sub	r24, r12
    1d7a:	9d 09       	sbc	r25, r13
    1d7c:	ae 09       	sbc	r26, r14
    1d7e:	bf 09       	sbc	r27, r15
    1d80:	18 16       	cp	r1, r24
    1d82:	19 06       	cpc	r1, r25
    1d84:	1a 06       	cpc	r1, r26
    1d86:	1b 06       	cpc	r1, r27
    1d88:	ec f1       	brlt	.+122    	; 0x1e04 <__vector_7+0x124>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    1d8a:	82 e2       	ldi	r24, 0x22	; 34
    1d8c:	91 e0       	ldi	r25, 0x01	; 1
    1d8e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <dequeue>
    1d92:	64 e2       	ldi	r22, 0x24	; 36
    1d94:	71 e0       	ldi	r23, 0x01	; 1
    1d96:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <enqueueByDeadline>

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
    1d9a:	e0 91 22 01 	lds	r30, 0x0122
    1d9e:	f0 91 23 01 	lds	r31, 0x0123
    1da2:	30 97       	sbiw	r30, 0x00	; 0
    1da4:	39 f1       	breq	.+78     	; 0x1df4 <__vector_7+0x114>
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	a4 81       	ldd	r26, Z+4	; 0x04
    1dac:	b5 81       	ldd	r27, Z+5	; 0x05
    1dae:	8c 19       	sub	r24, r12
    1db0:	9d 09       	sbc	r25, r13
    1db2:	ae 09       	sbc	r26, r14
    1db4:	bf 09       	sbc	r27, r15
    1db6:	18 16       	cp	r1, r24
    1db8:	19 06       	cpc	r1, r25
    1dba:	1a 06       	cpc	r1, r26
    1dbc:	1b 06       	cpc	r1, r27
    1dbe:	2c f7       	brge	.-54     	; 0x1d8a <__vector_7+0xaa>
    1dc0:	21 c0       	rjmp	.+66     	; 0x1e04 <__vector_7+0x124>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    1dc2:	20 91 84 00 	lds	r18, 0x0084
    1dc6:	30 91 85 00 	lds	r19, 0x0085
    1dca:	ac 01       	movw	r20, r24
    1dcc:	42 1b       	sub	r20, r18
    1dce:	53 0b       	sbc	r21, r19
    1dd0:	41 30       	cpi	r20, 0x01	; 1
    1dd2:	51 05       	cpc	r21, r1
    1dd4:	29 f4       	brne	.+10     	; 0x1de0 <__vector_7+0x100>
    1dd6:	80 91 84 00 	lds	r24, 0x0084
    1dda:	90 91 85 00 	lds	r25, 0x0085
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	90 93 89 00 	sts	0x0089, r25
    1de4:	80 93 88 00 	sts	0x0088, r24
    1de8:	ef e6       	ldi	r30, 0x6F	; 111
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	82 60       	ori	r24, 0x02	; 2
    1df0:	80 83       	st	Z, r24
    1df2:	05 c0       	rjmp	.+10     	; 0x1dfe <__vector_7+0x11e>
    1df4:	ef e6       	ldi	r30, 0x6F	; 111
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8d 7f       	andi	r24, 0xFD	; 253
    1dfc:	80 83       	st	Z, r24
    schedule();
    1dfe:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1e02:	0c c0       	rjmp	.+24     	; 0x1e1c <__vector_7+0x13c>
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	a4 81       	ldd	r26, Z+4	; 0x04
    1e0a:	b5 81       	ldd	r27, Z+5	; 0x05
    1e0c:	20 91 1c 01 	lds	r18, 0x011C
    1e10:	30 91 1d 01 	lds	r19, 0x011D
    1e14:	2a 17       	cp	r18, r26
    1e16:	3b 07       	cpc	r19, r27
    1e18:	69 f7       	brne	.-38     	; 0x1df4 <__vector_7+0x114>
    1e1a:	d3 cf       	rjmp	.-90     	; 0x1dc2 <__vector_7+0xe2>
    schedule();
}
    1e1c:	ff 91       	pop	r31
    1e1e:	ef 91       	pop	r30
    1e20:	bf 91       	pop	r27
    1e22:	af 91       	pop	r26
    1e24:	9f 91       	pop	r25
    1e26:	8f 91       	pop	r24
    1e28:	7f 91       	pop	r23
    1e2a:	6f 91       	pop	r22
    1e2c:	5f 91       	pop	r21
    1e2e:	4f 91       	pop	r20
    1e30:	3f 91       	pop	r19
    1e32:	2f 91       	pop	r18
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	0f 90       	pop	r0
    1e42:	1f 90       	pop	r1
    1e44:	18 95       	reti

00001e46 <async>:
        dispatch(activeStack);
    }
}

/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    1e46:	3f 92       	push	r3
    1e48:	4f 92       	push	r4
    1e4a:	5f 92       	push	r5
    1e4c:	6f 92       	push	r6
    1e4e:	7f 92       	push	r7
    1e50:	8f 92       	push	r8
    1e52:	9f 92       	push	r9
    1e54:	af 92       	push	r10
    1e56:	bf 92       	push	r11
    1e58:	cf 92       	push	r12
    1e5a:	df 92       	push	r13
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	2b 01       	movw	r4, r22
    1e6a:	3c 01       	movw	r6, r24
    1e6c:	49 01       	movw	r8, r18
    1e6e:	5a 01       	movw	r10, r20
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    1e70:	8f b7       	in	r24, 0x3f	; 63
    1e72:	80 78       	andi	r24, 0x80	; 128
    1e74:	38 2e       	mov	r3, r24
    1e76:	f8 94       	cli
    m = dequeue(&msgPool);
    1e78:	86 e0       	ldi	r24, 0x06	; 6
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <dequeue>
    1e80:	ec 01       	movw	r28, r24
    m->to = to; 
    1e82:	1b 87       	std	Y+11, r17	; 0x0b
    1e84:	0a 87       	std	Y+10, r16	; 0x0a
    m->method = meth; 
    1e86:	fd 86       	std	Y+13, r15	; 0x0d
    1e88:	ec 86       	std	Y+12, r14	; 0x0c
    m->arg = arg;
    1e8a:	df 86       	std	Y+15, r13	; 0x0f
    1e8c:	ce 86       	std	Y+14, r12	; 0x0e
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    1e8e:	33 20       	and	r3, r3
    1e90:	61 f0       	breq	.+24     	; 0x1eaa <async+0x64>
    1e92:	e0 91 00 01 	lds	r30, 0x0100
    1e96:	f0 91 01 01 	lds	r31, 0x0101
    1e9a:	02 80       	ldd	r0, Z+2	; 0x02
    1e9c:	f3 81       	ldd	r31, Z+3	; 0x03
    1e9e:	e0 2d       	mov	r30, r0
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	a4 81       	ldd	r26, Z+4	; 0x04
    1ea6:	b5 81       	ldd	r27, Z+5	; 0x05
    1ea8:	08 c0       	rjmp	.+16     	; 0x1eba <async+0x74>
    1eaa:	80 91 1e 01 	lds	r24, 0x011E
    1eae:	90 91 1f 01 	lds	r25, 0x011F
    1eb2:	a0 91 20 01 	lds	r26, 0x0120
    1eb6:	b0 91 21 01 	lds	r27, 0x0121
    1eba:	48 0e       	add	r4, r24
    1ebc:	59 1e       	adc	r5, r25
    1ebe:	6a 1e       	adc	r6, r26
    1ec0:	7b 1e       	adc	r7, r27
    1ec2:	4a 82       	std	Y+2, r4	; 0x02
    1ec4:	5b 82       	std	Y+3, r5	; 0x03
    1ec6:	6c 82       	std	Y+4, r6	; 0x04
    1ec8:	7d 82       	std	Y+5, r7	; 0x05
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    1eca:	18 14       	cp	r1, r8
    1ecc:	19 04       	cpc	r1, r9
    1ece:	1a 04       	cpc	r1, r10
    1ed0:	1b 04       	cpc	r1, r11
    1ed2:	44 f0       	brlt	.+16     	; 0x1ee4 <async+0x9e>
    1ed4:	0f 2e       	mov	r0, r31
    1ed6:	88 24       	eor	r8, r8
    1ed8:	8a 94       	dec	r8
    1eda:	98 2c       	mov	r9, r8
    1edc:	a8 2c       	mov	r10, r8
    1ede:	ff e7       	ldi	r31, 0x7F	; 127
    1ee0:	bf 2e       	mov	r11, r31
    1ee2:	f0 2d       	mov	r31, r0
    1ee4:	84 0c       	add	r8, r4
    1ee6:	95 1c       	adc	r9, r5
    1ee8:	a6 1c       	adc	r10, r6
    1eea:	b7 1c       	adc	r11, r7
    1eec:	8e 82       	std	Y+6, r8	; 0x06
    1eee:	9f 82       	std	Y+7, r9	; 0x07
    1ef0:	a8 86       	std	Y+8, r10	; 0x08
    1ef2:	b9 86       	std	Y+9, r11	; 0x09
    
    TIMERGET(now);
    1ef4:	80 91 1c 01 	lds	r24, 0x011C
    1ef8:	90 91 1d 01 	lds	r25, 0x011D
    1efc:	40 91 84 00 	lds	r20, 0x0084
    1f00:	50 91 85 00 	lds	r21, 0x0085
    1f04:	b0 99       	sbic	0x16, 0	; 22
    1f06:	0e c0       	rjmp	.+28     	; 0x1f24 <async+0xde>
    1f08:	aa 27       	eor	r26, r26
    1f0a:	97 fd       	sbrc	r25, 7
    1f0c:	a0 95       	com	r26
    1f0e:	ba 2f       	mov	r27, r26
    1f10:	dc 01       	movw	r26, r24
    1f12:	99 27       	eor	r25, r25
    1f14:	88 27       	eor	r24, r24
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	84 2b       	or	r24, r20
    1f1c:	95 2b       	or	r25, r21
    1f1e:	a6 2b       	or	r26, r22
    1f20:	b7 2b       	or	r27, r23
    1f22:	12 c0       	rjmp	.+36     	; 0x1f48 <async+0x102>
    1f24:	40 91 84 00 	lds	r20, 0x0084
    1f28:	50 91 85 00 	lds	r21, 0x0085
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	aa 27       	eor	r26, r26
    1f30:	97 fd       	sbrc	r25, 7
    1f32:	a0 95       	com	r26
    1f34:	ba 2f       	mov	r27, r26
    1f36:	dc 01       	movw	r26, r24
    1f38:	99 27       	eor	r25, r25
    1f3a:	88 27       	eor	r24, r24
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	84 2b       	or	r24, r20
    1f42:	95 2b       	or	r25, r21
    1f44:	a6 2b       	or	r26, r22
    1f46:	b7 2b       	or	r27, r23
    if (m->baseline - now > 0) {        // baseline has not yet passed
    1f48:	48 1a       	sub	r4, r24
    1f4a:	59 0a       	sbc	r5, r25
    1f4c:	6a 0a       	sbc	r6, r26
    1f4e:	7b 0a       	sbc	r7, r27
    1f50:	14 14       	cp	r1, r4
    1f52:	15 04       	cpc	r1, r5
    1f54:	16 04       	cpc	r1, r6
    1f56:	17 04       	cpc	r1, r7
    1f58:	ac f5       	brge	.+106    	; 0x1fc4 <async+0x17e>
        enqueueByBaseline(m, &timerQ);
    1f5a:	62 e2       	ldi	r22, 0x22	; 34
    1f5c:	71 e0       	ldi	r23, 0x01	; 1
    1f5e:	ce 01       	movw	r24, r28
    1f60:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <enqueueByBaseline>
        TIMERSET(timerQ);
    1f64:	e0 91 22 01 	lds	r30, 0x0122
    1f68:	f0 91 23 01 	lds	r31, 0x0123
    1f6c:	30 97       	sbiw	r30, 0x00	; 0
    1f6e:	21 f1       	breq	.+72     	; 0x1fb8 <async+0x172>
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	93 81       	ldd	r25, Z+3	; 0x03
    1f74:	a4 81       	ldd	r26, Z+4	; 0x04
    1f76:	b5 81       	ldd	r27, Z+5	; 0x05
    1f78:	20 91 1c 01 	lds	r18, 0x011C
    1f7c:	30 91 1d 01 	lds	r19, 0x011D
    1f80:	2a 17       	cp	r18, r26
    1f82:	3b 07       	cpc	r19, r27
    1f84:	c9 f4       	brne	.+50     	; 0x1fb8 <async+0x172>
    1f86:	20 91 84 00 	lds	r18, 0x0084
    1f8a:	30 91 85 00 	lds	r19, 0x0085
    1f8e:	ac 01       	movw	r20, r24
    1f90:	42 1b       	sub	r20, r18
    1f92:	53 0b       	sbc	r21, r19
    1f94:	41 30       	cpi	r20, 0x01	; 1
    1f96:	51 05       	cpc	r21, r1
    1f98:	29 f4       	brne	.+10     	; 0x1fa4 <async+0x15e>
    1f9a:	80 91 84 00 	lds	r24, 0x0084
    1f9e:	90 91 85 00 	lds	r25, 0x0085
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	90 93 89 00 	sts	0x0089, r25
    1fa8:	80 93 88 00 	sts	0x0088, r24
    1fac:	ef e6       	ldi	r30, 0x6F	; 111
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	82 60       	ori	r24, 0x02	; 2
    1fb4:	80 83       	st	Z, r24
    1fb6:	41 c0       	rjmp	.+130    	; 0x203a <async+0x1f4>
    1fb8:	ef e6       	ldi	r30, 0x6F	; 111
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	8d 7f       	andi	r24, 0xFD	; 253
    1fc0:	80 83       	st	Z, r24
    1fc2:	3b c0       	rjmp	.+118    	; 0x203a <async+0x1f4>
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
    1fc4:	64 e2       	ldi	r22, 0x24	; 36
    1fc6:	71 e0       	ldi	r23, 0x01	; 1
    1fc8:	ce 01       	movw	r24, r28
    1fca:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <enqueueByDeadline>
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
    1fce:	33 20       	and	r3, r3
    1fd0:	b9 f1       	breq	.+110    	; 0x2040 <async+0x1fa>
    1fd2:	80 91 04 01 	lds	r24, 0x0104
    1fd6:	90 91 05 01 	lds	r25, 0x0105
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	81 f1       	breq	.+96     	; 0x203e <async+0x1f8>
    1fde:	e0 91 02 01 	lds	r30, 0x0102
    1fe2:	f0 91 03 01 	lds	r31, 0x0103
    1fe6:	20 91 24 01 	lds	r18, 0x0124
    1fea:	30 91 25 01 	lds	r19, 0x0125
    1fee:	02 81       	ldd	r16, Z+2	; 0x02
    1ff0:	13 81       	ldd	r17, Z+3	; 0x03
    1ff2:	d9 01       	movw	r26, r18
    1ff4:	16 96       	adiw	r26, 0x06	; 6
    1ff6:	4d 91       	ld	r20, X+
    1ff8:	5d 91       	ld	r21, X+
    1ffa:	6d 91       	ld	r22, X+
    1ffc:	7c 91       	ld	r23, X
    1ffe:	19 97       	sbiw	r26, 0x09	; 9
    2000:	d8 01       	movw	r26, r16
    2002:	16 96       	adiw	r26, 0x06	; 6
    2004:	0d 91       	ld	r16, X+
    2006:	1d 91       	ld	r17, X+
    2008:	2d 91       	ld	r18, X+
    200a:	3c 91       	ld	r19, X
    200c:	19 97       	sbiw	r26, 0x09	; 9
    200e:	40 1b       	sub	r20, r16
    2010:	51 0b       	sbc	r21, r17
    2012:	62 0b       	sbc	r22, r18
    2014:	73 0b       	sbc	r23, r19
    2016:	9a f4       	brpl	.+38     	; 0x203e <async+0x1f8>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    2018:	dc 01       	movw	r26, r24
    201a:	2d 91       	ld	r18, X+
    201c:	3c 91       	ld	r19, X
    201e:	11 97       	sbiw	r26, 0x01	; 1
    2020:	30 93 05 01 	sts	0x0105, r19
    2024:	20 93 04 01 	sts	0x0104, r18
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    2028:	ed 93       	st	X+, r30
    202a:	fc 93       	st	X, r31
    *stack = t;
    202c:	90 93 03 01 	sts	0x0103, r25
    2030:	80 93 02 01 	sts	0x0102, r24
        TIMERSET(timerQ);
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
            push(pop(&threadPool), &activeStack);
            dispatch(activeStack);
    2034:	0e 94 92 05 	call	0xb24	; 0xb24 <dispatch>
    2038:	02 c0       	rjmp	.+4      	; 0x203e <async+0x1f8>
        }
    }
    
    ENABLE(status);
    203a:	33 20       	and	r3, r3
    203c:	09 f0       	breq	.+2      	; 0x2040 <async+0x1fa>
    203e:	78 94       	sei
    return m;
}
    2040:	ce 01       	movw	r24, r28
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	ff 90       	pop	r15
    204c:	ef 90       	pop	r14
    204e:	df 90       	pop	r13
    2050:	cf 90       	pop	r12
    2052:	bf 90       	pop	r11
    2054:	af 90       	pop	r10
    2056:	9f 90       	pop	r9
    2058:	8f 90       	pop	r8
    205a:	7f 90       	pop	r7
    205c:	6f 90       	pop	r6
    205e:	5f 90       	pop	r5
    2060:	4f 90       	pop	r4
    2062:	3f 90       	pop	r3
    2064:	08 95       	ret

00002066 <sync>:

int sync(Object *to, Method meth, int arg) {
    2066:	bf 92       	push	r11
    2068:	cf 92       	push	r12
    206a:	df 92       	push	r13
    206c:	ef 92       	push	r14
    206e:	ff 92       	push	r15
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	8c 01       	movw	r16, r24
    207a:	7b 01       	movw	r14, r22
    207c:	6a 01       	movw	r12, r20
    Thread t;
    int result;
    char status, status_ignore;
    
    DISABLE(status);
    207e:	8f b7       	in	r24, 0x3f	; 63
    2080:	80 78       	andi	r24, 0x80	; 128
    2082:	b8 2e       	mov	r11, r24
    2084:	f8 94       	cli
    t = to->ownedBy;
    2086:	f8 01       	movw	r30, r16
    2088:	c0 81       	ld	r28, Z
    208a:	d1 81       	ldd	r29, Z+1	; 0x01
    if (t) {                            // to is already locked
    208c:	20 97       	sbiw	r28, 0x00	; 0
    208e:	51 f1       	breq	.+84     	; 0x20e4 <sync+0x7e>
        while (t->waitsFor) 
    2090:	ac 81       	ldd	r26, Y+4	; 0x04
    2092:	bd 81       	ldd	r27, Y+5	; 0x05
    2094:	10 97       	sbiw	r26, 0x00	; 0
    2096:	31 f0       	breq	.+12     	; 0x20a4 <sync+0x3e>
            t = t->waitsFor->ownedBy;
    2098:	cd 91       	ld	r28, X+
    209a:	dc 91       	ld	r29, X
    char status, status_ignore;
    
    DISABLE(status);
    t = to->ownedBy;
    if (t) {                            // to is already locked
        while (t->waitsFor) 
    209c:	ac 81       	ldd	r26, Y+4	; 0x04
    209e:	bd 81       	ldd	r27, Y+5	; 0x05
    20a0:	10 97       	sbiw	r26, 0x00	; 0
    20a2:	d1 f7       	brne	.-12     	; 0x2098 <sync+0x32>
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
    20a4:	a0 91 00 01 	lds	r26, 0x0100
    20a8:	b0 91 01 01 	lds	r27, 0x0101
    20ac:	ca 17       	cp	r28, r26
    20ae:	db 07       	cpc	r29, r27
    20b0:	21 f0       	breq	.+8      	; 0x20ba <sync+0x54>
    20b2:	bb 20       	and	r11, r11
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <sync+0x52>
    20b6:	42 c0       	rjmp	.+132    	; 0x213c <sync+0xd6>
    20b8:	07 c0       	rjmp	.+14     	; 0x20c8 <sync+0x62>
            ENABLE(status);
    20ba:	bb 20       	and	r11, r11
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <sync+0x5a>
    20be:	41 c0       	rjmp	.+130    	; 0x2142 <sync+0xdc>
    20c0:	78 94       	sei
            return -1;
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	9f ef       	ldi	r25, 0xFF	; 255
    20c6:	5b c0       	rjmp	.+182    	; 0x217e <sync+0x118>
        }
        if (to->wantedBy)               // must be a lower priority thread
    20c8:	f8 01       	movw	r30, r16
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <sync+0x6e>
    20d2:	3d c0       	rjmp	.+122    	; 0x214e <sync+0xe8>
            to->wantedBy->waitsFor = NULL;
    20d4:	fc 01       	movw	r30, r24
    20d6:	15 82       	std	Z+5, r1	; 0x05
    20d8:	14 82       	std	Z+4, r1	; 0x04
    20da:	39 c0       	rjmp	.+114    	; 0x214e <sync+0xe8>
        to->wantedBy = current;
        current->waitsFor = to;
        dispatch(t);
        if (current->msg == NULL) {     // message was aborted (when called from run)
            ENABLE(status);
    20dc:	78 94       	sei
            return 0;
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	4d c0       	rjmp	.+154    	; 0x217e <sync+0x118>
        }
    }
    to->ownedBy = current;
    20e4:	80 91 00 01 	lds	r24, 0x0100
    20e8:	90 91 01 01 	lds	r25, 0x0101
    20ec:	f8 01       	movw	r30, r16
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	80 83       	st	Z, r24
    ENABLE(status && (to->wantedBy != INSTALLED_TAG));
    20f2:	bb 20       	and	r11, r11
    20f4:	31 f0       	breq	.+12     	; 0x2102 <sync+0x9c>
    20f6:	f8 01       	movw	r30, r16
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	09 f0       	breq	.+2      	; 0x2102 <sync+0x9c>
    2100:	78 94       	sei
    result = meth(to, arg);
    2102:	b6 01       	movw	r22, r12
    2104:	c8 01       	movw	r24, r16
    2106:	f7 01       	movw	r30, r14
    2108:	09 95       	icall
    210a:	d8 2f       	mov	r29, r24
    210c:	c9 2f       	mov	r28, r25
    DISABLE(status_ignore);
    210e:	8f b7       	in	r24, 0x3f	; 63
    2110:	f8 94       	cli
    to->ownedBy = NULL; 
    2112:	f8 01       	movw	r30, r16
    2114:	11 82       	std	Z+1, r1	; 0x01
    2116:	10 82       	st	Z, r1
    t = to->wantedBy;
    2118:	82 81       	ldd	r24, Z+2	; 0x02
    211a:	93 81       	ldd	r25, Z+3	; 0x03
    if (t && (t != INSTALLED_TAG)) {      // we have run on someone's behalf
    211c:	82 30       	cpi	r24, 0x02	; 2
    211e:	91 05       	cpc	r25, r1
    2120:	38 f0       	brcs	.+14     	; 0x2130 <sync+0xca>
        to->wantedBy = NULL; 
    2122:	13 82       	std	Z+3, r1	; 0x03
    2124:	12 82       	std	Z+2, r1	; 0x02
        t->waitsFor = NULL;
    2126:	fc 01       	movw	r30, r24
    2128:	15 82       	std	Z+5, r1	; 0x05
    212a:	14 82       	std	Z+4, r1	; 0x04
        dispatch(t);
    212c:	0e 94 92 05 	call	0xb24	; 0xb24 <dispatch>
    }
    ENABLE(status);
    2130:	bb 20       	and	r11, r11
    2132:	51 f0       	breq	.+20     	; 0x2148 <sync+0xe2>
    2134:	78 94       	sei
    return result;
    2136:	8d 2f       	mov	r24, r29
    2138:	9c 2f       	mov	r25, r28
    213a:	21 c0       	rjmp	.+66     	; 0x217e <sync+0x118>
    if (t) {                            // to is already locked
        while (t->waitsFor) 
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
            ENABLE(status);
            return -1;
    213c:	8f ef       	ldi	r24, 0xFF	; 255
    213e:	9f ef       	ldi	r25, 0xFF	; 255
    2140:	1e c0       	rjmp	.+60     	; 0x217e <sync+0x118>
    2142:	8f ef       	ldi	r24, 0xFF	; 255
    2144:	9f ef       	ldi	r25, 0xFF	; 255
    2146:	1b c0       	rjmp	.+54     	; 0x217e <sync+0x118>
        to->wantedBy = NULL; 
        t->waitsFor = NULL;
        dispatch(t);
    }
    ENABLE(status);
    return result;
    2148:	8d 2f       	mov	r24, r29
    214a:	9c 2f       	mov	r25, r28
    214c:	18 c0       	rjmp	.+48     	; 0x217e <sync+0x118>
            ENABLE(status);
            return -1;
        }
        if (to->wantedBy)               // must be a lower priority thread
            to->wantedBy->waitsFor = NULL;
        to->wantedBy = current;
    214e:	f8 01       	movw	r30, r16
    2150:	b3 83       	std	Z+3, r27	; 0x03
    2152:	a2 83       	std	Z+2, r26	; 0x02
        current->waitsFor = to;
    2154:	15 96       	adiw	r26, 0x05	; 5
    2156:	1c 93       	st	X, r17
    2158:	0e 93       	st	-X, r16
    215a:	14 97       	sbiw	r26, 0x04	; 4
        dispatch(t);
    215c:	ce 01       	movw	r24, r28
    215e:	0e 94 92 05 	call	0xb24	; 0xb24 <dispatch>
        if (current->msg == NULL) {     // message was aborted (when called from run)
    2162:	e0 91 00 01 	lds	r30, 0x0100
    2166:	f0 91 01 01 	lds	r31, 0x0101
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	89 2b       	or	r24, r25
    2170:	09 f4       	brne	.+2      	; 0x2174 <sync+0x10e>
    2172:	b4 cf       	rjmp	.-152    	; 0x20dc <sync+0x76>
            ENABLE(status);
            return 0;
        }
    }
    to->ownedBy = current;
    2174:	cf 01       	movw	r24, r30
    2176:	f8 01       	movw	r30, r16
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
    217c:	bc cf       	rjmp	.-136    	; 0x20f6 <sync+0x90>
        t->waitsFor = NULL;
        dispatch(t);
    }
    ENABLE(status);
    return result;
}
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	ff 90       	pop	r15
    2188:	ef 90       	pop	r14
    218a:	df 90       	pop	r13
    218c:	cf 90       	pop	r12
    218e:	bf 90       	pop	r11
    2190:	08 95       	ret

00002192 <run>:
    }
}

static void run(void) {
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    2192:	00 91 00 01 	lds	r16, 0x0100
    2196:	10 91 01 01 	lds	r17, 0x0101
    219a:	84 e2       	ldi	r24, 0x24	; 36
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <dequeue>
    21a2:	ec 01       	movw	r28, r24
    21a4:	d8 01       	movw	r26, r16
    21a6:	13 96       	adiw	r26, 0x03	; 3
    21a8:	9c 93       	st	X, r25
    21aa:	8e 93       	st	-X, r24
    21ac:	12 97       	sbiw	r26, 0x02	; 2
        Msg oldMsg;
        char status = 1;
        
        ENABLE(status);
    21ae:	78 94       	sei
        SYNC(this->to, this->method, this->arg);
    21b0:	4e 85       	ldd	r20, Y+14	; 0x0e
    21b2:	5f 85       	ldd	r21, Y+15	; 0x0f
    21b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    21b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    21b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    21bc:	0e 94 33 10 	call	0x2066	; 0x2066 <sync>
        DISABLE(status);
    21c0:	8f b7       	in	r24, 0x3f	; 63
    21c2:	f8 94       	cli
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}

void insert(Msg m, Msg *queue) {
    m->next = *queue;
    21c4:	80 91 06 01 	lds	r24, 0x0106
    21c8:	90 91 07 01 	lds	r25, 0x0107
    21cc:	99 83       	std	Y+1, r25	; 0x01
    21ce:	88 83       	st	Y, r24
    *queue = m;
    21d0:	d0 93 07 01 	sts	0x0107, r29
    21d4:	c0 93 06 01 	sts	0x0106, r28
        ENABLE(status);
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
       
        oldMsg = activeStack->next->msg;
    21d8:	e0 91 02 01 	lds	r30, 0x0102
    21dc:	f0 91 03 01 	lds	r31, 0x0103
    21e0:	00 81       	ld	r16, Z
    21e2:	11 81       	ldd	r17, Z+1	; 0x01
    21e4:	e8 01       	movw	r28, r16
    21e6:	2a 81       	ldd	r18, Y+2	; 0x02
    21e8:	3b 81       	ldd	r19, Y+3	; 0x03
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    21ea:	a0 91 24 01 	lds	r26, 0x0124
    21ee:	b0 91 25 01 	lds	r27, 0x0125
    21f2:	10 97       	sbiw	r26, 0x00	; 0
    21f4:	c1 f0       	breq	.+48     	; 0x2226 <run+0x94>
    21f6:	21 15       	cp	r18, r1
    21f8:	31 05       	cpc	r19, r1
    21fa:	59 f2       	breq	.-106    	; 0x2192 <run>
    21fc:	16 96       	adiw	r26, 0x06	; 6
    21fe:	8d 91       	ld	r24, X+
    2200:	9d 91       	ld	r25, X+
    2202:	0d 90       	ld	r0, X+
    2204:	bc 91       	ld	r27, X
    2206:	a0 2d       	mov	r26, r0
    2208:	e9 01       	movw	r28, r18
    220a:	4e 81       	ldd	r20, Y+6	; 0x06
    220c:	5f 81       	ldd	r21, Y+7	; 0x07
    220e:	68 85       	ldd	r22, Y+8	; 0x08
    2210:	79 85       	ldd	r23, Y+9	; 0x09
    2212:	84 1b       	sub	r24, r20
    2214:	95 0b       	sbc	r25, r21
    2216:	a6 0b       	sbc	r26, r22
    2218:	b7 0b       	sbc	r27, r23
    221a:	18 16       	cp	r1, r24
    221c:	19 06       	cpc	r1, r25
    221e:	1a 06       	cpc	r1, r26
    2220:	1b 06       	cpc	r1, r27
    2222:	0c f0       	brlt	.+2      	; 0x2226 <run+0x94>
    2224:	b6 cf       	rjmp	.-148    	; 0x2192 <run>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    2226:	10 93 03 01 	sts	0x0103, r17
    222a:	00 93 02 01 	sts	0x0102, r16
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    222e:	80 91 04 01 	lds	r24, 0x0104
    2232:	90 91 05 01 	lds	r25, 0x0105
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	80 83       	st	Z, r24
    *stack = t;
    223a:	f0 93 05 01 	sts	0x0105, r31
    223e:	e0 93 04 01 	sts	0x0104, r30
       
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
    2242:	a0 91 02 01 	lds	r26, 0x0102
    2246:	b0 91 03 01 	lds	r27, 0x0103
            while (t->waitsFor) 
    224a:	14 96       	adiw	r26, 0x04	; 4
    224c:	ed 91       	ld	r30, X+
    224e:	fc 91       	ld	r31, X
    2250:	15 97       	sbiw	r26, 0x05	; 5
    2252:	30 97       	sbiw	r30, 0x00	; 0
    2254:	41 f0       	breq	.+16     	; 0x2266 <run+0xd4>
	            t = t->waitsFor->ownedBy;
    2256:	a0 81       	ld	r26, Z
    2258:	b1 81       	ldd	r27, Z+1	; 0x01
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
    225a:	14 96       	adiw	r26, 0x04	; 4
    225c:	ed 91       	ld	r30, X+
    225e:	fc 91       	ld	r31, X
    2260:	15 97       	sbiw	r26, 0x05	; 5
    2262:	30 97       	sbiw	r30, 0x00	; 0
    2264:	c1 f7       	brne	.-16     	; 0x2256 <run+0xc4>
	            t = t->waitsFor->ownedBy;
            dispatch(t);
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 92 05 	call	0xb24	; 0xb24 <dispatch>
    226c:	92 cf       	rjmp	.-220    	; 0x2192 <run>

0000226e <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    226e:	42 31       	cpi	r20, 0x12	; 18
    2270:	b8 f4       	brcc	.+46     	; 0x22a0 <install+0x32>
        char status;
        DISABLE(status);
    2272:	af b7       	in	r26, 0x3f	; 63
    2274:	f8 94       	cli
        otable[i] = obj;
    2276:	50 e0       	ldi	r21, 0x00	; 0
    2278:	44 0f       	add	r20, r20
    227a:	55 1f       	adc	r21, r21
    227c:	fa 01       	movw	r30, r20
    227e:	ea 5d       	subi	r30, 0xDA	; 218
    2280:	fe 4f       	sbci	r31, 0xFE	; 254
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
        mtable[i] = m;
    2286:	fa 01       	movw	r30, r20
    2288:	e2 54       	subi	r30, 0x42	; 66
    228a:	fe 4f       	sbci	r31, 0xFE	; 254
    228c:	71 83       	std	Z+1, r23	; 0x01
    228e:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2290:	21 e0       	ldi	r18, 0x01	; 1
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	fc 01       	movw	r30, r24
    2296:	33 83       	std	Z+3, r19	; 0x03
    2298:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    229a:	aa 23       	and	r26, r26
    229c:	0c f4       	brge	.+2      	; 0x22a0 <install+0x32>
    229e:	78 94       	sei
    22a0:	08 95       	ret

000022a2 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    22a2:	8c 01       	movw	r16, r24
    22a4:	7b 01       	movw	r14, r22
    22a6:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    22a8:	8f b7       	in	r24, 0x3f	; 63
    22aa:	f8 94       	cli
    initialize();
    22ac:	0e 94 21 05 	call	0xa42	; 0xa42 <initialize>
    ENABLE(1);
    22b0:	78 94       	sei
    if (m != NULL)
    22b2:	e1 14       	cp	r14, r1
    22b4:	f1 04       	cpc	r15, r1
    22b6:	41 f0       	breq	.+16     	; 0x22c8 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	a9 01       	movw	r20, r18
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	cb 01       	movw	r24, r22
    22c4:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <async>
    DISABLE(status);
    22c8:	8f b7       	in	r24, 0x3f	; 63
    22ca:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    22cc:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    ENABLE(1);
    22d0:	78 94       	sei
    while (1) {
        SLEEP();
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	83 bf       	out	0x33, r24	; 51
    22d6:	88 95       	sleep
    22d8:	fd cf       	rjmp	.-6      	; 0x22d4 <tinytimber+0x32>

000022da <write>:
 */ 
#include "LCD.h"
#include "Pulser.h"
#include "avr/io.h"
void write(Writer *self, int arg) {
	if (arg==4){ //generator 1
    22da:	64 30       	cpi	r22, 0x04	; 4
    22dc:	71 05       	cpc	r23, r1
    22de:	29 f4       	brne	.+10     	; 0x22ea <write+0x10>
		//LCDDR1 = LCDDR1 ^ 0xFFFF;
		PORTE = PORTE ^ 16; //XOR toggles between xxx1 xxxx and xxx0 xxxx. also need to keep old value from port 6, not overwrite
    22e0:	9e b1       	in	r25, 0x0e	; 14
    22e2:	80 e1       	ldi	r24, 0x10	; 16
    22e4:	89 27       	eor	r24, r25
    22e6:	8e b9       	out	0x0e, r24	; 14
    22e8:	08 95       	ret
	} else if (arg==6) { //generator 2
    22ea:	66 30       	cpi	r22, 0x06	; 6
    22ec:	71 05       	cpc	r23, r1
    22ee:	21 f4       	brne	.+8      	; 0x22f8 <write+0x1e>
		PORTE = PORTE ^ 64;
    22f0:	9e b1       	in	r25, 0x0e	; 14
    22f2:	80 e4       	ldi	r24, 0x40	; 64
    22f4:	89 27       	eor	r24, r25
    22f6:	8e b9       	out	0x0e, r24	; 14
    22f8:	08 95       	ret

000022fa <__divmodhi4>:
    22fa:	97 fb       	bst	r25, 7
    22fc:	07 2e       	mov	r0, r23
    22fe:	16 f4       	brtc	.+4      	; 0x2304 <__divmodhi4+0xa>
    2300:	00 94       	com	r0
    2302:	07 d0       	rcall	.+14     	; 0x2312 <__divmodhi4_neg1>
    2304:	77 fd       	sbrc	r23, 7
    2306:	09 d0       	rcall	.+18     	; 0x231a <__divmodhi4_neg2>
    2308:	0e 94 98 11 	call	0x2330	; 0x2330 <__udivmodhi4>
    230c:	07 fc       	sbrc	r0, 7
    230e:	05 d0       	rcall	.+10     	; 0x231a <__divmodhi4_neg2>
    2310:	3e f4       	brtc	.+14     	; 0x2320 <__divmodhi4_exit>

00002312 <__divmodhi4_neg1>:
    2312:	90 95       	com	r25
    2314:	81 95       	neg	r24
    2316:	9f 4f       	sbci	r25, 0xFF	; 255
    2318:	08 95       	ret

0000231a <__divmodhi4_neg2>:
    231a:	70 95       	com	r23
    231c:	61 95       	neg	r22
    231e:	7f 4f       	sbci	r23, 0xFF	; 255

00002320 <__divmodhi4_exit>:
    2320:	08 95       	ret

00002322 <__usmulhisi3>:
    2322:	0e 94 ac 11 	call	0x2358	; 0x2358 <__umulhisi3>

00002326 <__usmulhisi3_tail>:
    2326:	b7 ff       	sbrs	r27, 7
    2328:	08 95       	ret
    232a:	82 1b       	sub	r24, r18
    232c:	93 0b       	sbc	r25, r19
    232e:	08 95       	ret

00002330 <__udivmodhi4>:
    2330:	aa 1b       	sub	r26, r26
    2332:	bb 1b       	sub	r27, r27
    2334:	51 e1       	ldi	r21, 0x11	; 17
    2336:	07 c0       	rjmp	.+14     	; 0x2346 <__udivmodhi4_ep>

00002338 <__udivmodhi4_loop>:
    2338:	aa 1f       	adc	r26, r26
    233a:	bb 1f       	adc	r27, r27
    233c:	a6 17       	cp	r26, r22
    233e:	b7 07       	cpc	r27, r23
    2340:	10 f0       	brcs	.+4      	; 0x2346 <__udivmodhi4_ep>
    2342:	a6 1b       	sub	r26, r22
    2344:	b7 0b       	sbc	r27, r23

00002346 <__udivmodhi4_ep>:
    2346:	88 1f       	adc	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	5a 95       	dec	r21
    234c:	a9 f7       	brne	.-22     	; 0x2338 <__udivmodhi4_loop>
    234e:	80 95       	com	r24
    2350:	90 95       	com	r25
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	08 95       	ret

00002358 <__umulhisi3>:
    2358:	a2 9f       	mul	r26, r18
    235a:	b0 01       	movw	r22, r0
    235c:	b3 9f       	mul	r27, r19
    235e:	c0 01       	movw	r24, r0
    2360:	a3 9f       	mul	r26, r19
    2362:	70 0d       	add	r23, r0
    2364:	81 1d       	adc	r24, r1
    2366:	11 24       	eor	r1, r1
    2368:	91 1d       	adc	r25, r1
    236a:	b2 9f       	mul	r27, r18
    236c:	70 0d       	add	r23, r0
    236e:	81 1d       	adc	r24, r1
    2370:	11 24       	eor	r1, r1
    2372:	91 1d       	adc	r25, r1
    2374:	08 95       	ret

00002376 <setjmp>:
    2376:	dc 01       	movw	r26, r24
    2378:	2d 92       	st	X+, r2
    237a:	3d 92       	st	X+, r3
    237c:	4d 92       	st	X+, r4
    237e:	5d 92       	st	X+, r5
    2380:	6d 92       	st	X+, r6
    2382:	7d 92       	st	X+, r7
    2384:	8d 92       	st	X+, r8
    2386:	9d 92       	st	X+, r9
    2388:	ad 92       	st	X+, r10
    238a:	bd 92       	st	X+, r11
    238c:	cd 92       	st	X+, r12
    238e:	dd 92       	st	X+, r13
    2390:	ed 92       	st	X+, r14
    2392:	fd 92       	st	X+, r15
    2394:	0d 93       	st	X+, r16
    2396:	1d 93       	st	X+, r17
    2398:	cd 93       	st	X+, r28
    239a:	dd 93       	st	X+, r29
    239c:	ff 91       	pop	r31
    239e:	ef 91       	pop	r30
    23a0:	8d b7       	in	r24, 0x3d	; 61
    23a2:	8d 93       	st	X+, r24
    23a4:	8e b7       	in	r24, 0x3e	; 62
    23a6:	8d 93       	st	X+, r24
    23a8:	8f b7       	in	r24, 0x3f	; 63
    23aa:	8d 93       	st	X+, r24
    23ac:	ed 93       	st	X+, r30
    23ae:	fd 93       	st	X+, r31
    23b0:	88 27       	eor	r24, r24
    23b2:	99 27       	eor	r25, r25
    23b4:	09 94       	ijmp

000023b6 <longjmp>:
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	81 30       	cpi	r24, 0x01	; 1
    23bc:	91 05       	cpc	r25, r1
    23be:	81 1d       	adc	r24, r1
    23c0:	2d 90       	ld	r2, X+
    23c2:	3d 90       	ld	r3, X+
    23c4:	4d 90       	ld	r4, X+
    23c6:	5d 90       	ld	r5, X+
    23c8:	6d 90       	ld	r6, X+
    23ca:	7d 90       	ld	r7, X+
    23cc:	8d 90       	ld	r8, X+
    23ce:	9d 90       	ld	r9, X+
    23d0:	ad 90       	ld	r10, X+
    23d2:	bd 90       	ld	r11, X+
    23d4:	cd 90       	ld	r12, X+
    23d6:	dd 90       	ld	r13, X+
    23d8:	ed 90       	ld	r14, X+
    23da:	fd 90       	ld	r15, X+
    23dc:	0d 91       	ld	r16, X+
    23de:	1d 91       	ld	r17, X+
    23e0:	cd 91       	ld	r28, X+
    23e2:	dd 91       	ld	r29, X+
    23e4:	ed 91       	ld	r30, X+
    23e6:	fd 91       	ld	r31, X+
    23e8:	0d 90       	ld	r0, X+
    23ea:	f8 94       	cli
    23ec:	fe bf       	out	0x3e, r31	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	ed bf       	out	0x3d, r30	; 61
    23f2:	ed 91       	ld	r30, X+
    23f4:	fd 91       	ld	r31, X+
    23f6:	09 94       	ijmp

000023f8 <_exit>:
    23f8:	f8 94       	cli

000023fa <__stop_program>:
    23fa:	ff cf       	rjmp	.-2      	; 0x23fa <__stop_program>
