
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000241c  000024b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000241c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  000024cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  000024fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027e0  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ab4  00000000  00000000  00004f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d13  00000000  00000000  000059e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000be4  00000000  00000000  000066f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000066d  00000000  00000000  000072d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000027f3  00000000  00000000  00007945  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__vector_1>
       8:	0c 94 65 06 	jmp	0xcca	; 0xcca <__vector_2>
       c:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_3>
      10:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__vector_4>
      14:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__vector_9>
      28:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_10>
      2c:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_11>
      30:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__vector_12>
      34:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__vector_13>
      38:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_14>
      3c:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__vector_15>
      40:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__vector_16>
      44:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_17>
      48:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__vector_18>
      4c:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__vector_19>
      50:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_20>
      54:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__vector_21>
      58:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ec e1       	ldi	r30, 0x1C	; 28
      70:	f4 e2       	ldi	r31, 0x24	; 36
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 b0 01 	call	0x360	; 0x360 <main>
      92:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <checkhold>:
		ASYNC(self->LCD, update_screen, 0);
		AFTER(MSEC(500), self->Pulse, metronome, 1);
	}
}
void checkhold(GUI *self)
{
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
	self->checking_hold = 1; //kinda shit way of locking, tried to prevent multiple clicks acting as hold
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	9b 87       	std	Y+11, r25	; 0x0b
      b2:	8a 87       	std	Y+10, r24	; 0x0a
	if (((PINB & 64) == 0 || (PINB & 128) == 0))
      b4:	1e 9b       	sbis	0x03, 6	; 3
      b6:	02 c0       	rjmp	.+4      	; 0xbc <checkhold+0x22>
      b8:	1f 99       	sbic	0x03, 7	; 3
      ba:	16 c0       	rjmp	.+44     	; 0xe8 <checkhold+0x4e>
	{									  //if any of the buttons still being held after the delay calling this method
		ASYNC(self->Pulse, metronome, 1); //start the hold loop
      bc:	08 85       	ldd	r16, Y+8	; 0x08
      be:	19 85       	ldd	r17, Y+9	; 0x09
      c0:	cc 24       	eor	r12, r12
      c2:	c3 94       	inc	r12
      c4:	d1 2c       	mov	r13, r1
      c6:	0f 2e       	mov	r0, r31
      c8:	fb ed       	ldi	r31, 0xDB	; 219
      ca:	ef 2e       	mov	r14, r31
      cc:	f4 e0       	ldi	r31, 0x04	; 4
      ce:	ff 2e       	mov	r15, r31
      d0:	f0 2d       	mov	r31, r0
      d2:	20 e0       	ldi	r18, 0x00	; 0
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	a9 01       	movw	r20, r18
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	cb 01       	movw	r24, r22
      de:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
		self->checking_hold = 0;
      e2:	1b 86       	std	Y+11, r1	; 0x0b
      e4:	1a 86       	std	Y+10, r1	; 0x0a
      e6:	02 c0       	rjmp	.+4      	; 0xec <checkhold+0x52>
	}
	else
	{
		self->checking_hold = 0;
      e8:	1b 86       	std	Y+11, r1	; 0x0b
      ea:	1a 86       	std	Y+10, r1	; 0x0a
		return; //not holding
	}
}
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	1f 91       	pop	r17
      f2:	0f 91       	pop	r16
      f4:	ff 90       	pop	r15
      f6:	ef 90       	pop	r14
      f8:	df 90       	pop	r13
      fa:	cf 90       	pop	r12
      fc:	08 95       	ret

000000fe <portB>:
PORTE I/O bits correspond to left or right

must have a been a easier way to figure the bits out??
*/
void portB(GUI *self)
{
      fe:	cf 92       	push	r12
     100:	df 92       	push	r13
     102:	ef 92       	push	r14
     104:	ff 92       	push	r15
     106:	0f 93       	push	r16
     108:	1f 93       	push	r17
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	ec 01       	movw	r28, r24
	//BIT 4:  press
	if ((PINB & 16) == 0)
     110:	1c 99       	sbic	0x03, 4	; 3
     112:	69 c0       	rjmp	.+210    	; 0x1e6 <portB+0xe8>
	{
		if (self->LCD->curgen->freq == 0)
     114:	ee 81       	ldd	r30, Y+6	; 0x06
     116:	ff 81       	ldd	r31, Y+7	; 0x07
     118:	00 84       	ldd	r0, Z+8	; 0x08
     11a:	f1 85       	ldd	r31, Z+9	; 0x09
     11c:	e0 2d       	mov	r30, r0
     11e:	84 81       	ldd	r24, Z+4	; 0x04
     120:	95 81       	ldd	r25, Z+5	; 0x05
     122:	89 2b       	or	r24, r25
     124:	e1 f5       	brne	.+120    	; 0x19e <portB+0xa0>
		{
			self->LCD->curgen->freq = self->LCD->curgen->saved_freq;						 //save the freq
     126:	86 81       	ldd	r24, Z+6	; 0x06
     128:	97 81       	ldd	r25, Z+7	; 0x07
     12a:	95 83       	std	Z+5, r25	; 0x05
     12c:	84 83       	std	Z+4, r24	; 0x04
			self->LCD->curgen->saved_freq = 0;												 //and reset
     12e:	ee 81       	ldd	r30, Y+6	; 0x06
     130:	ff 81       	ldd	r31, Y+7	; 0x07
     132:	00 84       	ldd	r0, Z+8	; 0x08
     134:	f1 85       	ldd	r31, Z+9	; 0x09
     136:	e0 2d       	mov	r30, r0
     138:	17 82       	std	Z+7, r1	; 0x07
     13a:	16 82       	std	Z+6, r1	; 0x06
			AFTER(MSEC(1000 / self->LCD->curgen->freq / 2), self->LCD->curgen, infinity, 0); //need to resume pulsing after retriveing freq
     13c:	ee 81       	ldd	r30, Y+6	; 0x06
     13e:	ff 81       	ldd	r31, Y+7	; 0x07
     140:	00 85       	ldd	r16, Z+8	; 0x08
     142:	11 85       	ldd	r17, Z+9	; 0x09
     144:	f8 01       	movw	r30, r16
     146:	64 81       	ldd	r22, Z+4	; 0x04
     148:	75 81       	ldd	r23, Z+5	; 0x05
     14a:	84 ef       	ldi	r24, 0xF4	; 244
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	0e 94 8d 11 	call	0x231a	; 0x231a <__divmodhi4>
     152:	2d e7       	ldi	r18, 0x7D	; 125
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	db 01       	movw	r26, r22
     158:	0e 94 a1 11 	call	0x2342	; 0x2342 <__usmulhisi3>
     15c:	6b 01       	movw	r12, r22
     15e:	7c 01       	movw	r14, r24
     160:	99 23       	and	r25, r25
     162:	2c f4       	brge	.+10     	; 0x16e <portB+0x70>
     164:	f3 e0       	ldi	r31, 0x03	; 3
     166:	cf 0e       	add	r12, r31
     168:	d1 1c       	adc	r13, r1
     16a:	e1 1c       	adc	r14, r1
     16c:	f1 1c       	adc	r15, r1
     16e:	c7 01       	movw	r24, r14
     170:	b6 01       	movw	r22, r12
     172:	95 95       	asr	r25
     174:	87 95       	ror	r24
     176:	77 95       	ror	r23
     178:	67 95       	ror	r22
     17a:	95 95       	asr	r25
     17c:	87 95       	ror	r24
     17e:	77 95       	ror	r23
     180:	67 95       	ror	r22
     182:	c1 2c       	mov	r12, r1
     184:	d1 2c       	mov	r13, r1
     186:	0f 2e       	mov	r0, r31
     188:	f7 e2       	ldi	r31, 0x27	; 39
     18a:	ef 2e       	mov	r14, r31
     18c:	f4 e0       	ldi	r31, 0x04	; 4
     18e:	ff 2e       	mov	r15, r31
     190:	f0 2d       	mov	r31, r0
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	a9 01       	movw	r20, r18
     198:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
     19c:	11 c0       	rjmp	.+34     	; 0x1c0 <portB+0xc2>
		}
		else if (self->LCD->curgen->freq != 0)
		{
			ASYNC(self->LCD->curgen, save, 0); //otherwise save the freq
     19e:	c1 2c       	mov	r12, r1
     1a0:	d1 2c       	mov	r13, r1
     1a2:	0f 2e       	mov	r0, r31
     1a4:	f1 ed       	ldi	r31, 0xD1	; 209
     1a6:	ef 2e       	mov	r14, r31
     1a8:	f4 e0       	ldi	r31, 0x04	; 4
     1aa:	ff 2e       	mov	r15, r31
     1ac:	f0 2d       	mov	r31, r0
     1ae:	8f 01       	movw	r16, r30
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	a9 01       	movw	r20, r18
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	cb 01       	movw	r24, r22
     1bc:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
		}
		ASYNC(self->LCD, update_screen, 0); //and update the screen
     1c0:	0e 81       	ldd	r16, Y+6	; 0x06
     1c2:	1f 81       	ldd	r17, Y+7	; 0x07
     1c4:	c1 2c       	mov	r12, r1
     1c6:	d1 2c       	mov	r13, r1
     1c8:	0f 2e       	mov	r0, r31
     1ca:	f9 ee       	ldi	r31, 0xE9	; 233
     1cc:	ef 2e       	mov	r14, r31
     1ce:	f3 e0       	ldi	r31, 0x03	; 3
     1d0:	ff 2e       	mov	r15, r31
     1d2:	f0 2d       	mov	r31, r0
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	a9 01       	movw	r20, r18
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	cb 01       	movw	r24, r22
     1e0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
     1e4:	64 c0       	rjmp	.+200    	; 0x2ae <portB+0x1b0>
	}

	//BIT 6:  up
	else if ((PINB & 64) == 0)
     1e6:	1e 99       	sbic	0x03, 6	; 3
     1e8:	30 c0       	rjmp	.+96     	; 0x24a <portB+0x14c>
	{
		SYNC(self->LCD->curgen, update_F, 1); //SYNC since screen update needs proper value
     1ea:	ee 81       	ldd	r30, Y+6	; 0x06
     1ec:	ff 81       	ldd	r31, Y+7	; 0x07
     1ee:	41 e0       	ldi	r20, 0x01	; 1
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	6d e7       	ldi	r22, 0x7D	; 125
     1f4:	74 e0       	ldi	r23, 0x04	; 4
     1f6:	80 85       	ldd	r24, Z+8	; 0x08
     1f8:	91 85       	ldd	r25, Z+9	; 0x09
     1fa:	0e 94 3e 10 	call	0x207c	; 0x207c <sync>
		ASYNC(self->LCD, update_screen, 0);
     1fe:	0e 81       	ldd	r16, Y+6	; 0x06
     200:	1f 81       	ldd	r17, Y+7	; 0x07
     202:	c1 2c       	mov	r12, r1
     204:	d1 2c       	mov	r13, r1
     206:	0f 2e       	mov	r0, r31
     208:	f9 ee       	ldi	r31, 0xE9	; 233
     20a:	ef 2e       	mov	r14, r31
     20c:	f3 e0       	ldi	r31, 0x03	; 3
     20e:	ff 2e       	mov	r15, r31
     210:	f0 2d       	mov	r31, r0
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	a9 01       	movw	r20, r18
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	cb 01       	movw	r24, r22
     21e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
		AFTER(MSEC(500), self, checkhold, 1); //bit of start delay for hold
     222:	cc 24       	eor	r12, r12
     224:	c3 94       	inc	r12
     226:	d1 2c       	mov	r13, r1
     228:	0f 2e       	mov	r0, r31
     22a:	fd e4       	ldi	r31, 0x4D	; 77
     22c:	ef 2e       	mov	r14, r31
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	ff 2e       	mov	r15, r31
     232:	f0 2d       	mov	r31, r0
     234:	8e 01       	movw	r16, r28
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	a9 01       	movw	r20, r18
     23c:	69 e0       	ldi	r22, 0x09	; 9
     23e:	7d e3       	ldi	r23, 0x3D	; 61
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
     248:	32 c0       	rjmp	.+100    	; 0x2ae <portB+0x1b0>
	}

	//BIT 7:  down
	else if ((PINB & 128) == 0)
     24a:	1f 99       	sbic	0x03, 7	; 3
     24c:	30 c0       	rjmp	.+96     	; 0x2ae <portB+0x1b0>
	{
		SYNC(self->LCD->curgen, update_F, -1); //same as up but negative arg
     24e:	ee 81       	ldd	r30, Y+6	; 0x06
     250:	ff 81       	ldd	r31, Y+7	; 0x07
     252:	4f ef       	ldi	r20, 0xFF	; 255
     254:	5f ef       	ldi	r21, 0xFF	; 255
     256:	6d e7       	ldi	r22, 0x7D	; 125
     258:	74 e0       	ldi	r23, 0x04	; 4
     25a:	80 85       	ldd	r24, Z+8	; 0x08
     25c:	91 85       	ldd	r25, Z+9	; 0x09
     25e:	0e 94 3e 10 	call	0x207c	; 0x207c <sync>
		ASYNC(self->LCD, update_screen, 0);
     262:	0e 81       	ldd	r16, Y+6	; 0x06
     264:	1f 81       	ldd	r17, Y+7	; 0x07
     266:	c1 2c       	mov	r12, r1
     268:	d1 2c       	mov	r13, r1
     26a:	0f 2e       	mov	r0, r31
     26c:	f9 ee       	ldi	r31, 0xE9	; 233
     26e:	ef 2e       	mov	r14, r31
     270:	f3 e0       	ldi	r31, 0x03	; 3
     272:	ff 2e       	mov	r15, r31
     274:	f0 2d       	mov	r31, r0
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	a9 01       	movw	r20, r18
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	cb 01       	movw	r24, r22
     282:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
		AFTER(MSEC(500), self->Pulse, metronome, 1);
     286:	08 85       	ldd	r16, Y+8	; 0x08
     288:	19 85       	ldd	r17, Y+9	; 0x09
     28a:	cc 24       	eor	r12, r12
     28c:	c3 94       	inc	r12
     28e:	d1 2c       	mov	r13, r1
     290:	0f 2e       	mov	r0, r31
     292:	fb ed       	ldi	r31, 0xDB	; 219
     294:	ef 2e       	mov	r14, r31
     296:	f4 e0       	ldi	r31, 0x04	; 4
     298:	ff 2e       	mov	r15, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	a9 01       	movw	r20, r18
     2a2:	69 e0       	ldi	r22, 0x09	; 9
     2a4:	7d e3       	ldi	r23, 0x3D	; 61
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
	}
}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	08 95       	ret

000002c0 <portE>:
		self->checking_hold = 0;
		return; //not holding
	}
}
void portE(GUI *self)
{
     2c0:	cf 92       	push	r12
     2c2:	df 92       	push	r13
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	ec 01       	movw	r28, r24
	//BIT 2 = left
	if ((PINE & 4) == 0) //swapping generator look at shift arg
     2d2:	62 99       	sbic	0x0c, 2	; 12
     2d4:	14 c0       	rjmp	.+40     	; 0x2fe <portE+0x3e>
	{
		ASYNC(self->LCD, shift, 1);
     2d6:	0e 81       	ldd	r16, Y+6	; 0x06
     2d8:	1f 81       	ldd	r17, Y+7	; 0x07
     2da:	cc 24       	eor	r12, r12
     2dc:	c3 94       	inc	r12
     2de:	d1 2c       	mov	r13, r1
     2e0:	0f 2e       	mov	r0, r31
     2e2:	f7 e0       	ldi	r31, 0x07	; 7
     2e4:	ef 2e       	mov	r14, r31
     2e6:	f4 e0       	ldi	r31, 0x04	; 4
     2e8:	ff 2e       	mov	r15, r31
     2ea:	f0 2d       	mov	r31, r0
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	a9 01       	movw	r20, r18
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	cb 01       	movw	r24, r22
     2f8:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
     2fc:	16 c0       	rjmp	.+44     	; 0x32a <portE+0x6a>
	}
	else if ((PINE & 8) == 0)
     2fe:	63 99       	sbic	0x0c, 3	; 12
     300:	14 c0       	rjmp	.+40     	; 0x32a <portE+0x6a>
	{
		ASYNC(self->LCD, shift, 2);
     302:	0e 81       	ldd	r16, Y+6	; 0x06
     304:	1f 81       	ldd	r17, Y+7	; 0x07
     306:	68 94       	set
     308:	cc 24       	eor	r12, r12
     30a:	c1 f8       	bld	r12, 1
     30c:	d1 2c       	mov	r13, r1
     30e:	0f 2e       	mov	r0, r31
     310:	f7 e0       	ldi	r31, 0x07	; 7
     312:	ef 2e       	mov	r14, r31
     314:	f4 e0       	ldi	r31, 0x04	; 4
     316:	ff 2e       	mov	r15, r31
     318:	f0 2d       	mov	r31, r0
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	a9 01       	movw	r20, r18
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	cb 01       	movw	r24, r22
     326:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
	}
	ASYNC(self->LCD, update_screen, 0);
     32a:	0e 81       	ldd	r16, Y+6	; 0x06
     32c:	1f 81       	ldd	r17, Y+7	; 0x07
     32e:	c1 2c       	mov	r12, r1
     330:	d1 2c       	mov	r13, r1
     332:	0f 2e       	mov	r0, r31
     334:	f9 ee       	ldi	r31, 0xE9	; 233
     336:	ef 2e       	mov	r14, r31
     338:	f3 e0       	ldi	r31, 0x03	; 3
     33a:	ff 2e       	mov	r15, r31
     33c:	f0 2d       	mov	r31, r0
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	a9 01       	movw	r20, r18
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	cb 01       	movw	r24, r22
     34a:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	df 90       	pop	r13
     35c:	cf 90       	pop	r12
     35e:	08 95       	ret

00000360 <main>:
#include "GUI.h"
#include "LCD.h"
#include "Pulser.h"

int main(void)
{
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	c0 54       	subi	r28, 0x40	; 64
     36e:	d1 09       	sbc	r29, r1
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61

	LCD_init(); //also contains other inits
     37a:	0e 94 30 02 	call	0x460	; 0x460 <LCD_init>

	//Creating objects
	Writer Write1 = initWriter(0);
     37e:	1a 82       	std	Y+2, r1	; 0x02
     380:	19 82       	std	Y+1, r1	; 0x01
     382:	1c 82       	std	Y+4, r1	; 0x04
     384:	1b 82       	std	Y+3, r1	; 0x03
     386:	1e 82       	std	Y+6, r1	; 0x06
     388:	1d 82       	std	Y+5, r1	; 0x05
	PulseGen Gen1 = initGEN(0, 0, &Write1, 4, 0);
     38a:	18 86       	std	Y+8, r1	; 0x08
     38c:	1f 82       	std	Y+7, r1	; 0x07
     38e:	1a 86       	std	Y+10, r1	; 0x0a
     390:	19 86       	std	Y+9, r1	; 0x09
     392:	1c 86       	std	Y+12, r1	; 0x0c
     394:	1b 86       	std	Y+11, r1	; 0x0b
     396:	1e 86       	std	Y+14, r1	; 0x0e
     398:	1d 86       	std	Y+13, r1	; 0x0d
     39a:	ce 01       	movw	r24, r28
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	98 8b       	std	Y+16, r25	; 0x10
     3a0:	8f 87       	std	Y+15, r24	; 0x0f
     3a2:	24 e0       	ldi	r18, 0x04	; 4
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	3a 8b       	std	Y+18, r19	; 0x12
     3a8:	29 8b       	std	Y+17, r18	; 0x11
     3aa:	1c 8a       	std	Y+20, r1	; 0x14
     3ac:	1b 8a       	std	Y+19, r1	; 0x13
	PulseGen Gen2 = initGEN(0, 0, &Write1, 6, 0);
     3ae:	1e 8a       	std	Y+22, r1	; 0x16
     3b0:	1d 8a       	std	Y+21, r1	; 0x15
     3b2:	18 8e       	std	Y+24, r1	; 0x18
     3b4:	1f 8a       	std	Y+23, r1	; 0x17
     3b6:	1a 8e       	std	Y+26, r1	; 0x1a
     3b8:	19 8e       	std	Y+25, r1	; 0x19
     3ba:	1c 8e       	std	Y+28, r1	; 0x1c
     3bc:	1b 8e       	std	Y+27, r1	; 0x1b
     3be:	9e 8f       	std	Y+30, r25	; 0x1e
     3c0:	8d 8f       	std	Y+29, r24	; 0x1d
     3c2:	86 e0       	ldi	r24, 0x06	; 6
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	98 a3       	std	Y+32, r25	; 0x20
     3c8:	8f 8f       	std	Y+31, r24	; 0x1f
     3ca:	1a a2       	std	Y+34, r1	; 0x22
     3cc:	19 a2       	std	Y+33, r1	; 0x21
	LCD LCD1 = initLCD(&Gen1, &Gen2, &Gen1);
     3ce:	1c a2       	std	Y+36, r1	; 0x24
     3d0:	1b a2       	std	Y+35, r1	; 0x23
     3d2:	1e a2       	std	Y+38, r1	; 0x26
     3d4:	1d a2       	std	Y+37, r1	; 0x25
     3d6:	ce 01       	movw	r24, r28
     3d8:	07 96       	adiw	r24, 0x07	; 7
     3da:	98 a7       	std	Y+40, r25	; 0x28
     3dc:	8f a3       	std	Y+39, r24	; 0x27
     3de:	9e 01       	movw	r18, r28
     3e0:	2b 5e       	subi	r18, 0xEB	; 235
     3e2:	3f 4f       	sbci	r19, 0xFF	; 255
     3e4:	3a a7       	std	Y+42, r19	; 0x2a
     3e6:	29 a7       	std	Y+41, r18	; 0x29
     3e8:	9c a7       	std	Y+44, r25	; 0x2c
     3ea:	8b a7       	std	Y+43, r24	; 0x2b
	Pulser Pulse1 = initPulser(0, &LCD1);
     3ec:	1e a6       	std	Y+46, r1	; 0x2e
     3ee:	1d a6       	std	Y+45, r1	; 0x2d
     3f0:	18 aa       	std	Y+48, r1	; 0x30
     3f2:	1f a6       	std	Y+47, r1	; 0x2f
     3f4:	1a aa       	std	Y+50, r1	; 0x32
     3f6:	19 aa       	std	Y+49, r1	; 0x31
     3f8:	8e 01       	movw	r16, r28
     3fa:	0d 5d       	subi	r16, 0xDD	; 221
     3fc:	1f 4f       	sbci	r17, 0xFF	; 255
     3fe:	1c ab       	std	Y+52, r17	; 0x34
     400:	0b ab       	std	Y+51, r16	; 0x33
	GUI GUI1 = initGUI(0, &LCD1, &Pulse1, 0);
     402:	1e aa       	std	Y+54, r1	; 0x36
     404:	1d aa       	std	Y+53, r1	; 0x35
     406:	18 ae       	std	Y+56, r1	; 0x38
     408:	1f aa       	std	Y+55, r1	; 0x37
     40a:	1a ae       	std	Y+58, r1	; 0x3a
     40c:	19 ae       	std	Y+57, r1	; 0x39
     40e:	1c af       	std	Y+60, r17	; 0x3c
     410:	0b af       	std	Y+59, r16	; 0x3b
     412:	86 96       	adiw	r24, 0x26	; 38
     414:	9e af       	std	Y+62, r25	; 0x3e
     416:	8d af       	std	Y+61, r24	; 0x3d
     418:	21 96       	adiw	r28, 0x01	; 1
     41a:	1f ae       	std	Y+63, r1	; 0x3f
     41c:	1e ae       	std	Y+62, r1	; 0x3e
     41e:	21 97       	sbiw	r28, 0x01	; 1

	//Installing method as interrupt handler with obj and interrupt source as arguments
	INSTALL(&GUI1, portB, IRQ_PCINT1); //Button down/up/press interrupt handler.
     420:	42 e0       	ldi	r20, 0x02	; 2
     422:	6f e7       	ldi	r22, 0x7F	; 127
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	08 96       	adiw	r24, 0x08	; 8
     428:	0e 94 42 11 	call	0x2284	; 0x2284 <install>
	INSTALL(&GUI1, portE, IRQ_PCINT0); //Button right/left interrupt handler.
     42c:	41 e0       	ldi	r20, 0x01	; 1
     42e:	60 e6       	ldi	r22, 0x60	; 96
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	ce 01       	movw	r24, r28
     434:	c5 96       	adiw	r24, 0x35	; 53
     436:	0e 94 42 11 	call	0x2284	; 0x2284 <install>

	//Must give control to TinyTimber scheduler, starting event-handling. Method(obj,arg) is startup event
	return TINYTIMBER(&LCD1, update_screen, 0);
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	69 ee       	ldi	r22, 0xE9	; 233
     440:	73 e0       	ldi	r23, 0x03	; 3
     442:	c8 01       	movw	r24, r16
     444:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <tinytimber>
     448:	c0 5c       	subi	r28, 0xC0	; 192
     44a:	df 4f       	sbci	r29, 0xFF	; 255
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	08 95       	ret

00000460 <LCD_init>:
#include "LCD.h"
#include <avr/io.h>

void LCD_init(void)
{
	CLKPR = 0x80;
     460:	e1 e6       	ldi	r30, 0x61	; 97
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 e8       	ldi	r24, 0x80	; 128
     466:	80 83       	st	Z, r24
	CLKPR = 0x00;
     468:	10 82       	st	Z, r1

	PORTB = 208;
     46a:	20 ed       	ldi	r18, 0xD0	; 208
     46c:	25 b9       	out	0x05, r18	; 5
	PORTE = 12;
     46e:	9c e0       	ldi	r25, 0x0C	; 12
     470:	9e b9       	out	0x0e, r25	; 14
	EIMSK = 192;
     472:	80 ec       	ldi	r24, 0xC0	; 192
     474:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 = 208;
     476:	20 93 6c 00 	sts	0x006C, r18
	PCMSK0 = 12;
     47a:	90 93 6b 00 	sts	0x006B, r25

	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     47e:	97 eb       	ldi	r25, 0xB7	; 183
     480:	90 93 e5 00 	sts	0x00E5, r25
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     484:	97 e0       	ldi	r25, 0x07	; 7
     486:	90 93 e6 00 	sts	0x00E6, r25
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     48a:	9f e0       	ldi	r25, 0x0F	; 15
     48c:	90 93 e7 00 	sts	0x00E7, r25
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     490:	80 93 e4 00 	sts	0x00E4, r24

	LCDDR3 = 1 | LCDDR3; //gen 1 selected indicator on
     494:	ef ee       	ldi	r30, 0xEF	; 239
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	81 60       	ori	r24, 0x01	; 1
     49c:	80 83       	st	Z, r24
	LCDDR1 = 0x0;		 //gen 2 -.- off
     49e:	10 92 ed 00 	sts	0x00ED, r1
     4a2:	08 95       	ret

000004a4 <writeChar>:
}

void writeChar(char ch, int pos)
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	64 97       	sbiw	r28, 0x14	; 20
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
	int numbers[10] = {
     4b8:	94 e1       	ldi	r25, 0x14	; 20
     4ba:	e8 e0       	ldi	r30, 0x08	; 8
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	de 01       	movw	r26, r28
     4c0:	11 96       	adiw	r26, 0x01	; 1
     4c2:	01 90       	ld	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	9a 95       	dec	r25
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <writeChar+0x1e>
		0x1B41,
		0x1F41,
		0x0111,
		0x1F51,
		0x0B51};
	if (pos >= 0 && pos <= 5)
     4ca:	66 30       	cpi	r22, 0x06	; 6
     4cc:	71 05       	cpc	r23, r1
     4ce:	08 f0       	brcs	.+2      	; 0x4d2 <writeChar+0x2e>
     4d0:	43 c1       	rjmp	.+646    	; 0x758 <__stack+0x259>
	{
		if (ch < 0 || ch > 9)
     4d2:	8a 30       	cpi	r24, 0x0A	; 10
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <writeChar+0x34>
		{
			ch = ch - '0';
     4d6:	80 53       	subi	r24, 0x30	; 48
		}
		if (ch >= 0 && ch < 9)
     4d8:	89 30       	cpi	r24, 0x09	; 9
     4da:	08 f0       	brcs	.+2      	; 0x4de <writeChar+0x3a>
     4dc:	3d c1       	rjmp	.+634    	; 0x758 <__stack+0x259>
		{
			int mask = 0xF;
			int mask2 = 0xF0;
			int towrite = numbers[ch];
     4de:	e8 2f       	mov	r30, r24
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	ec 0f       	add	r30, r28
     4e8:	fd 1f       	adc	r31, r29
     4ea:	81 81       	ldd	r24, Z+1	; 0x01
     4ec:	92 81       	ldd	r25, Z+2	; 0x02

			if (pos == 0)
     4ee:	61 15       	cp	r22, r1
     4f0:	71 05       	cpc	r23, r1
     4f2:	71 f5       	brne	.+92     	; 0x550 <__stack+0x51>
			{
				LCDDR0 = (mask & towrite) | (LCDDR0)&mask2;
     4f4:	ec ee       	ldi	r30, 0xEC	; 236
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	20 81       	ld	r18, Z
     4fa:	38 2f       	mov	r19, r24
     4fc:	3f 70       	andi	r19, 0x0F	; 15
     4fe:	20 7f       	andi	r18, 0xF0	; 240
     500:	23 2b       	or	r18, r19
     502:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     504:	9c 01       	movw	r18, r24
     506:	35 95       	asr	r19
     508:	27 95       	ror	r18
     50a:	35 95       	asr	r19
     50c:	27 95       	ror	r18
     50e:	35 95       	asr	r19
     510:	27 95       	ror	r18
     512:	35 95       	asr	r19
     514:	27 95       	ror	r18
				LCDDR5 = (mask & towrite) | (LCDDR5)&mask2;
     516:	e1 ef       	ldi	r30, 0xF1	; 241
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	30 81       	ld	r19, Z
     51c:	2f 70       	andi	r18, 0x0F	; 15
     51e:	30 7f       	andi	r19, 0xF0	; 240
     520:	23 2b       	or	r18, r19
     522:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) | (LCDDR10)&mask2;
     524:	e6 ef       	ldi	r30, 0xF6	; 246
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	20 81       	ld	r18, Z
     52a:	39 2f       	mov	r19, r25
     52c:	3f 70       	andi	r19, 0x0F	; 15
     52e:	20 7f       	andi	r18, 0xF0	; 240
     530:	23 2b       	or	r18, r19
     532:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     534:	80 e1       	ldi	r24, 0x10	; 16
     536:	98 02       	muls	r25, r24
     538:	81 2d       	mov	r24, r1
     53a:	99 0b       	sbc	r25, r25
     53c:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) | (LCDDR15)&mask2;
     53e:	eb ef       	ldi	r30, 0xFB	; 251
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	20 81       	ld	r18, Z
     544:	38 2f       	mov	r19, r24
     546:	3f 70       	andi	r19, 0x0F	; 15
     548:	20 7f       	andi	r18, 0xF0	; 240
     54a:	23 2b       	or	r18, r19
     54c:	20 83       	st	Z, r18
     54e:	66 c0       	rjmp	.+204    	; 0x61c <__stack+0x11d>
			}
			if (pos == 1)
     550:	61 30       	cpi	r22, 0x01	; 1
     552:	71 05       	cpc	r23, r1
     554:	91 f5       	brne	.+100    	; 0x5ba <__stack+0xbb>
			{
				LCDDR0 = (mask & towrite) << 4 | LCDDR0 & mask;
     556:	ec ee       	ldi	r30, 0xEC	; 236
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	20 81       	ld	r18, Z
     55c:	38 2f       	mov	r19, r24
     55e:	32 95       	swap	r19
     560:	30 7f       	andi	r19, 0xF0	; 240
     562:	2f 70       	andi	r18, 0x0F	; 15
     564:	23 2b       	or	r18, r19
     566:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR5 = (mask & towrite) << 4 | LCDDR5 & mask;
     568:	e1 ef       	ldi	r30, 0xF1	; 241
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	40 81       	ld	r20, Z
     56e:	9c 01       	movw	r18, r24
     570:	20 7f       	andi	r18, 0xF0	; 240
     572:	33 27       	eor	r19, r19
     574:	34 2f       	mov	r19, r20
     576:	3f 70       	andi	r19, 0x0F	; 15
     578:	23 2b       	or	r18, r19
     57a:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) << 4 | LCDDR10 & mask;
     57c:	e6 ef       	ldi	r30, 0xF6	; 246
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	40 81       	ld	r20, Z
     582:	9c 01       	movw	r18, r24
     584:	32 95       	swap	r19
     586:	22 95       	swap	r18
     588:	2f 70       	andi	r18, 0x0F	; 15
     58a:	23 27       	eor	r18, r19
     58c:	3f 70       	andi	r19, 0x0F	; 15
     58e:	23 27       	eor	r18, r19
     590:	20 7f       	andi	r18, 0xF0	; 240
     592:	33 27       	eor	r19, r19
     594:	34 2f       	mov	r19, r20
     596:	3f 70       	andi	r19, 0x0F	; 15
     598:	23 2b       	or	r18, r19
     59a:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	98 02       	muls	r25, r24
     5a0:	81 2d       	mov	r24, r1
     5a2:	99 0b       	sbc	r25, r25
     5a4:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) << 4 | LCDDR15 & mask;
     5a6:	eb ef       	ldi	r30, 0xFB	; 251
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	20 81       	ld	r18, Z
     5ac:	38 2f       	mov	r19, r24
     5ae:	32 95       	swap	r19
     5b0:	30 7f       	andi	r19, 0xF0	; 240
     5b2:	2f 70       	andi	r18, 0x0F	; 15
     5b4:	23 2b       	or	r18, r19
     5b6:	20 83       	st	Z, r18
     5b8:	69 c0       	rjmp	.+210    	; 0x68c <__stack+0x18d>
			}
			if (pos == 2)
     5ba:	62 30       	cpi	r22, 0x02	; 2
     5bc:	71 05       	cpc	r23, r1
     5be:	71 f5       	brne	.+92     	; 0x61c <__stack+0x11d>
			{
				LCDDR1 = (mask & towrite) | (LCDDR1)&mask2;
     5c0:	ed ee       	ldi	r30, 0xED	; 237
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	20 81       	ld	r18, Z
     5c6:	38 2f       	mov	r19, r24
     5c8:	3f 70       	andi	r19, 0x0F	; 15
     5ca:	20 7f       	andi	r18, 0xF0	; 240
     5cc:	23 2b       	or	r18, r19
     5ce:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     5d0:	9c 01       	movw	r18, r24
     5d2:	35 95       	asr	r19
     5d4:	27 95       	ror	r18
     5d6:	35 95       	asr	r19
     5d8:	27 95       	ror	r18
     5da:	35 95       	asr	r19
     5dc:	27 95       	ror	r18
     5de:	35 95       	asr	r19
     5e0:	27 95       	ror	r18
				LCDDR6 = (mask & towrite) | (LCDDR6)&mask2;
     5e2:	e2 ef       	ldi	r30, 0xF2	; 242
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	30 81       	ld	r19, Z
     5e8:	2f 70       	andi	r18, 0x0F	; 15
     5ea:	30 7f       	andi	r19, 0xF0	; 240
     5ec:	23 2b       	or	r18, r19
     5ee:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) | (LCDDR11)&mask2;
     5f0:	e7 ef       	ldi	r30, 0xF7	; 247
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	20 81       	ld	r18, Z
     5f6:	39 2f       	mov	r19, r25
     5f8:	3f 70       	andi	r19, 0x0F	; 15
     5fa:	20 7f       	andi	r18, 0xF0	; 240
     5fc:	23 2b       	or	r18, r19
     5fe:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     600:	80 e1       	ldi	r24, 0x10	; 16
     602:	98 02       	muls	r25, r24
     604:	81 2d       	mov	r24, r1
     606:	99 0b       	sbc	r25, r25
     608:	11 24       	eor	r1, r1
				LCDDR16 = (mask & towrite) | (LCDDR16)&mask2;
     60a:	ec ef       	ldi	r30, 0xFC	; 252
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	20 81       	ld	r18, Z
     610:	38 2f       	mov	r19, r24
     612:	3f 70       	andi	r19, 0x0F	; 15
     614:	20 7f       	andi	r18, 0xF0	; 240
     616:	23 2b       	or	r18, r19
     618:	20 83       	st	Z, r18
     61a:	67 c0       	rjmp	.+206    	; 0x6ea <__stack+0x1eb>
			}
			if (pos == 3)
     61c:	63 30       	cpi	r22, 0x03	; 3
     61e:	71 05       	cpc	r23, r1
     620:	a9 f5       	brne	.+106    	; 0x68c <__stack+0x18d>
			{
				LCDDR1 = (mask & towrite) << 4 | LCDDR1 & mask;
     622:	ed ee       	ldi	r30, 0xED	; 237
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	20 81       	ld	r18, Z
     628:	38 2f       	mov	r19, r24
     62a:	32 95       	swap	r19
     62c:	30 7f       	andi	r19, 0xF0	; 240
     62e:	2f 70       	andi	r18, 0x0F	; 15
     630:	23 2b       	or	r18, r19
     632:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR6 = (mask & towrite) << 4 | LCDDR6 & mask;
     634:	e2 ef       	ldi	r30, 0xF2	; 242
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	40 81       	ld	r20, Z
     63a:	9c 01       	movw	r18, r24
     63c:	20 7f       	andi	r18, 0xF0	; 240
     63e:	33 27       	eor	r19, r19
     640:	34 2f       	mov	r19, r20
     642:	3f 70       	andi	r19, 0x0F	; 15
     644:	23 2b       	or	r18, r19
     646:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) << 4 | LCDDR11 & mask;
     648:	e7 ef       	ldi	r30, 0xF7	; 247
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	40 81       	ld	r20, Z
     64e:	9c 01       	movw	r18, r24
     650:	32 95       	swap	r19
     652:	22 95       	swap	r18
     654:	2f 70       	andi	r18, 0x0F	; 15
     656:	23 27       	eor	r18, r19
     658:	3f 70       	andi	r19, 0x0F	; 15
     65a:	23 27       	eor	r18, r19
     65c:	20 7f       	andi	r18, 0xF0	; 240
     65e:	33 27       	eor	r19, r19
     660:	34 2f       	mov	r19, r20
     662:	3f 70       	andi	r19, 0x0F	; 15
     664:	23 2b       	or	r18, r19
     666:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR16 = (mask & towrite) << 4 | LCDDR16 & mask;
     668:	ec ef       	ldi	r30, 0xFC	; 252
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	20 81       	ld	r18, Z
     66e:	89 2f       	mov	r24, r25
     670:	99 27       	eor	r25, r25
     672:	82 95       	swap	r24
     674:	8f 70       	andi	r24, 0x0F	; 15
     676:	82 95       	swap	r24
     678:	92 95       	swap	r25
     67a:	90 7f       	andi	r25, 0xF0	; 240
     67c:	98 27       	eor	r25, r24
     67e:	80 7f       	andi	r24, 0xF0	; 240
     680:	98 27       	eor	r25, r24
     682:	92 2f       	mov	r25, r18
     684:	9f 70       	andi	r25, 0x0F	; 15
     686:	89 2b       	or	r24, r25
     688:	80 83       	st	Z, r24
     68a:	66 c0       	rjmp	.+204    	; 0x758 <__stack+0x259>
			}
			if (pos == 4)
     68c:	64 30       	cpi	r22, 0x04	; 4
     68e:	71 05       	cpc	r23, r1
     690:	61 f5       	brne	.+88     	; 0x6ea <__stack+0x1eb>
			{
				LCDDR2 = (mask & towrite) | LCDDR2 & mask2;
     692:	ee ee       	ldi	r30, 0xEE	; 238
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	20 81       	ld	r18, Z
     698:	38 2f       	mov	r19, r24
     69a:	3f 70       	andi	r19, 0x0F	; 15
     69c:	20 7f       	andi	r18, 0xF0	; 240
     69e:	23 2b       	or	r18, r19
     6a0:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
     6a2:	9c 01       	movw	r18, r24
     6a4:	35 95       	asr	r19
     6a6:	27 95       	ror	r18
     6a8:	35 95       	asr	r19
     6aa:	27 95       	ror	r18
     6ac:	35 95       	asr	r19
     6ae:	27 95       	ror	r18
     6b0:	35 95       	asr	r19
     6b2:	27 95       	ror	r18
				LCDDR7 = (mask & towrite) | LCDDR7 & mask2;
     6b4:	e3 ef       	ldi	r30, 0xF3	; 243
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	2f 70       	andi	r18, 0x0F	; 15
     6bc:	80 7f       	andi	r24, 0xF0	; 240
     6be:	28 2b       	or	r18, r24
     6c0:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite) | LCDDR12 & mask2;
     6c2:	e8 ef       	ldi	r30, 0xF8	; 248
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
     6c8:	29 2f       	mov	r18, r25
     6ca:	2f 70       	andi	r18, 0x0F	; 15
     6cc:	80 7f       	andi	r24, 0xF0	; 240
     6ce:	82 2b       	or	r24, r18
     6d0:	80 83       	st	Z, r24
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite) | LCDDR17 & mask2;
     6d2:	ed ef       	ldi	r30, 0xFD	; 253
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
				LCDDR2 = (mask & towrite) | LCDDR2 & mask2;
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) | LCDDR7 & mask2;
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite) | LCDDR12 & mask2;
				towrite = (towrite >> 4);
     6d8:	95 95       	asr	r25
     6da:	95 95       	asr	r25
     6dc:	95 95       	asr	r25
     6de:	95 95       	asr	r25
				LCDDR17 = (mask & towrite) | LCDDR17 & mask2;
     6e0:	9f 70       	andi	r25, 0x0F	; 15
     6e2:	80 7f       	andi	r24, 0xF0	; 240
     6e4:	89 2b       	or	r24, r25
     6e6:	80 83       	st	Z, r24
     6e8:	37 c0       	rjmp	.+110    	; 0x758 <__stack+0x259>
			}
			if (pos == 5)
     6ea:	65 30       	cpi	r22, 0x05	; 5
     6ec:	71 05       	cpc	r23, r1
     6ee:	a1 f5       	brne	.+104    	; 0x758 <__stack+0x259>
			{
				LCDDR2 = (mask & towrite) << 4 | LCDDR2 & mask;
     6f0:	ee ee       	ldi	r30, 0xEE	; 238
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	20 81       	ld	r18, Z
     6f6:	38 2f       	mov	r19, r24
     6f8:	32 95       	swap	r19
     6fa:	30 7f       	andi	r19, 0xF0	; 240
     6fc:	2f 70       	andi	r18, 0x0F	; 15
     6fe:	23 2b       	or	r18, r19
     700:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) << 4 | LCDDR7 & mask;
     702:	e3 ef       	ldi	r30, 0xF3	; 243
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	40 81       	ld	r20, Z
     708:	9c 01       	movw	r18, r24
     70a:	20 7f       	andi	r18, 0xF0	; 240
     70c:	33 27       	eor	r19, r19
     70e:	34 2f       	mov	r19, r20
     710:	3f 70       	andi	r19, 0x0F	; 15
     712:	23 2b       	or	r18, r19
     714:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite) << 4 | LCDDR12 & mask;
     716:	e8 ef       	ldi	r30, 0xF8	; 248
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	40 81       	ld	r20, Z
     71c:	9c 01       	movw	r18, r24
     71e:	32 95       	swap	r19
     720:	22 95       	swap	r18
     722:	2f 70       	andi	r18, 0x0F	; 15
     724:	23 27       	eor	r18, r19
     726:	3f 70       	andi	r19, 0x0F	; 15
     728:	23 27       	eor	r18, r19
     72a:	20 7f       	andi	r18, 0xF0	; 240
     72c:	33 27       	eor	r19, r19
     72e:	34 2f       	mov	r19, r20
     730:	3f 70       	andi	r19, 0x0F	; 15
     732:	23 2b       	or	r18, r19
     734:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite) << 4 | LCDDR17 & mask;
     736:	ed ef       	ldi	r30, 0xFD	; 253
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	20 81       	ld	r18, Z
     73c:	89 2f       	mov	r24, r25
     73e:	99 27       	eor	r25, r25
     740:	82 95       	swap	r24
     742:	8f 70       	andi	r24, 0x0F	; 15
     744:	82 95       	swap	r24
     746:	92 95       	swap	r25
     748:	90 7f       	andi	r25, 0xF0	; 240
     74a:	98 27       	eor	r25, r24
     74c:	80 7f       	andi	r24, 0xF0	; 240
     74e:	98 27       	eor	r25, r24
     750:	92 2f       	mov	r25, r18
     752:	9f 70       	andi	r25, 0x0F	; 15
     754:	89 2b       	or	r24, r25
     756:	80 83       	st	Z, r24
			}
		}
	}
}
     758:	64 96       	adiw	r28, 0x14	; 20
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <printAt>:

void printAt(long num, int pos)
{
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	16 2f       	mov	r17, r22
     774:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar((char)num % 100 / 10 + '0', pp);
     776:	89 e2       	ldi	r24, 0x29	; 41
     778:	68 9f       	mul	r22, r24
     77a:	81 2d       	mov	r24, r1
     77c:	11 24       	eor	r1, r1
     77e:	82 95       	swap	r24
     780:	8f 70       	andi	r24, 0x0F	; 15
     782:	96 2f       	mov	r25, r22
     784:	24 e6       	ldi	r18, 0x64	; 100
     786:	82 9f       	mul	r24, r18
     788:	90 19       	sub	r25, r0
     78a:	11 24       	eor	r1, r1
     78c:	0d ec       	ldi	r16, 0xCD	; 205
     78e:	90 9f       	mul	r25, r16
     790:	81 2d       	mov	r24, r1
     792:	11 24       	eor	r1, r1
     794:	86 95       	lsr	r24
     796:	86 95       	lsr	r24
     798:	86 95       	lsr	r24
     79a:	ba 01       	movw	r22, r20
     79c:	80 5d       	subi	r24, 0xD0	; 208
     79e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <writeChar>
	pp++;
     7a2:	be 01       	movw	r22, r28
     7a4:	6f 5f       	subi	r22, 0xFF	; 255
     7a6:	7f 4f       	sbci	r23, 0xFF	; 255
	writeChar((char)num % 10 + '0', pp);
     7a8:	10 9f       	mul	r17, r16
     7aa:	01 2d       	mov	r16, r1
     7ac:	11 24       	eor	r1, r1
     7ae:	06 95       	lsr	r16
     7b0:	06 95       	lsr	r16
     7b2:	06 95       	lsr	r16
     7b4:	00 0f       	add	r16, r16
     7b6:	80 2f       	mov	r24, r16
     7b8:	88 0f       	add	r24, r24
     7ba:	88 0f       	add	r24, r24
     7bc:	08 0f       	add	r16, r24
     7be:	81 2f       	mov	r24, r17
     7c0:	80 1b       	sub	r24, r16
     7c2:	80 5d       	subi	r24, 0xD0	; 208
     7c4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <writeChar>
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <update_screen>:

void update_screen(LCD *self, int gen) //gen object as arg with two different frequencies
{
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	printAt(self->Gen1->freq, 0);
     7d8:	ec 81       	ldd	r30, Y+4	; 0x04
     7da:	fd 81       	ldd	r31, Y+5	; 0x05
     7dc:	64 81       	ldd	r22, Z+4	; 0x04
     7de:	75 81       	ldd	r23, Z+5	; 0x05
     7e0:	88 27       	eor	r24, r24
     7e2:	77 fd       	sbrc	r23, 7
     7e4:	80 95       	com	r24
     7e6:	98 2f       	mov	r25, r24
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	0e 94 b5 03 	call	0x76a	; 0x76a <printAt>
	printAt(self->Gen2->freq, 4);
     7f0:	ee 81       	ldd	r30, Y+6	; 0x06
     7f2:	ff 81       	ldd	r31, Y+7	; 0x07
     7f4:	64 81       	ldd	r22, Z+4	; 0x04
     7f6:	75 81       	ldd	r23, Z+5	; 0x05
     7f8:	88 27       	eor	r24, r24
     7fa:	77 fd       	sbrc	r23, 7
     7fc:	80 95       	com	r24
     7fe:	98 2f       	mov	r25, r24
     800:	44 e0       	ldi	r20, 0x04	; 4
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	0e 94 b5 03 	call	0x76a	; 0x76a <printAt>
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <shift>:

void shift(LCD *self, int gen)
{
	if (gen == 1)
     80e:	61 30       	cpi	r22, 0x01	; 1
     810:	71 05       	cpc	r23, r1
     812:	69 f4       	brne	.+26     	; 0x82e <shift+0x20>
	{
		LCDDR3 = 1 | LCDDR3; //gen 1 selected indicator
     814:	ef ee       	ldi	r30, 0xEF	; 239
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	20 81       	ld	r18, Z
     81a:	21 60       	ori	r18, 0x01	; 1
     81c:	20 83       	st	Z, r18
		LCDDR1 = 0x0;
     81e:	10 92 ed 00 	sts	0x00ED, r1
		self->curgen = self->Gen1; //define curgen as gen 1
     822:	fc 01       	movw	r30, r24
     824:	24 81       	ldd	r18, Z+4	; 0x04
     826:	35 81       	ldd	r19, Z+5	; 0x05
     828:	31 87       	std	Z+9, r19	; 0x09
     82a:	20 87       	std	Z+8, r18	; 0x08
     82c:	08 95       	ret
	}
	else if (gen == 2)
     82e:	62 30       	cpi	r22, 0x02	; 2
     830:	71 05       	cpc	r23, r1
     832:	61 f4       	brne	.+24     	; 0x84c <shift+0x3e>
	{
		LCDDR1 = 0x2 | LCDDR1; //gen 2 selected indicator
     834:	ed ee       	ldi	r30, 0xED	; 237
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	20 81       	ld	r18, Z
     83a:	22 60       	ori	r18, 0x02	; 2
     83c:	20 83       	st	Z, r18
		LCDDR3 = 0;
     83e:	10 92 ef 00 	sts	0x00EF, r1
		self->curgen = self->Gen2; //define curgen as gen 2
     842:	fc 01       	movw	r30, r24
     844:	26 81       	ldd	r18, Z+6	; 0x06
     846:	37 81       	ldd	r19, Z+7	; 0x07
     848:	31 87       	std	Z+9, r19	; 0x09
     84a:	20 87       	std	Z+8, r18	; 0x08
     84c:	08 95       	ret

0000084e <infinity>:
	self->freq = 0;
	self->first_call = 0; //so the pulse loop starts again
}

void infinity(PulseGen *self)
{
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	ec 01       	movw	r28, r24
	if (self->freq > 0)
     860:	8c 81       	ldd	r24, Y+4	; 0x04
     862:	9d 81       	ldd	r25, Y+5	; 0x05
     864:	18 16       	cp	r1, r24
     866:	19 06       	cpc	r1, r25
     868:	ac f5       	brge	.+106    	; 0x8d4 <infinity+0x86>
	{
		SYNC(self->Write1, write, self->portnr);			   //pulse once
     86a:	4a 85       	ldd	r20, Y+10	; 0x0a
     86c:	5b 85       	ldd	r21, Y+11	; 0x0b
     86e:	68 e7       	ldi	r22, 0x78	; 120
     870:	71 e1       	ldi	r23, 0x11	; 17
     872:	88 85       	ldd	r24, Y+8	; 0x08
     874:	99 85       	ldd	r25, Y+9	; 0x09
     876:	0e 94 3e 10 	call	0x207c	; 0x207c <sync>
		AFTER(MSEC(1000 / self->freq / 2), self, infinity, 0); //recursion
     87a:	6c 81       	ldd	r22, Y+4	; 0x04
     87c:	7d 81       	ldd	r23, Y+5	; 0x05
     87e:	84 ef       	ldi	r24, 0xF4	; 244
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 8d 11 	call	0x231a	; 0x231a <__divmodhi4>
     886:	2d e7       	ldi	r18, 0x7D	; 125
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	db 01       	movw	r26, r22
     88c:	0e 94 a1 11 	call	0x2342	; 0x2342 <__usmulhisi3>
     890:	6b 01       	movw	r12, r22
     892:	7c 01       	movw	r14, r24
     894:	99 23       	and	r25, r25
     896:	2c f4       	brge	.+10     	; 0x8a2 <infinity+0x54>
     898:	23 e0       	ldi	r18, 0x03	; 3
     89a:	c2 0e       	add	r12, r18
     89c:	d1 1c       	adc	r13, r1
     89e:	e1 1c       	adc	r14, r1
     8a0:	f1 1c       	adc	r15, r1
     8a2:	c7 01       	movw	r24, r14
     8a4:	b6 01       	movw	r22, r12
     8a6:	95 95       	asr	r25
     8a8:	87 95       	ror	r24
     8aa:	77 95       	ror	r23
     8ac:	67 95       	ror	r22
     8ae:	95 95       	asr	r25
     8b0:	87 95       	ror	r24
     8b2:	77 95       	ror	r23
     8b4:	67 95       	ror	r22
     8b6:	c1 2c       	mov	r12, r1
     8b8:	d1 2c       	mov	r13, r1
     8ba:	0f 2e       	mov	r0, r31
     8bc:	f7 e2       	ldi	r31, 0x27	; 39
     8be:	ef 2e       	mov	r14, r31
     8c0:	f4 e0       	ldi	r31, 0x04	; 4
     8c2:	ff 2e       	mov	r15, r31
     8c4:	f0 2d       	mov	r31, r0
     8c6:	8e 01       	movw	r16, r28
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	a9 01       	movw	r20, r18
     8ce:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
     8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <infinity+0x9a>
	}
	else
	{
		if (self->portnr == 4 && (PORTE & 16) == 1)
     8d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     8d6:	9b 85       	ldd	r25, Y+11	; 0x0b
     8d8:	84 30       	cpi	r24, 0x04	; 4
     8da:	91 05       	cpc	r25, r1
     8dc:	11 f4       	brne	.+4      	; 0x8e2 <infinity+0x94>
     8de:	8e b1       	in	r24, 0x0e	; 14
     8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <infinity+0x9a>
		{						//make sure its outputting low not high
			PORTE = PORTE ^ 16; //toggle once more since its outputting high
		}
		else if (self->portnr == 6 && (PORTE & 64) == 1)
     8e2:	06 97       	sbiw	r24, 0x06	; 6
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <infinity+0x9a>
     8e6:	8e b1       	in	r24, 0x0e	; 14
		{
			PORTE = PORTE ^ 64;
		}
	}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	08 95       	ret

000008fa <update_F>:
 */
#include "PulseGen.h"
#include "avr/io.h"

void update_F(PulseGen *self, int val)
{
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	ec 01       	movw	r28, r24

	if (val < 0 && self->freq > 0)
     90c:	77 23       	and	r23, r23
     90e:	54 f4       	brge	.+20     	; 0x924 <update_F+0x2a>
     910:	8c 81       	ldd	r24, Y+4	; 0x04
     912:	9d 81       	ldd	r25, Y+5	; 0x05
     914:	18 16       	cp	r1, r24
     916:	19 06       	cpc	r1, r25
     918:	2c f4       	brge	.+10     	; 0x924 <update_F+0x2a>
	{
		self->freq += val;
     91a:	68 0f       	add	r22, r24
     91c:	79 1f       	adc	r23, r25
     91e:	7d 83       	std	Y+5, r23	; 0x05
     920:	6c 83       	std	Y+4, r22	; 0x04
     922:	36 c0       	rjmp	.+108    	; 0x990 <update_F+0x96>
	}
	else if (val > 0 && self->freq < 100 && self->freq > 0)
     924:	16 16       	cp	r1, r22
     926:	17 06       	cpc	r1, r23
     928:	6c f4       	brge	.+26     	; 0x944 <update_F+0x4a>
     92a:	8c 81       	ldd	r24, Y+4	; 0x04
     92c:	9d 81       	ldd	r25, Y+5	; 0x05
     92e:	9c 01       	movw	r18, r24
     930:	21 50       	subi	r18, 0x01	; 1
     932:	31 09       	sbc	r19, r1
     934:	23 36       	cpi	r18, 0x63	; 99
     936:	31 05       	cpc	r19, r1
     938:	28 f4       	brcc	.+10     	; 0x944 <update_F+0x4a>
	{
		self->freq += val;
     93a:	68 0f       	add	r22, r24
     93c:	79 1f       	adc	r23, r25
     93e:	7d 83       	std	Y+5, r23	; 0x05
     940:	6c 83       	std	Y+4, r22	; 0x04
     942:	26 c0       	rjmp	.+76     	; 0x990 <update_F+0x96>
	}
	else if (self->freq == 0 && val == 1)
     944:	8c 81       	ldd	r24, Y+4	; 0x04
     946:	9d 81       	ldd	r25, Y+5	; 0x05
     948:	89 2b       	or	r24, r25
     94a:	11 f5       	brne	.+68     	; 0x990 <update_F+0x96>
     94c:	61 30       	cpi	r22, 0x01	; 1
     94e:	71 05       	cpc	r23, r1
     950:	f9 f4       	brne	.+62     	; 0x990 <update_F+0x96>
	{
		if (self->first_call == 0) //first call since we only want to call loop once
     952:	8c 85       	ldd	r24, Y+12	; 0x0c
     954:	9d 85       	ldd	r25, Y+13	; 0x0d
     956:	89 2b       	or	r24, r25
     958:	b1 f4       	brne	.+44     	; 0x986 <update_F+0x8c>
		{
			self->first_call = 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	9d 87       	std	Y+13, r25	; 0x0d
     960:	8c 87       	std	Y+12, r24	; 0x0c
			AFTER(MSEC(1000) / 2, self, infinity, 0); //since from 0 its guaranteed 1hz so call after 1sec /2)
     962:	c1 2c       	mov	r12, r1
     964:	d1 2c       	mov	r13, r1
     966:	0f 2e       	mov	r0, r31
     968:	f7 e2       	ldi	r31, 0x27	; 39
     96a:	ef 2e       	mov	r14, r31
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	ff 2e       	mov	r15, r31
     970:	f0 2d       	mov	r31, r0
     972:	8e 01       	movw	r16, r28
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	a9 01       	movw	r20, r18
     97a:	69 e0       	ldi	r22, 0x09	; 9
     97c:	7d e3       	ldi	r23, 0x3D	; 61
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
		}
		self->freq += val;
     986:	8c 81       	ldd	r24, Y+4	; 0x04
     988:	9d 81       	ldd	r25, Y+5	; 0x05
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	9d 83       	std	Y+5, r25	; 0x05
     98e:	8c 83       	std	Y+4, r24	; 0x04
	}
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	08 95       	ret

000009a2 <save>:

void save(PulseGen *self)
{
     9a2:	fc 01       	movw	r30, r24
	self->saved_freq = self->freq;
     9a4:	84 81       	ldd	r24, Z+4	; 0x04
     9a6:	95 81       	ldd	r25, Z+5	; 0x05
     9a8:	97 83       	std	Z+7, r25	; 0x07
     9aa:	86 83       	std	Z+6, r24	; 0x06
	self->freq = 0;
     9ac:	15 82       	std	Z+5, r1	; 0x05
     9ae:	14 82       	std	Z+4, r1	; 0x04
	self->first_call = 0; //so the pulse loop starts again
     9b0:	15 86       	std	Z+13, r1	; 0x0d
     9b2:	14 86       	std	Z+12, r1	; 0x0c
     9b4:	08 95       	ret

000009b6 <metronome>:
 */
#include "LCD.h"
#include "Pulser.h"
#include "avr/io.h"
void metronome(Pulser *self)
{
     9b6:	cf 92       	push	r12
     9b8:	df 92       	push	r13
     9ba:	ef 92       	push	r14
     9bc:	ff 92       	push	r15
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	ec 01       	movw	r28, r24

	if (self->cont == 1)
     9c8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ca:	9d 81       	ldd	r25, Y+5	; 0x05
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	e9 f4       	brne	.+58     	; 0xa0a <metronome+0x54>
	{ //another holding check
		if ((PINB & 64) == 0)
     9d0:	1e 99       	sbic	0x03, 6	; 3
     9d2:	0b c0       	rjmp	.+22     	; 0x9ea <metronome+0x34>
		{
			SYNC(self->LCD->curgen, update_F, 1); //freq+1
     9d4:	ee 81       	ldd	r30, Y+6	; 0x06
     9d6:	ff 81       	ldd	r31, Y+7	; 0x07
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	6d e7       	ldi	r22, 0x7D	; 125
     9de:	74 e0       	ldi	r23, 0x04	; 4
     9e0:	80 85       	ldd	r24, Z+8	; 0x08
     9e2:	91 85       	ldd	r25, Z+9	; 0x09
     9e4:	0e 94 3e 10 	call	0x207c	; 0x207c <sync>
     9e8:	14 c0       	rjmp	.+40     	; 0xa12 <metronome+0x5c>
		}
		else if ((PINB & 128) == 0)
     9ea:	1f 99       	sbic	0x03, 7	; 3
     9ec:	0b c0       	rjmp	.+22     	; 0xa04 <metronome+0x4e>
		{
			SYNC(self->LCD->curgen, update_F, -1); //freq-1
     9ee:	ee 81       	ldd	r30, Y+6	; 0x06
     9f0:	ff 81       	ldd	r31, Y+7	; 0x07
     9f2:	4f ef       	ldi	r20, 0xFF	; 255
     9f4:	5f ef       	ldi	r21, 0xFF	; 255
     9f6:	6d e7       	ldi	r22, 0x7D	; 125
     9f8:	74 e0       	ldi	r23, 0x04	; 4
     9fa:	80 85       	ldd	r24, Z+8	; 0x08
     9fc:	91 85       	ldd	r25, Z+9	; 0x09
     9fe:	0e 94 3e 10 	call	0x207c	; 0x207c <sync>
     a02:	07 c0       	rjmp	.+14     	; 0xa12 <metronome+0x5c>
		}
		else
		{
			self->cont = 0; //not holding anymore
     a04:	1d 82       	std	Y+5, r1	; 0x05
     a06:	1c 82       	std	Y+4, r1	; 0x04
			return;
     a08:	1e c0       	rjmp	.+60     	; 0xa46 <metronome+0x90>
		}
	}
	else
	{
		self->cont = 1; //holding
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	9d 83       	std	Y+5, r25	; 0x05
     a10:	8c 83       	std	Y+4, r24	; 0x04
	}

	SYNC(self->LCD, update_screen, 1);	//update the screen after every tick
     a12:	41 e0       	ldi	r20, 0x01	; 1
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	69 ee       	ldi	r22, 0xE9	; 233
     a18:	73 e0       	ldi	r23, 0x03	; 3
     a1a:	8e 81       	ldd	r24, Y+6	; 0x06
     a1c:	9f 81       	ldd	r25, Y+7	; 0x07
     a1e:	0e 94 3e 10 	call	0x207c	; 0x207c <sync>
	AFTER(MSEC(200), self, metronome, 0); //recursion with 200msec delay
     a22:	c1 2c       	mov	r12, r1
     a24:	d1 2c       	mov	r13, r1
     a26:	0f 2e       	mov	r0, r31
     a28:	fb ed       	ldi	r31, 0xDB	; 219
     a2a:	ef 2e       	mov	r14, r31
     a2c:	f4 e0       	ldi	r31, 0x04	; 4
     a2e:	ff 2e       	mov	r15, r31
     a30:	f0 2d       	mov	r31, r0
     a32:	8e 01       	movw	r16, r28
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	a9 01       	movw	r20, r18
     a3a:	6a e6       	ldi	r22, 0x6A	; 106
     a3c:	78 e1       	ldi	r23, 0x18	; 24
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	08 95       	ret

00000a58 <initialize>:
    return now - (status ? current->msg->baseline : timestamp);
}

    
/* initialization */
static void initialize(void) {
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <initialize+0x6>
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <initialize+0x8>
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	8f e0       	ldi	r24, 0x0F	; 15
     a66:	92 e0       	ldi	r25, 0x02	; 2
     a68:	2f ee       	ldi	r18, 0xEF	; 239
     a6a:	32 e0       	ldi	r19, 0x02	; 2
     a6c:	fc 01       	movw	r30, r24
     a6e:	70 97       	sbiw	r30, 0x10	; 16
    int i;

    for (i=0; i<NMSGS-1; i++)
        messages[i].next = &messages[i+1];
     a70:	91 83       	std	Z+1, r25	; 0x01
     a72:	80 83       	st	Z, r24
     a74:	40 96       	adiw	r24, 0x10	; 16
    
/* initialization */
static void initialize(void) {
    int i;

    for (i=0; i<NMSGS-1; i++)
     a76:	82 17       	cp	r24, r18
     a78:	93 07       	cpc	r25, r19
     a7a:	c1 f7       	brne	.-16     	; 0xa6c <initialize+0x14>
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
     a7c:	10 92 e0 02 	sts	0x02E0, r1
     a80:	10 92 df 02 	sts	0x02DF, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
     a84:	e7 e6       	ldi	r30, 0x67	; 103
     a86:	f1 e0       	ldi	r31, 0x01	; 1
     a88:	f0 93 4b 01 	sts	0x014B, r31
     a8c:	e0 93 4a 01 	sts	0x014A, r30
     a90:	a4 e8       	ldi	r26, 0x84	; 132
     a92:	b1 e0       	ldi	r27, 0x01	; 1
     a94:	b1 83       	std	Z+1, r27	; 0x01
     a96:	a0 83       	st	Z, r26
     a98:	e1 ea       	ldi	r30, 0xA1	; 161
     a9a:	f1 e0       	ldi	r31, 0x01	; 1
     a9c:	ed 93       	st	X+, r30
     a9e:	fc 93       	st	X, r31
    threads[NTHREADS-1].next = NULL;
     aa0:	11 82       	std	Z+1, r1	; 0x01
     aa2:	10 82       	st	Z, r1
     aa4:	80 e5       	ldi	r24, 0x50	; 80
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	9a 83       	std	Y+2, r25	; 0x02
     aaa:	89 83       	std	Y+1, r24	; 0x01
     aac:	eb e4       	ldi	r30, 0x4B	; 75
     aae:	f3 e0       	ldi	r31, 0x03	; 3
     ab0:	fc 83       	std	Y+4, r31	; 0x04
     ab2:	eb 83       	std	Y+3, r30	; 0x03
    
    for (i=0; i<NTHREADS; i++) {
        setjmp( threads[i].context );
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	9a 81       	ldd	r25, Y+2	; 0x02
     ab8:	0e 94 cb 11 	call	0x2396	; 0x2396 <setjmp>
        SETSTACK( &threads[i].context, &stacks[i] );
     abc:	8b 81       	ldd	r24, Y+3	; 0x03
     abe:	9c 81       	ldd	r25, Y+4	; 0x04
     ac0:	e9 81       	ldd	r30, Y+1	; 0x01
     ac2:	fa 81       	ldd	r31, Y+2	; 0x02
     ac4:	91 8b       	std	Z+17, r25	; 0x11
     ac6:	80 8b       	std	Z+16, r24	; 0x10
     ac8:	93 8b       	std	Z+19, r25	; 0x13
     aca:	82 8b       	std	Z+18, r24	; 0x12
        SETPC( &threads[i].context, run );
     acc:	84 ed       	ldi	r24, 0xD4	; 212
     ace:	90 e1       	ldi	r25, 0x10	; 16
     ad0:	96 8b       	std	Z+22, r25	; 0x16
     ad2:	85 8b       	std	Z+21, r24	; 0x15
     ad4:	32 97       	sbiw	r30, 0x02	; 2
        threads[i].waitsFor = NULL;
     ad6:	11 82       	std	Z+1, r1	; 0x01
     ad8:	10 82       	st	Z, r1
     ada:	e9 81       	ldd	r30, Y+1	; 0x01
     adc:	fa 81       	ldd	r31, Y+2	; 0x02
     ade:	7d 96       	adiw	r30, 0x1d	; 29
     ae0:	fa 83       	std	Y+2, r31	; 0x02
     ae2:	e9 83       	std	Y+1, r30	; 0x01
     ae4:	8b 81       	ldd	r24, Y+3	; 0x03
     ae6:	9c 81       	ldd	r25, Y+4	; 0x04
     ae8:	80 5a       	subi	r24, 0xA0	; 160
     aea:	9f 4f       	sbci	r25, 0xFF	; 255
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	8b 83       	std	Y+3, r24	; 0x03
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
     af0:	e4 5c       	subi	r30, 0xC4	; 196
     af2:	f1 40       	sbci	r31, 0x01	; 1
     af4:	f9 f6       	brne	.-66     	; 0xab4 <initialize+0x5c>
        SETSTACK( &threads[i].context, &stacks[i] );
        SETPC( &threads[i].context, run );
        threads[i].waitsFor = NULL;
    }

    thread0.next = NULL;
     af6:	10 92 e3 01 	sts	0x01E3, r1
     afa:	10 92 e2 01 	sts	0x01E2, r1
    thread0.waitsFor = NULL;
     afe:	10 92 e7 01 	sts	0x01E7, r1
     b02:	10 92 e6 01 	sts	0x01E6, r1
    thread0.msg = NULL;
     b06:	10 92 e5 01 	sts	0x01E5, r1
     b0a:	10 92 e4 01 	sts	0x01E4, r1
    
    TIMER_INIT();
     b0e:	e1 e6       	ldi	r30, 0x61	; 97
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 e8       	ldi	r24, 0x80	; 128
     b14:	80 83       	st	Z, r24
     b16:	10 82       	st	Z, r1
     b18:	10 92 85 00 	sts	0x0085, r1
     b1c:	10 92 84 00 	sts	0x0084, r1
     b20:	84 e0       	ldi	r24, 0x04	; 4
     b22:	80 93 81 00 	sts	0x0081, r24
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 6f 00 	sts	0x006F, r24
}
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	08 95       	ret

00000b3a <dispatch>:
    TIMERSET(timerQ);
    schedule();
}

/* context switching */
static void dispatch( Thread next ) {
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <dispatch+0x6>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp( current->context ) == 0) {
     b48:	80 91 00 01 	lds	r24, 0x0100
     b4c:	90 91 01 01 	lds	r25, 0x0101
     b50:	06 96       	adiw	r24, 0x06	; 6
     b52:	0e 94 cb 11 	call	0x2396	; 0x2396 <setjmp>
     b56:	89 2b       	or	r24, r25
     b58:	59 f4       	brne	.+22     	; 0xb70 <dispatch+0x36>
        current = next;
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	9a 81       	ldd	r25, Y+2	; 0x02
     b5e:	90 93 01 01 	sts	0x0101, r25
     b62:	80 93 00 01 	sts	0x0100, r24
        longjmp( next->context, 1 );
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	06 96       	adiw	r24, 0x06	; 6
     b6c:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <longjmp>
    }
}
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <schedule>:
    while (1) {
        SLEEP();
    }
}

static void schedule(void) {
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
    Msg topMsg = activeStack->msg;
     b82:	e0 91 02 01 	lds	r30, 0x0102
     b86:	f0 91 03 01 	lds	r31, 0x0103
     b8a:	c2 81       	ldd	r28, Z+2	; 0x02
     b8c:	d3 81       	ldd	r29, Z+3	; 0x03
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
     b8e:	a0 91 24 01 	lds	r26, 0x0124
     b92:	b0 91 25 01 	lds	r27, 0x0125
     b96:	10 97       	sbiw	r26, 0x00	; 0
     b98:	39 f1       	breq	.+78     	; 0xbe8 <schedule+0x6e>
     b9a:	80 91 04 01 	lds	r24, 0x0104
     b9e:	90 91 05 01 	lds	r25, 0x0105
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	09 f1       	breq	.+66     	; 0xbe8 <schedule+0x6e>
     ba6:	20 97       	sbiw	r28, 0x00	; 0
     ba8:	79 f0       	breq	.+30     	; 0xbc8 <schedule+0x4e>
     baa:	16 96       	adiw	r26, 0x06	; 6
     bac:	4d 91       	ld	r20, X+
     bae:	5d 91       	ld	r21, X+
     bb0:	6d 91       	ld	r22, X+
     bb2:	7c 91       	ld	r23, X
     bb4:	19 97       	sbiw	r26, 0x09	; 9
     bb6:	0e 81       	ldd	r16, Y+6	; 0x06
     bb8:	1f 81       	ldd	r17, Y+7	; 0x07
     bba:	28 85       	ldd	r18, Y+8	; 0x08
     bbc:	39 85       	ldd	r19, Y+9	; 0x09
     bbe:	40 1b       	sub	r20, r16
     bc0:	51 0b       	sbc	r21, r17
     bc2:	62 0b       	sbc	r22, r18
     bc4:	73 0b       	sbc	r23, r19
     bc6:	82 f4       	brpl	.+32     	; 0xbe8 <schedule+0x6e>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
     bc8:	dc 01       	movw	r26, r24
     bca:	2d 91       	ld	r18, X+
     bcc:	3c 91       	ld	r19, X
     bce:	11 97       	sbiw	r26, 0x01	; 1
     bd0:	30 93 05 01 	sts	0x0105, r19
     bd4:	20 93 04 01 	sts	0x0104, r18
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
     bd8:	ed 93       	st	X+, r30
     bda:	fc 93       	st	X, r31
    *stack = t;
     bdc:	90 93 03 01 	sts	0x0103, r25
     be0:	80 93 02 01 	sts	0x0102, r24

static void schedule(void) {
    Msg topMsg = activeStack->msg;
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
        push(pop(&threadPool), &activeStack);
        dispatch(activeStack);
     be4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <dispatch>
    }
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	08 95       	ret

00000bf2 <__vector_1>:
#define TIMER_COMPARE_INTERRUPT  ISR(TIMER1_COMPA_vect)
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
     bf2:	1f 92       	push	r1
     bf4:	0f 92       	push	r0
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	0f 92       	push	r0
     bfa:	11 24       	eor	r1, r1
     bfc:	2f 93       	push	r18
     bfe:	3f 93       	push	r19
     c00:	4f 93       	push	r20
     c02:	5f 93       	push	r21
     c04:	6f 93       	push	r22
     c06:	7f 93       	push	r23
     c08:	8f 93       	push	r24
     c0a:	9f 93       	push	r25
     c0c:	af 93       	push	r26
     c0e:	bf 93       	push	r27
     c10:	ef 93       	push	r30
     c12:	ff 93       	push	r31
     c14:	20 91 1c 01 	lds	r18, 0x011C
     c18:	30 91 1d 01 	lds	r19, 0x011D
     c1c:	40 91 84 00 	lds	r20, 0x0084
     c20:	50 91 85 00 	lds	r21, 0x0085
     c24:	c9 01       	movw	r24, r18
     c26:	aa 27       	eor	r26, r26
     c28:	97 fd       	sbrc	r25, 7
     c2a:	a0 95       	com	r26
     c2c:	ba 2f       	mov	r27, r26
     c2e:	dc 01       	movw	r26, r24
     c30:	99 27       	eor	r25, r25
     c32:	88 27       	eor	r24, r24
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	84 2b       	or	r24, r20
     c3a:	95 2b       	or	r25, r21
     c3c:	a6 2b       	or	r26, r22
     c3e:	b7 2b       	or	r27, r23
     c40:	80 93 1e 01 	sts	0x011E, r24
     c44:	90 93 1f 01 	sts	0x011F, r25
     c48:	a0 93 20 01 	sts	0x0120, r26
     c4c:	b0 93 21 01 	sts	0x0121, r27
     c50:	b0 9b       	sbis	0x16, 0	; 22
     c52:	1b c0       	rjmp	.+54     	; 0xc8a <__vector_1+0x98>
     c54:	40 91 84 00 	lds	r20, 0x0084
     c58:	50 91 85 00 	lds	r21, 0x0085
     c5c:	c9 01       	movw	r24, r18
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	aa 27       	eor	r26, r26
     c62:	97 fd       	sbrc	r25, 7
     c64:	a0 95       	com	r26
     c66:	ba 2f       	mov	r27, r26
     c68:	dc 01       	movw	r26, r24
     c6a:	99 27       	eor	r25, r25
     c6c:	88 27       	eor	r24, r24
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	84 2b       	or	r24, r20
     c74:	95 2b       	or	r25, r21
     c76:	a6 2b       	or	r26, r22
     c78:	b7 2b       	or	r27, r23
     c7a:	80 93 1e 01 	sts	0x011E, r24
     c7e:	90 93 1f 01 	sts	0x011F, r25
     c82:	a0 93 20 01 	sts	0x0120, r26
     c86:	b0 93 21 01 	sts	0x0121, r27
     c8a:	e0 91 be 01 	lds	r30, 0x01BE
     c8e:	f0 91 bf 01 	lds	r31, 0x01BF
     c92:	30 97       	sbiw	r30, 0x00	; 0
     c94:	39 f0       	breq	.+14     	; 0xca4 <__vector_1+0xb2>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 91 26 01 	lds	r24, 0x0126
     c9e:	90 91 27 01 	lds	r25, 0x0127
     ca2:	09 95       	icall
     ca4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	bf 91       	pop	r27
     cae:	af 91       	pop	r26
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	7f 91       	pop	r23
     cb6:	6f 91       	pop	r22
     cb8:	5f 91       	pop	r21
     cba:	4f 91       	pop	r20
     cbc:	3f 91       	pop	r19
     cbe:	2f 91       	pop	r18
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <__vector_2>:
IRQ(IRQ_PCINT0,          PCINT0_vect);
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
     cec:	20 91 1c 01 	lds	r18, 0x011C
     cf0:	30 91 1d 01 	lds	r19, 0x011D
     cf4:	40 91 84 00 	lds	r20, 0x0084
     cf8:	50 91 85 00 	lds	r21, 0x0085
     cfc:	c9 01       	movw	r24, r18
     cfe:	aa 27       	eor	r26, r26
     d00:	97 fd       	sbrc	r25, 7
     d02:	a0 95       	com	r26
     d04:	ba 2f       	mov	r27, r26
     d06:	dc 01       	movw	r26, r24
     d08:	99 27       	eor	r25, r25
     d0a:	88 27       	eor	r24, r24
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	84 2b       	or	r24, r20
     d12:	95 2b       	or	r25, r21
     d14:	a6 2b       	or	r26, r22
     d16:	b7 2b       	or	r27, r23
     d18:	80 93 1e 01 	sts	0x011E, r24
     d1c:	90 93 1f 01 	sts	0x011F, r25
     d20:	a0 93 20 01 	sts	0x0120, r26
     d24:	b0 93 21 01 	sts	0x0121, r27
     d28:	b0 9b       	sbis	0x16, 0	; 22
     d2a:	1b c0       	rjmp	.+54     	; 0xd62 <__vector_2+0x98>
     d2c:	40 91 84 00 	lds	r20, 0x0084
     d30:	50 91 85 00 	lds	r21, 0x0085
     d34:	c9 01       	movw	r24, r18
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	aa 27       	eor	r26, r26
     d3a:	97 fd       	sbrc	r25, 7
     d3c:	a0 95       	com	r26
     d3e:	ba 2f       	mov	r27, r26
     d40:	dc 01       	movw	r26, r24
     d42:	99 27       	eor	r25, r25
     d44:	88 27       	eor	r24, r24
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	84 2b       	or	r24, r20
     d4c:	95 2b       	or	r25, r21
     d4e:	a6 2b       	or	r26, r22
     d50:	b7 2b       	or	r27, r23
     d52:	80 93 1e 01 	sts	0x011E, r24
     d56:	90 93 1f 01 	sts	0x011F, r25
     d5a:	a0 93 20 01 	sts	0x0120, r26
     d5e:	b0 93 21 01 	sts	0x0121, r27
     d62:	e0 91 c0 01 	lds	r30, 0x01C0
     d66:	f0 91 c1 01 	lds	r31, 0x01C1
     d6a:	30 97       	sbiw	r30, 0x00	; 0
     d6c:	39 f0       	breq	.+14     	; 0xd7c <__vector_2+0xb2>
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	80 91 28 01 	lds	r24, 0x0128
     d76:	90 91 29 01 	lds	r25, 0x0129
     d7a:	09 95       	icall
     d7c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
     d80:	ff 91       	pop	r31
     d82:	ef 91       	pop	r30
     d84:	bf 91       	pop	r27
     d86:	af 91       	pop	r26
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	7f 91       	pop	r23
     d8e:	6f 91       	pop	r22
     d90:	5f 91       	pop	r21
     d92:	4f 91       	pop	r20
     d94:	3f 91       	pop	r19
     d96:	2f 91       	pop	r18
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <__vector_3>:
IRQ(IRQ_PCINT1,          PCINT1_vect);
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	2f 93       	push	r18
     dae:	3f 93       	push	r19
     db0:	4f 93       	push	r20
     db2:	5f 93       	push	r21
     db4:	6f 93       	push	r22
     db6:	7f 93       	push	r23
     db8:	8f 93       	push	r24
     dba:	9f 93       	push	r25
     dbc:	af 93       	push	r26
     dbe:	bf 93       	push	r27
     dc0:	ef 93       	push	r30
     dc2:	ff 93       	push	r31
     dc4:	20 91 1c 01 	lds	r18, 0x011C
     dc8:	30 91 1d 01 	lds	r19, 0x011D
     dcc:	40 91 84 00 	lds	r20, 0x0084
     dd0:	50 91 85 00 	lds	r21, 0x0085
     dd4:	c9 01       	movw	r24, r18
     dd6:	aa 27       	eor	r26, r26
     dd8:	97 fd       	sbrc	r25, 7
     dda:	a0 95       	com	r26
     ddc:	ba 2f       	mov	r27, r26
     dde:	dc 01       	movw	r26, r24
     de0:	99 27       	eor	r25, r25
     de2:	88 27       	eor	r24, r24
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	84 2b       	or	r24, r20
     dea:	95 2b       	or	r25, r21
     dec:	a6 2b       	or	r26, r22
     dee:	b7 2b       	or	r27, r23
     df0:	80 93 1e 01 	sts	0x011E, r24
     df4:	90 93 1f 01 	sts	0x011F, r25
     df8:	a0 93 20 01 	sts	0x0120, r26
     dfc:	b0 93 21 01 	sts	0x0121, r27
     e00:	b0 9b       	sbis	0x16, 0	; 22
     e02:	1b c0       	rjmp	.+54     	; 0xe3a <__vector_3+0x98>
     e04:	40 91 84 00 	lds	r20, 0x0084
     e08:	50 91 85 00 	lds	r21, 0x0085
     e0c:	c9 01       	movw	r24, r18
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	aa 27       	eor	r26, r26
     e12:	97 fd       	sbrc	r25, 7
     e14:	a0 95       	com	r26
     e16:	ba 2f       	mov	r27, r26
     e18:	dc 01       	movw	r26, r24
     e1a:	99 27       	eor	r25, r25
     e1c:	88 27       	eor	r24, r24
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	84 2b       	or	r24, r20
     e24:	95 2b       	or	r25, r21
     e26:	a6 2b       	or	r26, r22
     e28:	b7 2b       	or	r27, r23
     e2a:	80 93 1e 01 	sts	0x011E, r24
     e2e:	90 93 1f 01 	sts	0x011F, r25
     e32:	a0 93 20 01 	sts	0x0120, r26
     e36:	b0 93 21 01 	sts	0x0121, r27
     e3a:	e0 91 c2 01 	lds	r30, 0x01C2
     e3e:	f0 91 c3 01 	lds	r31, 0x01C3
     e42:	30 97       	sbiw	r30, 0x00	; 0
     e44:	39 f0       	breq	.+14     	; 0xe54 <__vector_3+0xb2>
     e46:	62 e0       	ldi	r22, 0x02	; 2
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	80 91 2a 01 	lds	r24, 0x012A
     e4e:	90 91 2b 01 	lds	r25, 0x012B
     e52:	09 95       	icall
     e54:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti

00000e7a <__vector_4>:
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	2f 93       	push	r18
     e86:	3f 93       	push	r19
     e88:	4f 93       	push	r20
     e8a:	5f 93       	push	r21
     e8c:	6f 93       	push	r22
     e8e:	7f 93       	push	r23
     e90:	8f 93       	push	r24
     e92:	9f 93       	push	r25
     e94:	af 93       	push	r26
     e96:	bf 93       	push	r27
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
     e9c:	20 91 1c 01 	lds	r18, 0x011C
     ea0:	30 91 1d 01 	lds	r19, 0x011D
     ea4:	40 91 84 00 	lds	r20, 0x0084
     ea8:	50 91 85 00 	lds	r21, 0x0085
     eac:	c9 01       	movw	r24, r18
     eae:	aa 27       	eor	r26, r26
     eb0:	97 fd       	sbrc	r25, 7
     eb2:	a0 95       	com	r26
     eb4:	ba 2f       	mov	r27, r26
     eb6:	dc 01       	movw	r26, r24
     eb8:	99 27       	eor	r25, r25
     eba:	88 27       	eor	r24, r24
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	84 2b       	or	r24, r20
     ec2:	95 2b       	or	r25, r21
     ec4:	a6 2b       	or	r26, r22
     ec6:	b7 2b       	or	r27, r23
     ec8:	80 93 1e 01 	sts	0x011E, r24
     ecc:	90 93 1f 01 	sts	0x011F, r25
     ed0:	a0 93 20 01 	sts	0x0120, r26
     ed4:	b0 93 21 01 	sts	0x0121, r27
     ed8:	b0 9b       	sbis	0x16, 0	; 22
     eda:	1b c0       	rjmp	.+54     	; 0xf12 <__vector_4+0x98>
     edc:	40 91 84 00 	lds	r20, 0x0084
     ee0:	50 91 85 00 	lds	r21, 0x0085
     ee4:	c9 01       	movw	r24, r18
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	aa 27       	eor	r26, r26
     eea:	97 fd       	sbrc	r25, 7
     eec:	a0 95       	com	r26
     eee:	ba 2f       	mov	r27, r26
     ef0:	dc 01       	movw	r26, r24
     ef2:	99 27       	eor	r25, r25
     ef4:	88 27       	eor	r24, r24
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	84 2b       	or	r24, r20
     efc:	95 2b       	or	r25, r21
     efe:	a6 2b       	or	r26, r22
     f00:	b7 2b       	or	r27, r23
     f02:	80 93 1e 01 	sts	0x011E, r24
     f06:	90 93 1f 01 	sts	0x011F, r25
     f0a:	a0 93 20 01 	sts	0x0120, r26
     f0e:	b0 93 21 01 	sts	0x0121, r27
     f12:	e0 91 c4 01 	lds	r30, 0x01C4
     f16:	f0 91 c5 01 	lds	r31, 0x01C5
     f1a:	30 97       	sbiw	r30, 0x00	; 0
     f1c:	39 f0       	breq	.+14     	; 0xf2c <__vector_4+0xb2>
     f1e:	63 e0       	ldi	r22, 0x03	; 3
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	80 91 2c 01 	lds	r24, 0x012C
     f26:	90 91 2d 01 	lds	r25, 0x012D
     f2a:	09 95       	icall
     f2c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	7f 91       	pop	r23
     f3e:	6f 91       	pop	r22
     f40:	5f 91       	pop	r21
     f42:	4f 91       	pop	r20
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <__vector_5>:
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	2f 93       	push	r18
     f5e:	3f 93       	push	r19
     f60:	4f 93       	push	r20
     f62:	5f 93       	push	r21
     f64:	6f 93       	push	r22
     f66:	7f 93       	push	r23
     f68:	8f 93       	push	r24
     f6a:	9f 93       	push	r25
     f6c:	af 93       	push	r26
     f6e:	bf 93       	push	r27
     f70:	ef 93       	push	r30
     f72:	ff 93       	push	r31
     f74:	20 91 1c 01 	lds	r18, 0x011C
     f78:	30 91 1d 01 	lds	r19, 0x011D
     f7c:	40 91 84 00 	lds	r20, 0x0084
     f80:	50 91 85 00 	lds	r21, 0x0085
     f84:	c9 01       	movw	r24, r18
     f86:	aa 27       	eor	r26, r26
     f88:	97 fd       	sbrc	r25, 7
     f8a:	a0 95       	com	r26
     f8c:	ba 2f       	mov	r27, r26
     f8e:	dc 01       	movw	r26, r24
     f90:	99 27       	eor	r25, r25
     f92:	88 27       	eor	r24, r24
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	84 2b       	or	r24, r20
     f9a:	95 2b       	or	r25, r21
     f9c:	a6 2b       	or	r26, r22
     f9e:	b7 2b       	or	r27, r23
     fa0:	80 93 1e 01 	sts	0x011E, r24
     fa4:	90 93 1f 01 	sts	0x011F, r25
     fa8:	a0 93 20 01 	sts	0x0120, r26
     fac:	b0 93 21 01 	sts	0x0121, r27
     fb0:	b0 9b       	sbis	0x16, 0	; 22
     fb2:	1b c0       	rjmp	.+54     	; 0xfea <__vector_5+0x98>
     fb4:	40 91 84 00 	lds	r20, 0x0084
     fb8:	50 91 85 00 	lds	r21, 0x0085
     fbc:	c9 01       	movw	r24, r18
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	aa 27       	eor	r26, r26
     fc2:	97 fd       	sbrc	r25, 7
     fc4:	a0 95       	com	r26
     fc6:	ba 2f       	mov	r27, r26
     fc8:	dc 01       	movw	r26, r24
     fca:	99 27       	eor	r25, r25
     fcc:	88 27       	eor	r24, r24
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	84 2b       	or	r24, r20
     fd4:	95 2b       	or	r25, r21
     fd6:	a6 2b       	or	r26, r22
     fd8:	b7 2b       	or	r27, r23
     fda:	80 93 1e 01 	sts	0x011E, r24
     fde:	90 93 1f 01 	sts	0x011F, r25
     fe2:	a0 93 20 01 	sts	0x0120, r26
     fe6:	b0 93 21 01 	sts	0x0121, r27
     fea:	e0 91 c6 01 	lds	r30, 0x01C6
     fee:	f0 91 c7 01 	lds	r31, 0x01C7
     ff2:	30 97       	sbiw	r30, 0x00	; 0
     ff4:	39 f0       	breq	.+14     	; 0x1004 <__vector_5+0xb2>
     ff6:	64 e0       	ldi	r22, 0x04	; 4
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	80 91 2e 01 	lds	r24, 0x012E
     ffe:	90 91 2f 01 	lds	r25, 0x012F
    1002:	09 95       	icall
    1004:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    1008:	ff 91       	pop	r31
    100a:	ef 91       	pop	r30
    100c:	bf 91       	pop	r27
    100e:	af 91       	pop	r26
    1010:	9f 91       	pop	r25
    1012:	8f 91       	pop	r24
    1014:	7f 91       	pop	r23
    1016:	6f 91       	pop	r22
    1018:	5f 91       	pop	r21
    101a:	4f 91       	pop	r20
    101c:	3f 91       	pop	r19
    101e:	2f 91       	pop	r18
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	0f 90       	pop	r0
    1026:	1f 90       	pop	r1
    1028:	18 95       	reti

0000102a <__vector_10>:
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
    104c:	20 91 1c 01 	lds	r18, 0x011C
    1050:	30 91 1d 01 	lds	r19, 0x011D
    1054:	40 91 84 00 	lds	r20, 0x0084
    1058:	50 91 85 00 	lds	r21, 0x0085
    105c:	c9 01       	movw	r24, r18
    105e:	aa 27       	eor	r26, r26
    1060:	97 fd       	sbrc	r25, 7
    1062:	a0 95       	com	r26
    1064:	ba 2f       	mov	r27, r26
    1066:	dc 01       	movw	r26, r24
    1068:	99 27       	eor	r25, r25
    106a:	88 27       	eor	r24, r24
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	84 2b       	or	r24, r20
    1072:	95 2b       	or	r25, r21
    1074:	a6 2b       	or	r26, r22
    1076:	b7 2b       	or	r27, r23
    1078:	80 93 1e 01 	sts	0x011E, r24
    107c:	90 93 1f 01 	sts	0x011F, r25
    1080:	a0 93 20 01 	sts	0x0120, r26
    1084:	b0 93 21 01 	sts	0x0121, r27
    1088:	b0 9b       	sbis	0x16, 0	; 22
    108a:	1b c0       	rjmp	.+54     	; 0x10c2 <__vector_10+0x98>
    108c:	40 91 84 00 	lds	r20, 0x0084
    1090:	50 91 85 00 	lds	r21, 0x0085
    1094:	c9 01       	movw	r24, r18
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	aa 27       	eor	r26, r26
    109a:	97 fd       	sbrc	r25, 7
    109c:	a0 95       	com	r26
    109e:	ba 2f       	mov	r27, r26
    10a0:	dc 01       	movw	r26, r24
    10a2:	99 27       	eor	r25, r25
    10a4:	88 27       	eor	r24, r24
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	84 2b       	or	r24, r20
    10ac:	95 2b       	or	r25, r21
    10ae:	a6 2b       	or	r26, r22
    10b0:	b7 2b       	or	r27, r23
    10b2:	80 93 1e 01 	sts	0x011E, r24
    10b6:	90 93 1f 01 	sts	0x011F, r25
    10ba:	a0 93 20 01 	sts	0x0120, r26
    10be:	b0 93 21 01 	sts	0x0121, r27
    10c2:	e0 91 c8 01 	lds	r30, 0x01C8
    10c6:	f0 91 c9 01 	lds	r31, 0x01C9
    10ca:	30 97       	sbiw	r30, 0x00	; 0
    10cc:	39 f0       	breq	.+14     	; 0x10dc <__vector_10+0xb2>
    10ce:	65 e0       	ldi	r22, 0x05	; 5
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 91 30 01 	lds	r24, 0x0130
    10d6:	90 91 31 01 	lds	r25, 0x0131
    10da:	09 95       	icall
    10dc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <__vector_11>:
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	2f 93       	push	r18
    110e:	3f 93       	push	r19
    1110:	4f 93       	push	r20
    1112:	5f 93       	push	r21
    1114:	6f 93       	push	r22
    1116:	7f 93       	push	r23
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	af 93       	push	r26
    111e:	bf 93       	push	r27
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
    1124:	20 91 1c 01 	lds	r18, 0x011C
    1128:	30 91 1d 01 	lds	r19, 0x011D
    112c:	40 91 84 00 	lds	r20, 0x0084
    1130:	50 91 85 00 	lds	r21, 0x0085
    1134:	c9 01       	movw	r24, r18
    1136:	aa 27       	eor	r26, r26
    1138:	97 fd       	sbrc	r25, 7
    113a:	a0 95       	com	r26
    113c:	ba 2f       	mov	r27, r26
    113e:	dc 01       	movw	r26, r24
    1140:	99 27       	eor	r25, r25
    1142:	88 27       	eor	r24, r24
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	84 2b       	or	r24, r20
    114a:	95 2b       	or	r25, r21
    114c:	a6 2b       	or	r26, r22
    114e:	b7 2b       	or	r27, r23
    1150:	80 93 1e 01 	sts	0x011E, r24
    1154:	90 93 1f 01 	sts	0x011F, r25
    1158:	a0 93 20 01 	sts	0x0120, r26
    115c:	b0 93 21 01 	sts	0x0121, r27
    1160:	b0 9b       	sbis	0x16, 0	; 22
    1162:	1b c0       	rjmp	.+54     	; 0x119a <__vector_11+0x98>
    1164:	40 91 84 00 	lds	r20, 0x0084
    1168:	50 91 85 00 	lds	r21, 0x0085
    116c:	c9 01       	movw	r24, r18
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	aa 27       	eor	r26, r26
    1172:	97 fd       	sbrc	r25, 7
    1174:	a0 95       	com	r26
    1176:	ba 2f       	mov	r27, r26
    1178:	dc 01       	movw	r26, r24
    117a:	99 27       	eor	r25, r25
    117c:	88 27       	eor	r24, r24
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	84 2b       	or	r24, r20
    1184:	95 2b       	or	r25, r21
    1186:	a6 2b       	or	r26, r22
    1188:	b7 2b       	or	r27, r23
    118a:	80 93 1e 01 	sts	0x011E, r24
    118e:	90 93 1f 01 	sts	0x011F, r25
    1192:	a0 93 20 01 	sts	0x0120, r26
    1196:	b0 93 21 01 	sts	0x0121, r27
    119a:	e0 91 ca 01 	lds	r30, 0x01CA
    119e:	f0 91 cb 01 	lds	r31, 0x01CB
    11a2:	30 97       	sbiw	r30, 0x00	; 0
    11a4:	39 f0       	breq	.+14     	; 0x11b4 <__vector_11+0xb2>
    11a6:	66 e0       	ldi	r22, 0x06	; 6
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	80 91 32 01 	lds	r24, 0x0132
    11ae:	90 91 33 01 	lds	r25, 0x0133
    11b2:	09 95       	icall
    11b4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <__vector_12>:
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
    11da:	1f 92       	push	r1
    11dc:	0f 92       	push	r0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	0f 92       	push	r0
    11e2:	11 24       	eor	r1, r1
    11e4:	2f 93       	push	r18
    11e6:	3f 93       	push	r19
    11e8:	4f 93       	push	r20
    11ea:	5f 93       	push	r21
    11ec:	6f 93       	push	r22
    11ee:	7f 93       	push	r23
    11f0:	8f 93       	push	r24
    11f2:	9f 93       	push	r25
    11f4:	af 93       	push	r26
    11f6:	bf 93       	push	r27
    11f8:	ef 93       	push	r30
    11fa:	ff 93       	push	r31
    11fc:	20 91 1c 01 	lds	r18, 0x011C
    1200:	30 91 1d 01 	lds	r19, 0x011D
    1204:	40 91 84 00 	lds	r20, 0x0084
    1208:	50 91 85 00 	lds	r21, 0x0085
    120c:	c9 01       	movw	r24, r18
    120e:	aa 27       	eor	r26, r26
    1210:	97 fd       	sbrc	r25, 7
    1212:	a0 95       	com	r26
    1214:	ba 2f       	mov	r27, r26
    1216:	dc 01       	movw	r26, r24
    1218:	99 27       	eor	r25, r25
    121a:	88 27       	eor	r24, r24
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	84 2b       	or	r24, r20
    1222:	95 2b       	or	r25, r21
    1224:	a6 2b       	or	r26, r22
    1226:	b7 2b       	or	r27, r23
    1228:	80 93 1e 01 	sts	0x011E, r24
    122c:	90 93 1f 01 	sts	0x011F, r25
    1230:	a0 93 20 01 	sts	0x0120, r26
    1234:	b0 93 21 01 	sts	0x0121, r27
    1238:	b0 9b       	sbis	0x16, 0	; 22
    123a:	1b c0       	rjmp	.+54     	; 0x1272 <__vector_12+0x98>
    123c:	40 91 84 00 	lds	r20, 0x0084
    1240:	50 91 85 00 	lds	r21, 0x0085
    1244:	c9 01       	movw	r24, r18
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	aa 27       	eor	r26, r26
    124a:	97 fd       	sbrc	r25, 7
    124c:	a0 95       	com	r26
    124e:	ba 2f       	mov	r27, r26
    1250:	dc 01       	movw	r26, r24
    1252:	99 27       	eor	r25, r25
    1254:	88 27       	eor	r24, r24
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	84 2b       	or	r24, r20
    125c:	95 2b       	or	r25, r21
    125e:	a6 2b       	or	r26, r22
    1260:	b7 2b       	or	r27, r23
    1262:	80 93 1e 01 	sts	0x011E, r24
    1266:	90 93 1f 01 	sts	0x011F, r25
    126a:	a0 93 20 01 	sts	0x0120, r26
    126e:	b0 93 21 01 	sts	0x0121, r27
    1272:	e0 91 cc 01 	lds	r30, 0x01CC
    1276:	f0 91 cd 01 	lds	r31, 0x01CD
    127a:	30 97       	sbiw	r30, 0x00	; 0
    127c:	39 f0       	breq	.+14     	; 0x128c <__vector_12+0xb2>
    127e:	67 e0       	ldi	r22, 0x07	; 7
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	80 91 34 01 	lds	r24, 0x0134
    1286:	90 91 35 01 	lds	r25, 0x0135
    128a:	09 95       	icall
    128c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	bf 91       	pop	r27
    1296:	af 91       	pop	r26
    1298:	9f 91       	pop	r25
    129a:	8f 91       	pop	r24
    129c:	7f 91       	pop	r23
    129e:	6f 91       	pop	r22
    12a0:	5f 91       	pop	r21
    12a2:	4f 91       	pop	r20
    12a4:	3f 91       	pop	r19
    12a6:	2f 91       	pop	r18
    12a8:	0f 90       	pop	r0
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	0f 90       	pop	r0
    12ae:	1f 90       	pop	r1
    12b0:	18 95       	reti

000012b2 <__vector_13>:
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
    12b2:	1f 92       	push	r1
    12b4:	0f 92       	push	r0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	0f 92       	push	r0
    12ba:	11 24       	eor	r1, r1
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
    12d4:	20 91 1c 01 	lds	r18, 0x011C
    12d8:	30 91 1d 01 	lds	r19, 0x011D
    12dc:	40 91 84 00 	lds	r20, 0x0084
    12e0:	50 91 85 00 	lds	r21, 0x0085
    12e4:	c9 01       	movw	r24, r18
    12e6:	aa 27       	eor	r26, r26
    12e8:	97 fd       	sbrc	r25, 7
    12ea:	a0 95       	com	r26
    12ec:	ba 2f       	mov	r27, r26
    12ee:	dc 01       	movw	r26, r24
    12f0:	99 27       	eor	r25, r25
    12f2:	88 27       	eor	r24, r24
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	84 2b       	or	r24, r20
    12fa:	95 2b       	or	r25, r21
    12fc:	a6 2b       	or	r26, r22
    12fe:	b7 2b       	or	r27, r23
    1300:	80 93 1e 01 	sts	0x011E, r24
    1304:	90 93 1f 01 	sts	0x011F, r25
    1308:	a0 93 20 01 	sts	0x0120, r26
    130c:	b0 93 21 01 	sts	0x0121, r27
    1310:	b0 9b       	sbis	0x16, 0	; 22
    1312:	1b c0       	rjmp	.+54     	; 0x134a <__vector_13+0x98>
    1314:	40 91 84 00 	lds	r20, 0x0084
    1318:	50 91 85 00 	lds	r21, 0x0085
    131c:	c9 01       	movw	r24, r18
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	aa 27       	eor	r26, r26
    1322:	97 fd       	sbrc	r25, 7
    1324:	a0 95       	com	r26
    1326:	ba 2f       	mov	r27, r26
    1328:	dc 01       	movw	r26, r24
    132a:	99 27       	eor	r25, r25
    132c:	88 27       	eor	r24, r24
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	84 2b       	or	r24, r20
    1334:	95 2b       	or	r25, r21
    1336:	a6 2b       	or	r26, r22
    1338:	b7 2b       	or	r27, r23
    133a:	80 93 1e 01 	sts	0x011E, r24
    133e:	90 93 1f 01 	sts	0x011F, r25
    1342:	a0 93 20 01 	sts	0x0120, r26
    1346:	b0 93 21 01 	sts	0x0121, r27
    134a:	e0 91 ce 01 	lds	r30, 0x01CE
    134e:	f0 91 cf 01 	lds	r31, 0x01CF
    1352:	30 97       	sbiw	r30, 0x00	; 0
    1354:	39 f0       	breq	.+14     	; 0x1364 <__vector_13+0xb2>
    1356:	68 e0       	ldi	r22, 0x08	; 8
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	80 91 36 01 	lds	r24, 0x0136
    135e:	90 91 37 01 	lds	r25, 0x0137
    1362:	09 95       	icall
    1364:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    1368:	ff 91       	pop	r31
    136a:	ef 91       	pop	r30
    136c:	bf 91       	pop	r27
    136e:	af 91       	pop	r26
    1370:	9f 91       	pop	r25
    1372:	8f 91       	pop	r24
    1374:	7f 91       	pop	r23
    1376:	6f 91       	pop	r22
    1378:	5f 91       	pop	r21
    137a:	4f 91       	pop	r20
    137c:	3f 91       	pop	r19
    137e:	2f 91       	pop	r18
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_14>:
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31
    13ac:	20 91 1c 01 	lds	r18, 0x011C
    13b0:	30 91 1d 01 	lds	r19, 0x011D
    13b4:	40 91 84 00 	lds	r20, 0x0084
    13b8:	50 91 85 00 	lds	r21, 0x0085
    13bc:	c9 01       	movw	r24, r18
    13be:	aa 27       	eor	r26, r26
    13c0:	97 fd       	sbrc	r25, 7
    13c2:	a0 95       	com	r26
    13c4:	ba 2f       	mov	r27, r26
    13c6:	dc 01       	movw	r26, r24
    13c8:	99 27       	eor	r25, r25
    13ca:	88 27       	eor	r24, r24
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	84 2b       	or	r24, r20
    13d2:	95 2b       	or	r25, r21
    13d4:	a6 2b       	or	r26, r22
    13d6:	b7 2b       	or	r27, r23
    13d8:	80 93 1e 01 	sts	0x011E, r24
    13dc:	90 93 1f 01 	sts	0x011F, r25
    13e0:	a0 93 20 01 	sts	0x0120, r26
    13e4:	b0 93 21 01 	sts	0x0121, r27
    13e8:	b0 9b       	sbis	0x16, 0	; 22
    13ea:	1b c0       	rjmp	.+54     	; 0x1422 <__vector_14+0x98>
    13ec:	40 91 84 00 	lds	r20, 0x0084
    13f0:	50 91 85 00 	lds	r21, 0x0085
    13f4:	c9 01       	movw	r24, r18
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	aa 27       	eor	r26, r26
    13fa:	97 fd       	sbrc	r25, 7
    13fc:	a0 95       	com	r26
    13fe:	ba 2f       	mov	r27, r26
    1400:	dc 01       	movw	r26, r24
    1402:	99 27       	eor	r25, r25
    1404:	88 27       	eor	r24, r24
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	84 2b       	or	r24, r20
    140c:	95 2b       	or	r25, r21
    140e:	a6 2b       	or	r26, r22
    1410:	b7 2b       	or	r27, r23
    1412:	80 93 1e 01 	sts	0x011E, r24
    1416:	90 93 1f 01 	sts	0x011F, r25
    141a:	a0 93 20 01 	sts	0x0120, r26
    141e:	b0 93 21 01 	sts	0x0121, r27
    1422:	e0 91 d0 01 	lds	r30, 0x01D0
    1426:	f0 91 d1 01 	lds	r31, 0x01D1
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	39 f0       	breq	.+14     	; 0x143c <__vector_14+0xb2>
    142e:	69 e0       	ldi	r22, 0x09	; 9
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	80 91 38 01 	lds	r24, 0x0138
    1436:	90 91 39 01 	lds	r25, 0x0139
    143a:	09 95       	icall
    143c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	7f 91       	pop	r23
    144e:	6f 91       	pop	r22
    1450:	5f 91       	pop	r21
    1452:	4f 91       	pop	r20
    1454:	3f 91       	pop	r19
    1456:	2f 91       	pop	r18
    1458:	0f 90       	pop	r0
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	0f 90       	pop	r0
    145e:	1f 90       	pop	r1
    1460:	18 95       	reti

00001462 <__vector_15>:
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
    1462:	1f 92       	push	r1
    1464:	0f 92       	push	r0
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	0f 92       	push	r0
    146a:	11 24       	eor	r1, r1
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	ef 93       	push	r30
    1482:	ff 93       	push	r31
    1484:	20 91 1c 01 	lds	r18, 0x011C
    1488:	30 91 1d 01 	lds	r19, 0x011D
    148c:	40 91 84 00 	lds	r20, 0x0084
    1490:	50 91 85 00 	lds	r21, 0x0085
    1494:	c9 01       	movw	r24, r18
    1496:	aa 27       	eor	r26, r26
    1498:	97 fd       	sbrc	r25, 7
    149a:	a0 95       	com	r26
    149c:	ba 2f       	mov	r27, r26
    149e:	dc 01       	movw	r26, r24
    14a0:	99 27       	eor	r25, r25
    14a2:	88 27       	eor	r24, r24
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	84 2b       	or	r24, r20
    14aa:	95 2b       	or	r25, r21
    14ac:	a6 2b       	or	r26, r22
    14ae:	b7 2b       	or	r27, r23
    14b0:	80 93 1e 01 	sts	0x011E, r24
    14b4:	90 93 1f 01 	sts	0x011F, r25
    14b8:	a0 93 20 01 	sts	0x0120, r26
    14bc:	b0 93 21 01 	sts	0x0121, r27
    14c0:	b0 9b       	sbis	0x16, 0	; 22
    14c2:	1b c0       	rjmp	.+54     	; 0x14fa <__vector_15+0x98>
    14c4:	40 91 84 00 	lds	r20, 0x0084
    14c8:	50 91 85 00 	lds	r21, 0x0085
    14cc:	c9 01       	movw	r24, r18
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	aa 27       	eor	r26, r26
    14d2:	97 fd       	sbrc	r25, 7
    14d4:	a0 95       	com	r26
    14d6:	ba 2f       	mov	r27, r26
    14d8:	dc 01       	movw	r26, r24
    14da:	99 27       	eor	r25, r25
    14dc:	88 27       	eor	r24, r24
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	84 2b       	or	r24, r20
    14e4:	95 2b       	or	r25, r21
    14e6:	a6 2b       	or	r26, r22
    14e8:	b7 2b       	or	r27, r23
    14ea:	80 93 1e 01 	sts	0x011E, r24
    14ee:	90 93 1f 01 	sts	0x011F, r25
    14f2:	a0 93 20 01 	sts	0x0120, r26
    14f6:	b0 93 21 01 	sts	0x0121, r27
    14fa:	e0 91 d2 01 	lds	r30, 0x01D2
    14fe:	f0 91 d3 01 	lds	r31, 0x01D3
    1502:	30 97       	sbiw	r30, 0x00	; 0
    1504:	39 f0       	breq	.+14     	; 0x1514 <__vector_15+0xb2>
    1506:	6a e0       	ldi	r22, 0x0A	; 10
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	80 91 3a 01 	lds	r24, 0x013A
    150e:	90 91 3b 01 	lds	r25, 0x013B
    1512:	09 95       	icall
    1514:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    1518:	ff 91       	pop	r31
    151a:	ef 91       	pop	r30
    151c:	bf 91       	pop	r27
    151e:	af 91       	pop	r26
    1520:	9f 91       	pop	r25
    1522:	8f 91       	pop	r24
    1524:	7f 91       	pop	r23
    1526:	6f 91       	pop	r22
    1528:	5f 91       	pop	r21
    152a:	4f 91       	pop	r20
    152c:	3f 91       	pop	r19
    152e:	2f 91       	pop	r18
    1530:	0f 90       	pop	r0
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	0f 90       	pop	r0
    1536:	1f 90       	pop	r1
    1538:	18 95       	reti

0000153a <__vector_16>:
IRQ(IRQ_USI_START,       USI_START_vect);
    153a:	1f 92       	push	r1
    153c:	0f 92       	push	r0
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	0f 92       	push	r0
    1542:	11 24       	eor	r1, r1
    1544:	2f 93       	push	r18
    1546:	3f 93       	push	r19
    1548:	4f 93       	push	r20
    154a:	5f 93       	push	r21
    154c:	6f 93       	push	r22
    154e:	7f 93       	push	r23
    1550:	8f 93       	push	r24
    1552:	9f 93       	push	r25
    1554:	af 93       	push	r26
    1556:	bf 93       	push	r27
    1558:	ef 93       	push	r30
    155a:	ff 93       	push	r31
    155c:	20 91 1c 01 	lds	r18, 0x011C
    1560:	30 91 1d 01 	lds	r19, 0x011D
    1564:	40 91 84 00 	lds	r20, 0x0084
    1568:	50 91 85 00 	lds	r21, 0x0085
    156c:	c9 01       	movw	r24, r18
    156e:	aa 27       	eor	r26, r26
    1570:	97 fd       	sbrc	r25, 7
    1572:	a0 95       	com	r26
    1574:	ba 2f       	mov	r27, r26
    1576:	dc 01       	movw	r26, r24
    1578:	99 27       	eor	r25, r25
    157a:	88 27       	eor	r24, r24
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	84 2b       	or	r24, r20
    1582:	95 2b       	or	r25, r21
    1584:	a6 2b       	or	r26, r22
    1586:	b7 2b       	or	r27, r23
    1588:	80 93 1e 01 	sts	0x011E, r24
    158c:	90 93 1f 01 	sts	0x011F, r25
    1590:	a0 93 20 01 	sts	0x0120, r26
    1594:	b0 93 21 01 	sts	0x0121, r27
    1598:	b0 9b       	sbis	0x16, 0	; 22
    159a:	1b c0       	rjmp	.+54     	; 0x15d2 <__vector_16+0x98>
    159c:	40 91 84 00 	lds	r20, 0x0084
    15a0:	50 91 85 00 	lds	r21, 0x0085
    15a4:	c9 01       	movw	r24, r18
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	aa 27       	eor	r26, r26
    15aa:	97 fd       	sbrc	r25, 7
    15ac:	a0 95       	com	r26
    15ae:	ba 2f       	mov	r27, r26
    15b0:	dc 01       	movw	r26, r24
    15b2:	99 27       	eor	r25, r25
    15b4:	88 27       	eor	r24, r24
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	84 2b       	or	r24, r20
    15bc:	95 2b       	or	r25, r21
    15be:	a6 2b       	or	r26, r22
    15c0:	b7 2b       	or	r27, r23
    15c2:	80 93 1e 01 	sts	0x011E, r24
    15c6:	90 93 1f 01 	sts	0x011F, r25
    15ca:	a0 93 20 01 	sts	0x0120, r26
    15ce:	b0 93 21 01 	sts	0x0121, r27
    15d2:	e0 91 d4 01 	lds	r30, 0x01D4
    15d6:	f0 91 d5 01 	lds	r31, 0x01D5
    15da:	30 97       	sbiw	r30, 0x00	; 0
    15dc:	39 f0       	breq	.+14     	; 0x15ec <__vector_16+0xb2>
    15de:	6b e0       	ldi	r22, 0x0B	; 11
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	80 91 3c 01 	lds	r24, 0x013C
    15e6:	90 91 3d 01 	lds	r25, 0x013D
    15ea:	09 95       	icall
    15ec:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	0f 90       	pop	r0
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	0f 90       	pop	r0
    160e:	1f 90       	pop	r1
    1610:	18 95       	reti

00001612 <__vector_17>:
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	2f 93       	push	r18
    161e:	3f 93       	push	r19
    1620:	4f 93       	push	r20
    1622:	5f 93       	push	r21
    1624:	6f 93       	push	r22
    1626:	7f 93       	push	r23
    1628:	8f 93       	push	r24
    162a:	9f 93       	push	r25
    162c:	af 93       	push	r26
    162e:	bf 93       	push	r27
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
    1634:	20 91 1c 01 	lds	r18, 0x011C
    1638:	30 91 1d 01 	lds	r19, 0x011D
    163c:	40 91 84 00 	lds	r20, 0x0084
    1640:	50 91 85 00 	lds	r21, 0x0085
    1644:	c9 01       	movw	r24, r18
    1646:	aa 27       	eor	r26, r26
    1648:	97 fd       	sbrc	r25, 7
    164a:	a0 95       	com	r26
    164c:	ba 2f       	mov	r27, r26
    164e:	dc 01       	movw	r26, r24
    1650:	99 27       	eor	r25, r25
    1652:	88 27       	eor	r24, r24
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	84 2b       	or	r24, r20
    165a:	95 2b       	or	r25, r21
    165c:	a6 2b       	or	r26, r22
    165e:	b7 2b       	or	r27, r23
    1660:	80 93 1e 01 	sts	0x011E, r24
    1664:	90 93 1f 01 	sts	0x011F, r25
    1668:	a0 93 20 01 	sts	0x0120, r26
    166c:	b0 93 21 01 	sts	0x0121, r27
    1670:	b0 9b       	sbis	0x16, 0	; 22
    1672:	1b c0       	rjmp	.+54     	; 0x16aa <__vector_17+0x98>
    1674:	40 91 84 00 	lds	r20, 0x0084
    1678:	50 91 85 00 	lds	r21, 0x0085
    167c:	c9 01       	movw	r24, r18
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	aa 27       	eor	r26, r26
    1682:	97 fd       	sbrc	r25, 7
    1684:	a0 95       	com	r26
    1686:	ba 2f       	mov	r27, r26
    1688:	dc 01       	movw	r26, r24
    168a:	99 27       	eor	r25, r25
    168c:	88 27       	eor	r24, r24
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	84 2b       	or	r24, r20
    1694:	95 2b       	or	r25, r21
    1696:	a6 2b       	or	r26, r22
    1698:	b7 2b       	or	r27, r23
    169a:	80 93 1e 01 	sts	0x011E, r24
    169e:	90 93 1f 01 	sts	0x011F, r25
    16a2:	a0 93 20 01 	sts	0x0120, r26
    16a6:	b0 93 21 01 	sts	0x0121, r27
    16aa:	e0 91 d6 01 	lds	r30, 0x01D6
    16ae:	f0 91 d7 01 	lds	r31, 0x01D7
    16b2:	30 97       	sbiw	r30, 0x00	; 0
    16b4:	39 f0       	breq	.+14     	; 0x16c4 <__vector_17+0xb2>
    16b6:	6c e0       	ldi	r22, 0x0C	; 12
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	80 91 3e 01 	lds	r24, 0x013E
    16be:	90 91 3f 01 	lds	r25, 0x013F
    16c2:	09 95       	icall
    16c4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    16c8:	ff 91       	pop	r31
    16ca:	ef 91       	pop	r30
    16cc:	bf 91       	pop	r27
    16ce:	af 91       	pop	r26
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	7f 91       	pop	r23
    16d6:	6f 91       	pop	r22
    16d8:	5f 91       	pop	r21
    16da:	4f 91       	pop	r20
    16dc:	3f 91       	pop	r19
    16de:	2f 91       	pop	r18
    16e0:	0f 90       	pop	r0
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	0f 90       	pop	r0
    16e6:	1f 90       	pop	r1
    16e8:	18 95       	reti

000016ea <__vector_18>:
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
    16ea:	1f 92       	push	r1
    16ec:	0f 92       	push	r0
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	0f 92       	push	r0
    16f2:	11 24       	eor	r1, r1
    16f4:	2f 93       	push	r18
    16f6:	3f 93       	push	r19
    16f8:	4f 93       	push	r20
    16fa:	5f 93       	push	r21
    16fc:	6f 93       	push	r22
    16fe:	7f 93       	push	r23
    1700:	8f 93       	push	r24
    1702:	9f 93       	push	r25
    1704:	af 93       	push	r26
    1706:	bf 93       	push	r27
    1708:	ef 93       	push	r30
    170a:	ff 93       	push	r31
    170c:	20 91 1c 01 	lds	r18, 0x011C
    1710:	30 91 1d 01 	lds	r19, 0x011D
    1714:	40 91 84 00 	lds	r20, 0x0084
    1718:	50 91 85 00 	lds	r21, 0x0085
    171c:	c9 01       	movw	r24, r18
    171e:	aa 27       	eor	r26, r26
    1720:	97 fd       	sbrc	r25, 7
    1722:	a0 95       	com	r26
    1724:	ba 2f       	mov	r27, r26
    1726:	dc 01       	movw	r26, r24
    1728:	99 27       	eor	r25, r25
    172a:	88 27       	eor	r24, r24
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	84 2b       	or	r24, r20
    1732:	95 2b       	or	r25, r21
    1734:	a6 2b       	or	r26, r22
    1736:	b7 2b       	or	r27, r23
    1738:	80 93 1e 01 	sts	0x011E, r24
    173c:	90 93 1f 01 	sts	0x011F, r25
    1740:	a0 93 20 01 	sts	0x0120, r26
    1744:	b0 93 21 01 	sts	0x0121, r27
    1748:	b0 9b       	sbis	0x16, 0	; 22
    174a:	1b c0       	rjmp	.+54     	; 0x1782 <__vector_18+0x98>
    174c:	40 91 84 00 	lds	r20, 0x0084
    1750:	50 91 85 00 	lds	r21, 0x0085
    1754:	c9 01       	movw	r24, r18
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	aa 27       	eor	r26, r26
    175a:	97 fd       	sbrc	r25, 7
    175c:	a0 95       	com	r26
    175e:	ba 2f       	mov	r27, r26
    1760:	dc 01       	movw	r26, r24
    1762:	99 27       	eor	r25, r25
    1764:	88 27       	eor	r24, r24
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	84 2b       	or	r24, r20
    176c:	95 2b       	or	r25, r21
    176e:	a6 2b       	or	r26, r22
    1770:	b7 2b       	or	r27, r23
    1772:	80 93 1e 01 	sts	0x011E, r24
    1776:	90 93 1f 01 	sts	0x011F, r25
    177a:	a0 93 20 01 	sts	0x0120, r26
    177e:	b0 93 21 01 	sts	0x0121, r27
    1782:	e0 91 d8 01 	lds	r30, 0x01D8
    1786:	f0 91 d9 01 	lds	r31, 0x01D9
    178a:	30 97       	sbiw	r30, 0x00	; 0
    178c:	39 f0       	breq	.+14     	; 0x179c <__vector_18+0xb2>
    178e:	6d e0       	ldi	r22, 0x0D	; 13
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	80 91 40 01 	lds	r24, 0x0140
    1796:	90 91 41 01 	lds	r25, 0x0141
    179a:	09 95       	icall
    179c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    17a0:	ff 91       	pop	r31
    17a2:	ef 91       	pop	r30
    17a4:	bf 91       	pop	r27
    17a6:	af 91       	pop	r26
    17a8:	9f 91       	pop	r25
    17aa:	8f 91       	pop	r24
    17ac:	7f 91       	pop	r23
    17ae:	6f 91       	pop	r22
    17b0:	5f 91       	pop	r21
    17b2:	4f 91       	pop	r20
    17b4:	3f 91       	pop	r19
    17b6:	2f 91       	pop	r18
    17b8:	0f 90       	pop	r0
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	0f 90       	pop	r0
    17be:	1f 90       	pop	r1
    17c0:	18 95       	reti

000017c2 <__vector_19>:
IRQ(IRQ_ADC,             ADC_vect);
    17c2:	1f 92       	push	r1
    17c4:	0f 92       	push	r0
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	0f 92       	push	r0
    17ca:	11 24       	eor	r1, r1
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
    17e4:	20 91 1c 01 	lds	r18, 0x011C
    17e8:	30 91 1d 01 	lds	r19, 0x011D
    17ec:	40 91 84 00 	lds	r20, 0x0084
    17f0:	50 91 85 00 	lds	r21, 0x0085
    17f4:	c9 01       	movw	r24, r18
    17f6:	aa 27       	eor	r26, r26
    17f8:	97 fd       	sbrc	r25, 7
    17fa:	a0 95       	com	r26
    17fc:	ba 2f       	mov	r27, r26
    17fe:	dc 01       	movw	r26, r24
    1800:	99 27       	eor	r25, r25
    1802:	88 27       	eor	r24, r24
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	84 2b       	or	r24, r20
    180a:	95 2b       	or	r25, r21
    180c:	a6 2b       	or	r26, r22
    180e:	b7 2b       	or	r27, r23
    1810:	80 93 1e 01 	sts	0x011E, r24
    1814:	90 93 1f 01 	sts	0x011F, r25
    1818:	a0 93 20 01 	sts	0x0120, r26
    181c:	b0 93 21 01 	sts	0x0121, r27
    1820:	b0 9b       	sbis	0x16, 0	; 22
    1822:	1b c0       	rjmp	.+54     	; 0x185a <__vector_19+0x98>
    1824:	40 91 84 00 	lds	r20, 0x0084
    1828:	50 91 85 00 	lds	r21, 0x0085
    182c:	c9 01       	movw	r24, r18
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	aa 27       	eor	r26, r26
    1832:	97 fd       	sbrc	r25, 7
    1834:	a0 95       	com	r26
    1836:	ba 2f       	mov	r27, r26
    1838:	dc 01       	movw	r26, r24
    183a:	99 27       	eor	r25, r25
    183c:	88 27       	eor	r24, r24
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	84 2b       	or	r24, r20
    1844:	95 2b       	or	r25, r21
    1846:	a6 2b       	or	r26, r22
    1848:	b7 2b       	or	r27, r23
    184a:	80 93 1e 01 	sts	0x011E, r24
    184e:	90 93 1f 01 	sts	0x011F, r25
    1852:	a0 93 20 01 	sts	0x0120, r26
    1856:	b0 93 21 01 	sts	0x0121, r27
    185a:	e0 91 da 01 	lds	r30, 0x01DA
    185e:	f0 91 db 01 	lds	r31, 0x01DB
    1862:	30 97       	sbiw	r30, 0x00	; 0
    1864:	39 f0       	breq	.+14     	; 0x1874 <__vector_19+0xb2>
    1866:	6e e0       	ldi	r22, 0x0E	; 14
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	80 91 42 01 	lds	r24, 0x0142
    186e:	90 91 43 01 	lds	r25, 0x0143
    1872:	09 95       	icall
    1874:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    1878:	ff 91       	pop	r31
    187a:	ef 91       	pop	r30
    187c:	bf 91       	pop	r27
    187e:	af 91       	pop	r26
    1880:	9f 91       	pop	r25
    1882:	8f 91       	pop	r24
    1884:	7f 91       	pop	r23
    1886:	6f 91       	pop	r22
    1888:	5f 91       	pop	r21
    188a:	4f 91       	pop	r20
    188c:	3f 91       	pop	r19
    188e:	2f 91       	pop	r18
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <__vector_20>:
IRQ(IRQ_EE_READY,        EE_READY_vect);
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	2f 93       	push	r18
    18a6:	3f 93       	push	r19
    18a8:	4f 93       	push	r20
    18aa:	5f 93       	push	r21
    18ac:	6f 93       	push	r22
    18ae:	7f 93       	push	r23
    18b0:	8f 93       	push	r24
    18b2:	9f 93       	push	r25
    18b4:	af 93       	push	r26
    18b6:	bf 93       	push	r27
    18b8:	ef 93       	push	r30
    18ba:	ff 93       	push	r31
    18bc:	20 91 1c 01 	lds	r18, 0x011C
    18c0:	30 91 1d 01 	lds	r19, 0x011D
    18c4:	40 91 84 00 	lds	r20, 0x0084
    18c8:	50 91 85 00 	lds	r21, 0x0085
    18cc:	c9 01       	movw	r24, r18
    18ce:	aa 27       	eor	r26, r26
    18d0:	97 fd       	sbrc	r25, 7
    18d2:	a0 95       	com	r26
    18d4:	ba 2f       	mov	r27, r26
    18d6:	dc 01       	movw	r26, r24
    18d8:	99 27       	eor	r25, r25
    18da:	88 27       	eor	r24, r24
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	84 2b       	or	r24, r20
    18e2:	95 2b       	or	r25, r21
    18e4:	a6 2b       	or	r26, r22
    18e6:	b7 2b       	or	r27, r23
    18e8:	80 93 1e 01 	sts	0x011E, r24
    18ec:	90 93 1f 01 	sts	0x011F, r25
    18f0:	a0 93 20 01 	sts	0x0120, r26
    18f4:	b0 93 21 01 	sts	0x0121, r27
    18f8:	b0 9b       	sbis	0x16, 0	; 22
    18fa:	1b c0       	rjmp	.+54     	; 0x1932 <__vector_20+0x98>
    18fc:	40 91 84 00 	lds	r20, 0x0084
    1900:	50 91 85 00 	lds	r21, 0x0085
    1904:	c9 01       	movw	r24, r18
    1906:	01 96       	adiw	r24, 0x01	; 1
    1908:	aa 27       	eor	r26, r26
    190a:	97 fd       	sbrc	r25, 7
    190c:	a0 95       	com	r26
    190e:	ba 2f       	mov	r27, r26
    1910:	dc 01       	movw	r26, r24
    1912:	99 27       	eor	r25, r25
    1914:	88 27       	eor	r24, r24
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	84 2b       	or	r24, r20
    191c:	95 2b       	or	r25, r21
    191e:	a6 2b       	or	r26, r22
    1920:	b7 2b       	or	r27, r23
    1922:	80 93 1e 01 	sts	0x011E, r24
    1926:	90 93 1f 01 	sts	0x011F, r25
    192a:	a0 93 20 01 	sts	0x0120, r26
    192e:	b0 93 21 01 	sts	0x0121, r27
    1932:	e0 91 dc 01 	lds	r30, 0x01DC
    1936:	f0 91 dd 01 	lds	r31, 0x01DD
    193a:	30 97       	sbiw	r30, 0x00	; 0
    193c:	39 f0       	breq	.+14     	; 0x194c <__vector_20+0xb2>
    193e:	6f e0       	ldi	r22, 0x0F	; 15
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	80 91 44 01 	lds	r24, 0x0144
    1946:	90 91 45 01 	lds	r25, 0x0145
    194a:	09 95       	icall
    194c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    1950:	ff 91       	pop	r31
    1952:	ef 91       	pop	r30
    1954:	bf 91       	pop	r27
    1956:	af 91       	pop	r26
    1958:	9f 91       	pop	r25
    195a:	8f 91       	pop	r24
    195c:	7f 91       	pop	r23
    195e:	6f 91       	pop	r22
    1960:	5f 91       	pop	r21
    1962:	4f 91       	pop	r20
    1964:	3f 91       	pop	r19
    1966:	2f 91       	pop	r18
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	0f 90       	pop	r0
    196e:	1f 90       	pop	r1
    1970:	18 95       	reti

00001972 <__vector_21>:
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
    1972:	1f 92       	push	r1
    1974:	0f 92       	push	r0
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	11 24       	eor	r1, r1
    197c:	2f 93       	push	r18
    197e:	3f 93       	push	r19
    1980:	4f 93       	push	r20
    1982:	5f 93       	push	r21
    1984:	6f 93       	push	r22
    1986:	7f 93       	push	r23
    1988:	8f 93       	push	r24
    198a:	9f 93       	push	r25
    198c:	af 93       	push	r26
    198e:	bf 93       	push	r27
    1990:	ef 93       	push	r30
    1992:	ff 93       	push	r31
    1994:	20 91 1c 01 	lds	r18, 0x011C
    1998:	30 91 1d 01 	lds	r19, 0x011D
    199c:	40 91 84 00 	lds	r20, 0x0084
    19a0:	50 91 85 00 	lds	r21, 0x0085
    19a4:	c9 01       	movw	r24, r18
    19a6:	aa 27       	eor	r26, r26
    19a8:	97 fd       	sbrc	r25, 7
    19aa:	a0 95       	com	r26
    19ac:	ba 2f       	mov	r27, r26
    19ae:	dc 01       	movw	r26, r24
    19b0:	99 27       	eor	r25, r25
    19b2:	88 27       	eor	r24, r24
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	84 2b       	or	r24, r20
    19ba:	95 2b       	or	r25, r21
    19bc:	a6 2b       	or	r26, r22
    19be:	b7 2b       	or	r27, r23
    19c0:	80 93 1e 01 	sts	0x011E, r24
    19c4:	90 93 1f 01 	sts	0x011F, r25
    19c8:	a0 93 20 01 	sts	0x0120, r26
    19cc:	b0 93 21 01 	sts	0x0121, r27
    19d0:	b0 9b       	sbis	0x16, 0	; 22
    19d2:	1b c0       	rjmp	.+54     	; 0x1a0a <__vector_21+0x98>
    19d4:	40 91 84 00 	lds	r20, 0x0084
    19d8:	50 91 85 00 	lds	r21, 0x0085
    19dc:	c9 01       	movw	r24, r18
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	aa 27       	eor	r26, r26
    19e2:	97 fd       	sbrc	r25, 7
    19e4:	a0 95       	com	r26
    19e6:	ba 2f       	mov	r27, r26
    19e8:	dc 01       	movw	r26, r24
    19ea:	99 27       	eor	r25, r25
    19ec:	88 27       	eor	r24, r24
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	84 2b       	or	r24, r20
    19f4:	95 2b       	or	r25, r21
    19f6:	a6 2b       	or	r26, r22
    19f8:	b7 2b       	or	r27, r23
    19fa:	80 93 1e 01 	sts	0x011E, r24
    19fe:	90 93 1f 01 	sts	0x011F, r25
    1a02:	a0 93 20 01 	sts	0x0120, r26
    1a06:	b0 93 21 01 	sts	0x0121, r27
    1a0a:	e0 91 de 01 	lds	r30, 0x01DE
    1a0e:	f0 91 df 01 	lds	r31, 0x01DF
    1a12:	30 97       	sbiw	r30, 0x00	; 0
    1a14:	39 f0       	breq	.+14     	; 0x1a24 <__vector_21+0xb2>
    1a16:	60 e1       	ldi	r22, 0x10	; 16
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	80 91 46 01 	lds	r24, 0x0146
    1a1e:	90 91 47 01 	lds	r25, 0x0147
    1a22:	09 95       	icall
    1a24:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <__vector_22>:
IRQ(IRQ_LCD,             LCD_vect);
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	0f 92       	push	r0
    1a52:	11 24       	eor	r1, r1
    1a54:	2f 93       	push	r18
    1a56:	3f 93       	push	r19
    1a58:	4f 93       	push	r20
    1a5a:	5f 93       	push	r21
    1a5c:	6f 93       	push	r22
    1a5e:	7f 93       	push	r23
    1a60:	8f 93       	push	r24
    1a62:	9f 93       	push	r25
    1a64:	af 93       	push	r26
    1a66:	bf 93       	push	r27
    1a68:	ef 93       	push	r30
    1a6a:	ff 93       	push	r31
    1a6c:	20 91 1c 01 	lds	r18, 0x011C
    1a70:	30 91 1d 01 	lds	r19, 0x011D
    1a74:	40 91 84 00 	lds	r20, 0x0084
    1a78:	50 91 85 00 	lds	r21, 0x0085
    1a7c:	c9 01       	movw	r24, r18
    1a7e:	aa 27       	eor	r26, r26
    1a80:	97 fd       	sbrc	r25, 7
    1a82:	a0 95       	com	r26
    1a84:	ba 2f       	mov	r27, r26
    1a86:	dc 01       	movw	r26, r24
    1a88:	99 27       	eor	r25, r25
    1a8a:	88 27       	eor	r24, r24
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	84 2b       	or	r24, r20
    1a92:	95 2b       	or	r25, r21
    1a94:	a6 2b       	or	r26, r22
    1a96:	b7 2b       	or	r27, r23
    1a98:	80 93 1e 01 	sts	0x011E, r24
    1a9c:	90 93 1f 01 	sts	0x011F, r25
    1aa0:	a0 93 20 01 	sts	0x0120, r26
    1aa4:	b0 93 21 01 	sts	0x0121, r27
    1aa8:	b0 9b       	sbis	0x16, 0	; 22
    1aaa:	1b c0       	rjmp	.+54     	; 0x1ae2 <__vector_22+0x98>
    1aac:	40 91 84 00 	lds	r20, 0x0084
    1ab0:	50 91 85 00 	lds	r21, 0x0085
    1ab4:	c9 01       	movw	r24, r18
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	aa 27       	eor	r26, r26
    1aba:	97 fd       	sbrc	r25, 7
    1abc:	a0 95       	com	r26
    1abe:	ba 2f       	mov	r27, r26
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	99 27       	eor	r25, r25
    1ac4:	88 27       	eor	r24, r24
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	84 2b       	or	r24, r20
    1acc:	95 2b       	or	r25, r21
    1ace:	a6 2b       	or	r26, r22
    1ad0:	b7 2b       	or	r27, r23
    1ad2:	80 93 1e 01 	sts	0x011E, r24
    1ad6:	90 93 1f 01 	sts	0x011F, r25
    1ada:	a0 93 20 01 	sts	0x0120, r26
    1ade:	b0 93 21 01 	sts	0x0121, r27
    1ae2:	e0 91 e0 01 	lds	r30, 0x01E0
    1ae6:	f0 91 e1 01 	lds	r31, 0x01E1
    1aea:	30 97       	sbiw	r30, 0x00	; 0
    1aec:	39 f0       	breq	.+14     	; 0x1afc <__vector_22+0xb2>
    1aee:	61 e1       	ldi	r22, 0x11	; 17
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	80 91 48 01 	lds	r24, 0x0148
    1af6:	90 91 49 01 	lds	r25, 0x0149
    1afa:	09 95       	icall
    1afc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    1b00:	ff 91       	pop	r31
    1b02:	ef 91       	pop	r30
    1b04:	bf 91       	pop	r27
    1b06:	af 91       	pop	r26
    1b08:	9f 91       	pop	r25
    1b0a:	8f 91       	pop	r24
    1b0c:	7f 91       	pop	r23
    1b0e:	6f 91       	pop	r22
    1b10:	5f 91       	pop	r21
    1b12:	4f 91       	pop	r20
    1b14:	3f 91       	pop	r19
    1b16:	2f 91       	pop	r18
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	0f 90       	pop	r0
    1b1e:	1f 90       	pop	r1
    1b20:	18 95       	reti

00001b22 <enqueueByDeadline>:

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	7b 01       	movw	r14, r22
    Msg prev = NULL, q = *queue;
    1b30:	db 01       	movw	r26, r22
    1b32:	ed 91       	ld	r30, X+
    1b34:	fc 91       	ld	r31, X
    while (q && (q->deadline <= p->deadline)) {
    1b36:	30 97       	sbiw	r30, 0x00	; 0
    1b38:	49 f1       	breq	.+82     	; 0x1b8c <enqueueByDeadline+0x6a>
    1b3a:	ec 01       	movw	r28, r24
    1b3c:	0e 81       	ldd	r16, Y+6	; 0x06
    1b3e:	1f 81       	ldd	r17, Y+7	; 0x07
    1b40:	28 85       	ldd	r18, Y+8	; 0x08
    1b42:	39 85       	ldd	r19, Y+9	; 0x09
    1b44:	46 81       	ldd	r20, Z+6	; 0x06
    1b46:	57 81       	ldd	r21, Z+7	; 0x07
    1b48:	60 85       	ldd	r22, Z+8	; 0x08
    1b4a:	71 85       	ldd	r23, Z+9	; 0x09
    1b4c:	04 17       	cp	r16, r20
    1b4e:	15 07       	cpc	r17, r21
    1b50:	26 07       	cpc	r18, r22
    1b52:	37 07       	cpc	r19, r23
    1b54:	dc f0       	brlt	.+54     	; 0x1b8c <enqueueByDeadline+0x6a>
        prev = q;
        q = q->next;
    1b56:	c0 81       	ld	r28, Z
    1b58:	d1 81       	ldd	r29, Z+1	; 0x01
IRQ(IRQ_LCD,             LCD_vect);

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
    1b5a:	20 97       	sbiw	r28, 0x00	; 0
    1b5c:	59 f0       	breq	.+22     	; 0x1b74 <enqueueByDeadline+0x52>
    1b5e:	4e 81       	ldd	r20, Y+6	; 0x06
    1b60:	5f 81       	ldd	r21, Y+7	; 0x07
    1b62:	68 85       	ldd	r22, Y+8	; 0x08
    1b64:	79 85       	ldd	r23, Y+9	; 0x09
    1b66:	04 17       	cp	r16, r20
    1b68:	15 07       	cpc	r17, r21
    1b6a:	26 07       	cpc	r18, r22
    1b6c:	37 07       	cpc	r19, r23
    1b6e:	14 f0       	brlt	.+4      	; 0x1b74 <enqueueByDeadline+0x52>
        prev = q;
        q = q->next;
    1b70:	fe 01       	movw	r30, r28
    1b72:	f1 cf       	rjmp	.-30     	; 0x1b56 <enqueueByDeadline+0x34>
    }
    p->next = q;
    1b74:	dc 01       	movw	r26, r24
    1b76:	cd 93       	st	X+, r28
    1b78:	dc 93       	st	X, r29
    if (prev == NULL)
    1b7a:	30 97       	sbiw	r30, 0x00	; 0
    1b7c:	21 f4       	brne	.+8      	; 0x1b86 <enqueueByDeadline+0x64>
        *queue = p;
    1b7e:	e7 01       	movw	r28, r14
    1b80:	99 83       	std	Y+1, r25	; 0x01
    1b82:	88 83       	st	Y, r24
    1b84:	07 c0       	rjmp	.+14     	; 0x1b94 <enqueueByDeadline+0x72>
    else
        prev->next = p;
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
    1b8a:	04 c0       	rjmp	.+8      	; 0x1b94 <enqueueByDeadline+0x72>
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
    }
    p->next = q;
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	ed 93       	st	X+, r30
    1b90:	fc 93       	st	X, r31
    1b92:	f5 cf       	rjmp	.-22     	; 0x1b7e <enqueueByDeadline+0x5c>
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
}
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	08 95       	ret

00001ba2 <enqueueByBaseline>:

void enqueueByBaseline(Msg p, Msg *queue) {
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	7b 01       	movw	r14, r22
    Msg prev = NULL, q = *queue;
    1bb0:	db 01       	movw	r26, r22
    1bb2:	ed 91       	ld	r30, X+
    1bb4:	fc 91       	ld	r31, X
    while (q && (q->baseline <= p->baseline )) {
    1bb6:	30 97       	sbiw	r30, 0x00	; 0
    1bb8:	49 f1       	breq	.+82     	; 0x1c0c <enqueueByBaseline+0x6a>
    1bba:	ec 01       	movw	r28, r24
    1bbc:	0a 81       	ldd	r16, Y+2	; 0x02
    1bbe:	1b 81       	ldd	r17, Y+3	; 0x03
    1bc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc4:	42 81       	ldd	r20, Z+2	; 0x02
    1bc6:	53 81       	ldd	r21, Z+3	; 0x03
    1bc8:	64 81       	ldd	r22, Z+4	; 0x04
    1bca:	75 81       	ldd	r23, Z+5	; 0x05
    1bcc:	04 17       	cp	r16, r20
    1bce:	15 07       	cpc	r17, r21
    1bd0:	26 07       	cpc	r18, r22
    1bd2:	37 07       	cpc	r19, r23
    1bd4:	dc f0       	brlt	.+54     	; 0x1c0c <enqueueByBaseline+0x6a>
        prev = q;
        q = q->next;
    1bd6:	c0 81       	ld	r28, Z
    1bd8:	d1 81       	ldd	r29, Z+1	; 0x01
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
    1bda:	20 97       	sbiw	r28, 0x00	; 0
    1bdc:	59 f0       	breq	.+22     	; 0x1bf4 <enqueueByBaseline+0x52>
    1bde:	4a 81       	ldd	r20, Y+2	; 0x02
    1be0:	5b 81       	ldd	r21, Y+3	; 0x03
    1be2:	6c 81       	ldd	r22, Y+4	; 0x04
    1be4:	7d 81       	ldd	r23, Y+5	; 0x05
    1be6:	04 17       	cp	r16, r20
    1be8:	15 07       	cpc	r17, r21
    1bea:	26 07       	cpc	r18, r22
    1bec:	37 07       	cpc	r19, r23
    1bee:	14 f0       	brlt	.+4      	; 0x1bf4 <enqueueByBaseline+0x52>
        prev = q;
        q = q->next;
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	f1 cf       	rjmp	.-30     	; 0x1bd6 <enqueueByBaseline+0x34>
    }
    p->next = q;
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cd 93       	st	X+, r28
    1bf8:	dc 93       	st	X, r29
    if (prev == NULL)
    1bfa:	30 97       	sbiw	r30, 0x00	; 0
    1bfc:	21 f4       	brne	.+8      	; 0x1c06 <enqueueByBaseline+0x64>
        *queue = p;
    1bfe:	e7 01       	movw	r28, r14
    1c00:	99 83       	std	Y+1, r25	; 0x01
    1c02:	88 83       	st	Y, r24
    1c04:	07 c0       	rjmp	.+14     	; 0x1c14 <enqueueByBaseline+0x72>
    else
        prev->next = p;
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	80 83       	st	Z, r24
    1c0a:	04 c0       	rjmp	.+8      	; 0x1c14 <enqueueByBaseline+0x72>
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
    }
    p->next = q;
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	ed 93       	st	X+, r30
    1c10:	fc 93       	st	X, r31
    1c12:	f5 cf       	rjmp	.-22     	; 0x1bfe <enqueueByBaseline+0x5c>
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
}
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	ff 90       	pop	r15
    1c1e:	ef 90       	pop	r14
    1c20:	08 95       	ret

00001c22 <dequeue>:

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    1c22:	dc 01       	movw	r26, r24
    1c24:	ed 91       	ld	r30, X+
    1c26:	fc 91       	ld	r31, X
    1c28:	11 97       	sbiw	r26, 0x01	; 1
    if (m)
    1c2a:	30 97       	sbiw	r30, 0x00	; 0
    1c2c:	59 f4       	brne	.+22     	; 0x1c44 <dequeue+0x22>
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	80 93 ec 00 	sts	0x00EC, r24
    1c34:	80 93 ed 00 	sts	0x00ED, r24
    1c38:	80 93 ee 00 	sts	0x00EE, r24
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	83 bf       	out	0x33, r24	; 51
    1c40:	88 95       	sleep
    1c42:	fd cf       	rjmp	.-6      	; 0x1c3e <dequeue+0x1c>
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    1c44:	20 81       	ld	r18, Z
    1c46:	31 81       	ldd	r19, Z+1	; 0x01
    1c48:	2d 93       	st	X+, r18
    1c4a:	3c 93       	st	X, r19
    else
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}
    1c4c:	cf 01       	movw	r24, r30
    1c4e:	08 95       	ret

00001c50 <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
    1c50:	1f 92       	push	r1
    1c52:	0f 92       	push	r0
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	0f 92       	push	r0
    1c58:	11 24       	eor	r1, r1
    1c5a:	2f 93       	push	r18
    1c5c:	3f 93       	push	r19
    1c5e:	4f 93       	push	r20
    1c60:	5f 93       	push	r21
    1c62:	8f 93       	push	r24
    1c64:	9f 93       	push	r25
    1c66:	af 93       	push	r26
    1c68:	bf 93       	push	r27
    1c6a:	ef 93       	push	r30
    1c6c:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
    1c6e:	20 91 1c 01 	lds	r18, 0x011C
    1c72:	30 91 1d 01 	lds	r19, 0x011D
    1c76:	2f 5f       	subi	r18, 0xFF	; 255
    1c78:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7a:	30 93 1d 01 	sts	0x011D, r19
    1c7e:	20 93 1c 01 	sts	0x011C, r18
    TIMERSET(timerQ);
    1c82:	e0 91 22 01 	lds	r30, 0x0122
    1c86:	f0 91 23 01 	lds	r31, 0x0123
    1c8a:	30 97       	sbiw	r30, 0x00	; 0
    1c8c:	01 f1       	breq	.+64     	; 0x1cce <__vector_9+0x7e>
    1c8e:	82 81       	ldd	r24, Z+2	; 0x02
    1c90:	93 81       	ldd	r25, Z+3	; 0x03
    1c92:	a4 81       	ldd	r26, Z+4	; 0x04
    1c94:	b5 81       	ldd	r27, Z+5	; 0x05
    1c96:	2a 17       	cp	r18, r26
    1c98:	3b 07       	cpc	r19, r27
    1c9a:	c9 f4       	brne	.+50     	; 0x1cce <__vector_9+0x7e>
    1c9c:	20 91 84 00 	lds	r18, 0x0084
    1ca0:	30 91 85 00 	lds	r19, 0x0085
    1ca4:	ac 01       	movw	r20, r24
    1ca6:	42 1b       	sub	r20, r18
    1ca8:	53 0b       	sbc	r21, r19
    1caa:	41 30       	cpi	r20, 0x01	; 1
    1cac:	51 05       	cpc	r21, r1
    1cae:	29 f4       	brne	.+10     	; 0x1cba <__vector_9+0x6a>
    1cb0:	80 91 84 00 	lds	r24, 0x0084
    1cb4:	90 91 85 00 	lds	r25, 0x0085
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	90 93 89 00 	sts	0x0089, r25
    1cbe:	80 93 88 00 	sts	0x0088, r24
    1cc2:	ef e6       	ldi	r30, 0x6F	; 111
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	82 60       	ori	r24, 0x02	; 2
    1cca:	80 83       	st	Z, r24
    1ccc:	05 c0       	rjmp	.+10     	; 0x1cd8 <__vector_9+0x88>
    1cce:	ef e6       	ldi	r30, 0x6F	; 111
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8d 7f       	andi	r24, 0xFD	; 253
    1cd6:	80 83       	st	Z, r24
}
    1cd8:	ff 91       	pop	r31
    1cda:	ef 91       	pop	r30
    1cdc:	bf 91       	pop	r27
    1cde:	af 91       	pop	r26
    1ce0:	9f 91       	pop	r25
    1ce2:	8f 91       	pop	r24
    1ce4:	5f 91       	pop	r21
    1ce6:	4f 91       	pop	r20
    1ce8:	3f 91       	pop	r19
    1cea:	2f 91       	pop	r18
    1cec:	0f 90       	pop	r0
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	0f 90       	pop	r0
    1cf2:	1f 90       	pop	r1
    1cf4:	18 95       	reti

00001cf6 <__vector_7>:

TIMER_COMPARE_INTERRUPT {
    1cf6:	1f 92       	push	r1
    1cf8:	0f 92       	push	r0
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	0f 92       	push	r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	cf 92       	push	r12
    1d02:	df 92       	push	r13
    1d04:	ef 92       	push	r14
    1d06:	ff 92       	push	r15
    1d08:	2f 93       	push	r18
    1d0a:	3f 93       	push	r19
    1d0c:	4f 93       	push	r20
    1d0e:	5f 93       	push	r21
    1d10:	6f 93       	push	r22
    1d12:	7f 93       	push	r23
    1d14:	8f 93       	push	r24
    1d16:	9f 93       	push	r25
    1d18:	af 93       	push	r26
    1d1a:	bf 93       	push	r27
    1d1c:	ef 93       	push	r30
    1d1e:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    1d20:	c0 90 1c 01 	lds	r12, 0x011C
    1d24:	d0 90 1d 01 	lds	r13, 0x011D
    1d28:	80 91 84 00 	lds	r24, 0x0084
    1d2c:	90 91 85 00 	lds	r25, 0x0085
    1d30:	b0 99       	sbic	0x16, 0	; 22
    1d32:	0e c0       	rjmp	.+28     	; 0x1d50 <__vector_7+0x5a>
    1d34:	ee 24       	eor	r14, r14
    1d36:	d7 fc       	sbrc	r13, 7
    1d38:	e0 94       	com	r14
    1d3a:	fe 2c       	mov	r15, r14
    1d3c:	76 01       	movw	r14, r12
    1d3e:	dd 24       	eor	r13, r13
    1d40:	cc 24       	eor	r12, r12
    1d42:	a0 e0       	ldi	r26, 0x00	; 0
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	c8 2a       	or	r12, r24
    1d48:	d9 2a       	or	r13, r25
    1d4a:	ea 2a       	or	r14, r26
    1d4c:	fb 2a       	or	r15, r27
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <__vector_7+0x82>
    1d50:	80 91 84 00 	lds	r24, 0x0084
    1d54:	90 91 85 00 	lds	r25, 0x0085
    1d58:	2f ef       	ldi	r18, 0xFF	; 255
    1d5a:	c2 1a       	sub	r12, r18
    1d5c:	d2 0a       	sbc	r13, r18
    1d5e:	ee 24       	eor	r14, r14
    1d60:	d7 fc       	sbrc	r13, 7
    1d62:	e0 94       	com	r14
    1d64:	fe 2c       	mov	r15, r14
    1d66:	76 01       	movw	r14, r12
    1d68:	dd 24       	eor	r13, r13
    1d6a:	cc 24       	eor	r12, r12
    1d6c:	a0 e0       	ldi	r26, 0x00	; 0
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	c8 2a       	or	r12, r24
    1d72:	d9 2a       	or	r13, r25
    1d74:	ea 2a       	or	r14, r26
    1d76:	fb 2a       	or	r15, r27
    while (timerQ && (timerQ->baseline - now <= 0))
    1d78:	e0 91 22 01 	lds	r30, 0x0122
    1d7c:	f0 91 23 01 	lds	r31, 0x0123
    1d80:	30 97       	sbiw	r30, 0x00	; 0
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <__vector_7+0x90>
    1d84:	42 c0       	rjmp	.+132    	; 0x1e0a <__vector_7+0x114>
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	a4 81       	ldd	r26, Z+4	; 0x04
    1d8c:	b5 81       	ldd	r27, Z+5	; 0x05
    1d8e:	8c 19       	sub	r24, r12
    1d90:	9d 09       	sbc	r25, r13
    1d92:	ae 09       	sbc	r26, r14
    1d94:	bf 09       	sbc	r27, r15
    1d96:	18 16       	cp	r1, r24
    1d98:	19 06       	cpc	r1, r25
    1d9a:	1a 06       	cpc	r1, r26
    1d9c:	1b 06       	cpc	r1, r27
    1d9e:	ec f1       	brlt	.+122    	; 0x1e1a <__vector_7+0x124>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    1da0:	82 e2       	ldi	r24, 0x22	; 34
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <dequeue>
    1da8:	64 e2       	ldi	r22, 0x24	; 36
    1daa:	71 e0       	ldi	r23, 0x01	; 1
    1dac:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <enqueueByDeadline>

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
    1db0:	e0 91 22 01 	lds	r30, 0x0122
    1db4:	f0 91 23 01 	lds	r31, 0x0123
    1db8:	30 97       	sbiw	r30, 0x00	; 0
    1dba:	39 f1       	breq	.+78     	; 0x1e0a <__vector_7+0x114>
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	a4 81       	ldd	r26, Z+4	; 0x04
    1dc2:	b5 81       	ldd	r27, Z+5	; 0x05
    1dc4:	8c 19       	sub	r24, r12
    1dc6:	9d 09       	sbc	r25, r13
    1dc8:	ae 09       	sbc	r26, r14
    1dca:	bf 09       	sbc	r27, r15
    1dcc:	18 16       	cp	r1, r24
    1dce:	19 06       	cpc	r1, r25
    1dd0:	1a 06       	cpc	r1, r26
    1dd2:	1b 06       	cpc	r1, r27
    1dd4:	2c f7       	brge	.-54     	; 0x1da0 <__vector_7+0xaa>
    1dd6:	21 c0       	rjmp	.+66     	; 0x1e1a <__vector_7+0x124>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    1dd8:	20 91 84 00 	lds	r18, 0x0084
    1ddc:	30 91 85 00 	lds	r19, 0x0085
    1de0:	ac 01       	movw	r20, r24
    1de2:	42 1b       	sub	r20, r18
    1de4:	53 0b       	sbc	r21, r19
    1de6:	41 30       	cpi	r20, 0x01	; 1
    1de8:	51 05       	cpc	r21, r1
    1dea:	29 f4       	brne	.+10     	; 0x1df6 <__vector_7+0x100>
    1dec:	80 91 84 00 	lds	r24, 0x0084
    1df0:	90 91 85 00 	lds	r25, 0x0085
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	90 93 89 00 	sts	0x0089, r25
    1dfa:	80 93 88 00 	sts	0x0088, r24
    1dfe:	ef e6       	ldi	r30, 0x6F	; 111
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	82 60       	ori	r24, 0x02	; 2
    1e06:	80 83       	st	Z, r24
    1e08:	05 c0       	rjmp	.+10     	; 0x1e14 <__vector_7+0x11e>
    1e0a:	ef e6       	ldi	r30, 0x6F	; 111
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	8d 7f       	andi	r24, 0xFD	; 253
    1e12:	80 83       	st	Z, r24
    schedule();
    1e14:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    1e18:	0c c0       	rjmp	.+24     	; 0x1e32 <__vector_7+0x13c>
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	a4 81       	ldd	r26, Z+4	; 0x04
    1e20:	b5 81       	ldd	r27, Z+5	; 0x05
    1e22:	20 91 1c 01 	lds	r18, 0x011C
    1e26:	30 91 1d 01 	lds	r19, 0x011D
    1e2a:	2a 17       	cp	r18, r26
    1e2c:	3b 07       	cpc	r19, r27
    1e2e:	69 f7       	brne	.-38     	; 0x1e0a <__vector_7+0x114>
    1e30:	d3 cf       	rjmp	.-90     	; 0x1dd8 <__vector_7+0xe2>
    schedule();
}
    1e32:	ff 91       	pop	r31
    1e34:	ef 91       	pop	r30
    1e36:	bf 91       	pop	r27
    1e38:	af 91       	pop	r26
    1e3a:	9f 91       	pop	r25
    1e3c:	8f 91       	pop	r24
    1e3e:	7f 91       	pop	r23
    1e40:	6f 91       	pop	r22
    1e42:	5f 91       	pop	r21
    1e44:	4f 91       	pop	r20
    1e46:	3f 91       	pop	r19
    1e48:	2f 91       	pop	r18
    1e4a:	ff 90       	pop	r15
    1e4c:	ef 90       	pop	r14
    1e4e:	df 90       	pop	r13
    1e50:	cf 90       	pop	r12
    1e52:	0f 90       	pop	r0
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	0f 90       	pop	r0
    1e58:	1f 90       	pop	r1
    1e5a:	18 95       	reti

00001e5c <async>:
        dispatch(activeStack);
    }
}

/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    1e5c:	3f 92       	push	r3
    1e5e:	4f 92       	push	r4
    1e60:	5f 92       	push	r5
    1e62:	6f 92       	push	r6
    1e64:	7f 92       	push	r7
    1e66:	8f 92       	push	r8
    1e68:	9f 92       	push	r9
    1e6a:	af 92       	push	r10
    1e6c:	bf 92       	push	r11
    1e6e:	cf 92       	push	r12
    1e70:	df 92       	push	r13
    1e72:	ef 92       	push	r14
    1e74:	ff 92       	push	r15
    1e76:	0f 93       	push	r16
    1e78:	1f 93       	push	r17
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	2b 01       	movw	r4, r22
    1e80:	3c 01       	movw	r6, r24
    1e82:	49 01       	movw	r8, r18
    1e84:	5a 01       	movw	r10, r20
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    1e86:	8f b7       	in	r24, 0x3f	; 63
    1e88:	80 78       	andi	r24, 0x80	; 128
    1e8a:	38 2e       	mov	r3, r24
    1e8c:	f8 94       	cli
    m = dequeue(&msgPool);
    1e8e:	86 e0       	ldi	r24, 0x06	; 6
    1e90:	91 e0       	ldi	r25, 0x01	; 1
    1e92:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <dequeue>
    1e96:	ec 01       	movw	r28, r24
    m->to = to; 
    1e98:	1b 87       	std	Y+11, r17	; 0x0b
    1e9a:	0a 87       	std	Y+10, r16	; 0x0a
    m->method = meth; 
    1e9c:	fd 86       	std	Y+13, r15	; 0x0d
    1e9e:	ec 86       	std	Y+12, r14	; 0x0c
    m->arg = arg;
    1ea0:	df 86       	std	Y+15, r13	; 0x0f
    1ea2:	ce 86       	std	Y+14, r12	; 0x0e
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    1ea4:	33 20       	and	r3, r3
    1ea6:	61 f0       	breq	.+24     	; 0x1ec0 <async+0x64>
    1ea8:	e0 91 00 01 	lds	r30, 0x0100
    1eac:	f0 91 01 01 	lds	r31, 0x0101
    1eb0:	02 80       	ldd	r0, Z+2	; 0x02
    1eb2:	f3 81       	ldd	r31, Z+3	; 0x03
    1eb4:	e0 2d       	mov	r30, r0
    1eb6:	82 81       	ldd	r24, Z+2	; 0x02
    1eb8:	93 81       	ldd	r25, Z+3	; 0x03
    1eba:	a4 81       	ldd	r26, Z+4	; 0x04
    1ebc:	b5 81       	ldd	r27, Z+5	; 0x05
    1ebe:	08 c0       	rjmp	.+16     	; 0x1ed0 <async+0x74>
    1ec0:	80 91 1e 01 	lds	r24, 0x011E
    1ec4:	90 91 1f 01 	lds	r25, 0x011F
    1ec8:	a0 91 20 01 	lds	r26, 0x0120
    1ecc:	b0 91 21 01 	lds	r27, 0x0121
    1ed0:	48 0e       	add	r4, r24
    1ed2:	59 1e       	adc	r5, r25
    1ed4:	6a 1e       	adc	r6, r26
    1ed6:	7b 1e       	adc	r7, r27
    1ed8:	4a 82       	std	Y+2, r4	; 0x02
    1eda:	5b 82       	std	Y+3, r5	; 0x03
    1edc:	6c 82       	std	Y+4, r6	; 0x04
    1ede:	7d 82       	std	Y+5, r7	; 0x05
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    1ee0:	18 14       	cp	r1, r8
    1ee2:	19 04       	cpc	r1, r9
    1ee4:	1a 04       	cpc	r1, r10
    1ee6:	1b 04       	cpc	r1, r11
    1ee8:	44 f0       	brlt	.+16     	; 0x1efa <async+0x9e>
    1eea:	0f 2e       	mov	r0, r31
    1eec:	88 24       	eor	r8, r8
    1eee:	8a 94       	dec	r8
    1ef0:	98 2c       	mov	r9, r8
    1ef2:	a8 2c       	mov	r10, r8
    1ef4:	ff e7       	ldi	r31, 0x7F	; 127
    1ef6:	bf 2e       	mov	r11, r31
    1ef8:	f0 2d       	mov	r31, r0
    1efa:	84 0c       	add	r8, r4
    1efc:	95 1c       	adc	r9, r5
    1efe:	a6 1c       	adc	r10, r6
    1f00:	b7 1c       	adc	r11, r7
    1f02:	8e 82       	std	Y+6, r8	; 0x06
    1f04:	9f 82       	std	Y+7, r9	; 0x07
    1f06:	a8 86       	std	Y+8, r10	; 0x08
    1f08:	b9 86       	std	Y+9, r11	; 0x09
    
    TIMERGET(now);
    1f0a:	80 91 1c 01 	lds	r24, 0x011C
    1f0e:	90 91 1d 01 	lds	r25, 0x011D
    1f12:	40 91 84 00 	lds	r20, 0x0084
    1f16:	50 91 85 00 	lds	r21, 0x0085
    1f1a:	b0 99       	sbic	0x16, 0	; 22
    1f1c:	0e c0       	rjmp	.+28     	; 0x1f3a <async+0xde>
    1f1e:	aa 27       	eor	r26, r26
    1f20:	97 fd       	sbrc	r25, 7
    1f22:	a0 95       	com	r26
    1f24:	ba 2f       	mov	r27, r26
    1f26:	dc 01       	movw	r26, r24
    1f28:	99 27       	eor	r25, r25
    1f2a:	88 27       	eor	r24, r24
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	84 2b       	or	r24, r20
    1f32:	95 2b       	or	r25, r21
    1f34:	a6 2b       	or	r26, r22
    1f36:	b7 2b       	or	r27, r23
    1f38:	12 c0       	rjmp	.+36     	; 0x1f5e <async+0x102>
    1f3a:	40 91 84 00 	lds	r20, 0x0084
    1f3e:	50 91 85 00 	lds	r21, 0x0085
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	aa 27       	eor	r26, r26
    1f46:	97 fd       	sbrc	r25, 7
    1f48:	a0 95       	com	r26
    1f4a:	ba 2f       	mov	r27, r26
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	99 27       	eor	r25, r25
    1f50:	88 27       	eor	r24, r24
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	84 2b       	or	r24, r20
    1f58:	95 2b       	or	r25, r21
    1f5a:	a6 2b       	or	r26, r22
    1f5c:	b7 2b       	or	r27, r23
    if (m->baseline - now > 0) {        // baseline has not yet passed
    1f5e:	48 1a       	sub	r4, r24
    1f60:	59 0a       	sbc	r5, r25
    1f62:	6a 0a       	sbc	r6, r26
    1f64:	7b 0a       	sbc	r7, r27
    1f66:	14 14       	cp	r1, r4
    1f68:	15 04       	cpc	r1, r5
    1f6a:	16 04       	cpc	r1, r6
    1f6c:	17 04       	cpc	r1, r7
    1f6e:	ac f5       	brge	.+106    	; 0x1fda <async+0x17e>
        enqueueByBaseline(m, &timerQ);
    1f70:	62 e2       	ldi	r22, 0x22	; 34
    1f72:	71 e0       	ldi	r23, 0x01	; 1
    1f74:	ce 01       	movw	r24, r28
    1f76:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <enqueueByBaseline>
        TIMERSET(timerQ);
    1f7a:	e0 91 22 01 	lds	r30, 0x0122
    1f7e:	f0 91 23 01 	lds	r31, 0x0123
    1f82:	30 97       	sbiw	r30, 0x00	; 0
    1f84:	21 f1       	breq	.+72     	; 0x1fce <async+0x172>
    1f86:	82 81       	ldd	r24, Z+2	; 0x02
    1f88:	93 81       	ldd	r25, Z+3	; 0x03
    1f8a:	a4 81       	ldd	r26, Z+4	; 0x04
    1f8c:	b5 81       	ldd	r27, Z+5	; 0x05
    1f8e:	20 91 1c 01 	lds	r18, 0x011C
    1f92:	30 91 1d 01 	lds	r19, 0x011D
    1f96:	2a 17       	cp	r18, r26
    1f98:	3b 07       	cpc	r19, r27
    1f9a:	c9 f4       	brne	.+50     	; 0x1fce <async+0x172>
    1f9c:	20 91 84 00 	lds	r18, 0x0084
    1fa0:	30 91 85 00 	lds	r19, 0x0085
    1fa4:	ac 01       	movw	r20, r24
    1fa6:	42 1b       	sub	r20, r18
    1fa8:	53 0b       	sbc	r21, r19
    1faa:	41 30       	cpi	r20, 0x01	; 1
    1fac:	51 05       	cpc	r21, r1
    1fae:	29 f4       	brne	.+10     	; 0x1fba <async+0x15e>
    1fb0:	80 91 84 00 	lds	r24, 0x0084
    1fb4:	90 91 85 00 	lds	r25, 0x0085
    1fb8:	01 96       	adiw	r24, 0x01	; 1
    1fba:	90 93 89 00 	sts	0x0089, r25
    1fbe:	80 93 88 00 	sts	0x0088, r24
    1fc2:	ef e6       	ldi	r30, 0x6F	; 111
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	82 60       	ori	r24, 0x02	; 2
    1fca:	80 83       	st	Z, r24
    1fcc:	41 c0       	rjmp	.+130    	; 0x2050 <async+0x1f4>
    1fce:	ef e6       	ldi	r30, 0x6F	; 111
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8d 7f       	andi	r24, 0xFD	; 253
    1fd6:	80 83       	st	Z, r24
    1fd8:	3b c0       	rjmp	.+118    	; 0x2050 <async+0x1f4>
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
    1fda:	64 e2       	ldi	r22, 0x24	; 36
    1fdc:	71 e0       	ldi	r23, 0x01	; 1
    1fde:	ce 01       	movw	r24, r28
    1fe0:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <enqueueByDeadline>
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
    1fe4:	33 20       	and	r3, r3
    1fe6:	b9 f1       	breq	.+110    	; 0x2056 <async+0x1fa>
    1fe8:	80 91 04 01 	lds	r24, 0x0104
    1fec:	90 91 05 01 	lds	r25, 0x0105
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	81 f1       	breq	.+96     	; 0x2054 <async+0x1f8>
    1ff4:	e0 91 02 01 	lds	r30, 0x0102
    1ff8:	f0 91 03 01 	lds	r31, 0x0103
    1ffc:	20 91 24 01 	lds	r18, 0x0124
    2000:	30 91 25 01 	lds	r19, 0x0125
    2004:	02 81       	ldd	r16, Z+2	; 0x02
    2006:	13 81       	ldd	r17, Z+3	; 0x03
    2008:	d9 01       	movw	r26, r18
    200a:	16 96       	adiw	r26, 0x06	; 6
    200c:	4d 91       	ld	r20, X+
    200e:	5d 91       	ld	r21, X+
    2010:	6d 91       	ld	r22, X+
    2012:	7c 91       	ld	r23, X
    2014:	19 97       	sbiw	r26, 0x09	; 9
    2016:	d8 01       	movw	r26, r16
    2018:	16 96       	adiw	r26, 0x06	; 6
    201a:	0d 91       	ld	r16, X+
    201c:	1d 91       	ld	r17, X+
    201e:	2d 91       	ld	r18, X+
    2020:	3c 91       	ld	r19, X
    2022:	19 97       	sbiw	r26, 0x09	; 9
    2024:	40 1b       	sub	r20, r16
    2026:	51 0b       	sbc	r21, r17
    2028:	62 0b       	sbc	r22, r18
    202a:	73 0b       	sbc	r23, r19
    202c:	9a f4       	brpl	.+38     	; 0x2054 <async+0x1f8>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    202e:	dc 01       	movw	r26, r24
    2030:	2d 91       	ld	r18, X+
    2032:	3c 91       	ld	r19, X
    2034:	11 97       	sbiw	r26, 0x01	; 1
    2036:	30 93 05 01 	sts	0x0105, r19
    203a:	20 93 04 01 	sts	0x0104, r18
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    203e:	ed 93       	st	X+, r30
    2040:	fc 93       	st	X, r31
    *stack = t;
    2042:	90 93 03 01 	sts	0x0103, r25
    2046:	80 93 02 01 	sts	0x0102, r24
        TIMERSET(timerQ);
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
            push(pop(&threadPool), &activeStack);
            dispatch(activeStack);
    204a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <dispatch>
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <async+0x1f8>
        }
    }
    
    ENABLE(status);
    2050:	33 20       	and	r3, r3
    2052:	09 f0       	breq	.+2      	; 0x2056 <async+0x1fa>
    2054:	78 94       	sei
    return m;
}
    2056:	ce 01       	movw	r24, r28
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	ff 90       	pop	r15
    2062:	ef 90       	pop	r14
    2064:	df 90       	pop	r13
    2066:	cf 90       	pop	r12
    2068:	bf 90       	pop	r11
    206a:	af 90       	pop	r10
    206c:	9f 90       	pop	r9
    206e:	8f 90       	pop	r8
    2070:	7f 90       	pop	r7
    2072:	6f 90       	pop	r6
    2074:	5f 90       	pop	r5
    2076:	4f 90       	pop	r4
    2078:	3f 90       	pop	r3
    207a:	08 95       	ret

0000207c <sync>:

int sync(Object *to, Method meth, int arg) {
    207c:	bf 92       	push	r11
    207e:	cf 92       	push	r12
    2080:	df 92       	push	r13
    2082:	ef 92       	push	r14
    2084:	ff 92       	push	r15
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	8c 01       	movw	r16, r24
    2090:	7b 01       	movw	r14, r22
    2092:	6a 01       	movw	r12, r20
    Thread t;
    int result;
    char status, status_ignore;
    
    DISABLE(status);
    2094:	8f b7       	in	r24, 0x3f	; 63
    2096:	80 78       	andi	r24, 0x80	; 128
    2098:	b8 2e       	mov	r11, r24
    209a:	f8 94       	cli
    t = to->ownedBy;
    209c:	f8 01       	movw	r30, r16
    209e:	c0 81       	ld	r28, Z
    20a0:	d1 81       	ldd	r29, Z+1	; 0x01
    if (t) {                            // to is already locked
    20a2:	20 97       	sbiw	r28, 0x00	; 0
    20a4:	51 f1       	breq	.+84     	; 0x20fa <sync+0x7e>
        while (t->waitsFor) 
    20a6:	ac 81       	ldd	r26, Y+4	; 0x04
    20a8:	bd 81       	ldd	r27, Y+5	; 0x05
    20aa:	10 97       	sbiw	r26, 0x00	; 0
    20ac:	31 f0       	breq	.+12     	; 0x20ba <sync+0x3e>
            t = t->waitsFor->ownedBy;
    20ae:	cd 91       	ld	r28, X+
    20b0:	dc 91       	ld	r29, X
    char status, status_ignore;
    
    DISABLE(status);
    t = to->ownedBy;
    if (t) {                            // to is already locked
        while (t->waitsFor) 
    20b2:	ac 81       	ldd	r26, Y+4	; 0x04
    20b4:	bd 81       	ldd	r27, Y+5	; 0x05
    20b6:	10 97       	sbiw	r26, 0x00	; 0
    20b8:	d1 f7       	brne	.-12     	; 0x20ae <sync+0x32>
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
    20ba:	a0 91 00 01 	lds	r26, 0x0100
    20be:	b0 91 01 01 	lds	r27, 0x0101
    20c2:	ca 17       	cp	r28, r26
    20c4:	db 07       	cpc	r29, r27
    20c6:	21 f0       	breq	.+8      	; 0x20d0 <sync+0x54>
    20c8:	bb 20       	and	r11, r11
    20ca:	09 f4       	brne	.+2      	; 0x20ce <sync+0x52>
    20cc:	42 c0       	rjmp	.+132    	; 0x2152 <sync+0xd6>
    20ce:	07 c0       	rjmp	.+14     	; 0x20de <sync+0x62>
            ENABLE(status);
    20d0:	bb 20       	and	r11, r11
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <sync+0x5a>
    20d4:	41 c0       	rjmp	.+130    	; 0x2158 <sync+0xdc>
    20d6:	78 94       	sei
            return -1;
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	9f ef       	ldi	r25, 0xFF	; 255
    20dc:	5b c0       	rjmp	.+182    	; 0x2194 <sync+0x118>
        }
        if (to->wantedBy)               // must be a lower priority thread
    20de:	f8 01       	movw	r30, r16
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	09 f4       	brne	.+2      	; 0x20ea <sync+0x6e>
    20e8:	3d c0       	rjmp	.+122    	; 0x2164 <sync+0xe8>
            to->wantedBy->waitsFor = NULL;
    20ea:	fc 01       	movw	r30, r24
    20ec:	15 82       	std	Z+5, r1	; 0x05
    20ee:	14 82       	std	Z+4, r1	; 0x04
    20f0:	39 c0       	rjmp	.+114    	; 0x2164 <sync+0xe8>
        to->wantedBy = current;
        current->waitsFor = to;
        dispatch(t);
        if (current->msg == NULL) {     // message was aborted (when called from run)
            ENABLE(status);
    20f2:	78 94       	sei
            return 0;
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	4d c0       	rjmp	.+154    	; 0x2194 <sync+0x118>
        }
    }
    to->ownedBy = current;
    20fa:	80 91 00 01 	lds	r24, 0x0100
    20fe:	90 91 01 01 	lds	r25, 0x0101
    2102:	f8 01       	movw	r30, r16
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
    ENABLE(status && (to->wantedBy != INSTALLED_TAG));
    2108:	bb 20       	and	r11, r11
    210a:	31 f0       	breq	.+12     	; 0x2118 <sync+0x9c>
    210c:	f8 01       	movw	r30, r16
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	09 f0       	breq	.+2      	; 0x2118 <sync+0x9c>
    2116:	78 94       	sei
    result = meth(to, arg);
    2118:	b6 01       	movw	r22, r12
    211a:	c8 01       	movw	r24, r16
    211c:	f7 01       	movw	r30, r14
    211e:	09 95       	icall
    2120:	d8 2f       	mov	r29, r24
    2122:	c9 2f       	mov	r28, r25
    DISABLE(status_ignore);
    2124:	8f b7       	in	r24, 0x3f	; 63
    2126:	f8 94       	cli
    to->ownedBy = NULL; 
    2128:	f8 01       	movw	r30, r16
    212a:	11 82       	std	Z+1, r1	; 0x01
    212c:	10 82       	st	Z, r1
    t = to->wantedBy;
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    if (t && (t != INSTALLED_TAG)) {      // we have run on someone's behalf
    2132:	82 30       	cpi	r24, 0x02	; 2
    2134:	91 05       	cpc	r25, r1
    2136:	38 f0       	brcs	.+14     	; 0x2146 <sync+0xca>
        to->wantedBy = NULL; 
    2138:	13 82       	std	Z+3, r1	; 0x03
    213a:	12 82       	std	Z+2, r1	; 0x02
        t->waitsFor = NULL;
    213c:	fc 01       	movw	r30, r24
    213e:	15 82       	std	Z+5, r1	; 0x05
    2140:	14 82       	std	Z+4, r1	; 0x04
        dispatch(t);
    2142:	0e 94 9d 05 	call	0xb3a	; 0xb3a <dispatch>
    }
    ENABLE(status);
    2146:	bb 20       	and	r11, r11
    2148:	51 f0       	breq	.+20     	; 0x215e <sync+0xe2>
    214a:	78 94       	sei
    return result;
    214c:	8d 2f       	mov	r24, r29
    214e:	9c 2f       	mov	r25, r28
    2150:	21 c0       	rjmp	.+66     	; 0x2194 <sync+0x118>
    if (t) {                            // to is already locked
        while (t->waitsFor) 
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
            ENABLE(status);
            return -1;
    2152:	8f ef       	ldi	r24, 0xFF	; 255
    2154:	9f ef       	ldi	r25, 0xFF	; 255
    2156:	1e c0       	rjmp	.+60     	; 0x2194 <sync+0x118>
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	9f ef       	ldi	r25, 0xFF	; 255
    215c:	1b c0       	rjmp	.+54     	; 0x2194 <sync+0x118>
        to->wantedBy = NULL; 
        t->waitsFor = NULL;
        dispatch(t);
    }
    ENABLE(status);
    return result;
    215e:	8d 2f       	mov	r24, r29
    2160:	9c 2f       	mov	r25, r28
    2162:	18 c0       	rjmp	.+48     	; 0x2194 <sync+0x118>
            ENABLE(status);
            return -1;
        }
        if (to->wantedBy)               // must be a lower priority thread
            to->wantedBy->waitsFor = NULL;
        to->wantedBy = current;
    2164:	f8 01       	movw	r30, r16
    2166:	b3 83       	std	Z+3, r27	; 0x03
    2168:	a2 83       	std	Z+2, r26	; 0x02
        current->waitsFor = to;
    216a:	15 96       	adiw	r26, 0x05	; 5
    216c:	1c 93       	st	X, r17
    216e:	0e 93       	st	-X, r16
    2170:	14 97       	sbiw	r26, 0x04	; 4
        dispatch(t);
    2172:	ce 01       	movw	r24, r28
    2174:	0e 94 9d 05 	call	0xb3a	; 0xb3a <dispatch>
        if (current->msg == NULL) {     // message was aborted (when called from run)
    2178:	e0 91 00 01 	lds	r30, 0x0100
    217c:	f0 91 01 01 	lds	r31, 0x0101
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	89 2b       	or	r24, r25
    2186:	09 f4       	brne	.+2      	; 0x218a <sync+0x10e>
    2188:	b4 cf       	rjmp	.-152    	; 0x20f2 <sync+0x76>
            ENABLE(status);
            return 0;
        }
    }
    to->ownedBy = current;
    218a:	cf 01       	movw	r24, r30
    218c:	f8 01       	movw	r30, r16
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
    2192:	bc cf       	rjmp	.-136    	; 0x210c <sync+0x90>
        t->waitsFor = NULL;
        dispatch(t);
    }
    ENABLE(status);
    return result;
}
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	ff 90       	pop	r15
    219e:	ef 90       	pop	r14
    21a0:	df 90       	pop	r13
    21a2:	cf 90       	pop	r12
    21a4:	bf 90       	pop	r11
    21a6:	08 95       	ret

000021a8 <run>:
    }
}

static void run(void) {
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    21a8:	00 91 00 01 	lds	r16, 0x0100
    21ac:	10 91 01 01 	lds	r17, 0x0101
    21b0:	84 e2       	ldi	r24, 0x24	; 36
    21b2:	91 e0       	ldi	r25, 0x01	; 1
    21b4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <dequeue>
    21b8:	ec 01       	movw	r28, r24
    21ba:	d8 01       	movw	r26, r16
    21bc:	13 96       	adiw	r26, 0x03	; 3
    21be:	9c 93       	st	X, r25
    21c0:	8e 93       	st	-X, r24
    21c2:	12 97       	sbiw	r26, 0x02	; 2
        Msg oldMsg;
        char status = 1;
        
        ENABLE(status);
    21c4:	78 94       	sei
        SYNC(this->to, this->method, this->arg);
    21c6:	4e 85       	ldd	r20, Y+14	; 0x0e
    21c8:	5f 85       	ldd	r21, Y+15	; 0x0f
    21ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    21cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    21ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    21d2:	0e 94 3e 10 	call	0x207c	; 0x207c <sync>
        DISABLE(status);
    21d6:	8f b7       	in	r24, 0x3f	; 63
    21d8:	f8 94       	cli
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}

void insert(Msg m, Msg *queue) {
    m->next = *queue;
    21da:	80 91 06 01 	lds	r24, 0x0106
    21de:	90 91 07 01 	lds	r25, 0x0107
    21e2:	99 83       	std	Y+1, r25	; 0x01
    21e4:	88 83       	st	Y, r24
    *queue = m;
    21e6:	d0 93 07 01 	sts	0x0107, r29
    21ea:	c0 93 06 01 	sts	0x0106, r28
        ENABLE(status);
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
       
        oldMsg = activeStack->next->msg;
    21ee:	e0 91 02 01 	lds	r30, 0x0102
    21f2:	f0 91 03 01 	lds	r31, 0x0103
    21f6:	00 81       	ld	r16, Z
    21f8:	11 81       	ldd	r17, Z+1	; 0x01
    21fa:	e8 01       	movw	r28, r16
    21fc:	2a 81       	ldd	r18, Y+2	; 0x02
    21fe:	3b 81       	ldd	r19, Y+3	; 0x03
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    2200:	a0 91 24 01 	lds	r26, 0x0124
    2204:	b0 91 25 01 	lds	r27, 0x0125
    2208:	10 97       	sbiw	r26, 0x00	; 0
    220a:	c1 f0       	breq	.+48     	; 0x223c <run+0x94>
    220c:	21 15       	cp	r18, r1
    220e:	31 05       	cpc	r19, r1
    2210:	59 f2       	breq	.-106    	; 0x21a8 <run>
    2212:	16 96       	adiw	r26, 0x06	; 6
    2214:	8d 91       	ld	r24, X+
    2216:	9d 91       	ld	r25, X+
    2218:	0d 90       	ld	r0, X+
    221a:	bc 91       	ld	r27, X
    221c:	a0 2d       	mov	r26, r0
    221e:	e9 01       	movw	r28, r18
    2220:	4e 81       	ldd	r20, Y+6	; 0x06
    2222:	5f 81       	ldd	r21, Y+7	; 0x07
    2224:	68 85       	ldd	r22, Y+8	; 0x08
    2226:	79 85       	ldd	r23, Y+9	; 0x09
    2228:	84 1b       	sub	r24, r20
    222a:	95 0b       	sbc	r25, r21
    222c:	a6 0b       	sbc	r26, r22
    222e:	b7 0b       	sbc	r27, r23
    2230:	18 16       	cp	r1, r24
    2232:	19 06       	cpc	r1, r25
    2234:	1a 06       	cpc	r1, r26
    2236:	1b 06       	cpc	r1, r27
    2238:	0c f0       	brlt	.+2      	; 0x223c <run+0x94>
    223a:	b6 cf       	rjmp	.-148    	; 0x21a8 <run>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    223c:	10 93 03 01 	sts	0x0103, r17
    2240:	00 93 02 01 	sts	0x0102, r16
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    2244:	80 91 04 01 	lds	r24, 0x0104
    2248:	90 91 05 01 	lds	r25, 0x0105
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	80 83       	st	Z, r24
    *stack = t;
    2250:	f0 93 05 01 	sts	0x0105, r31
    2254:	e0 93 04 01 	sts	0x0104, r30
       
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
    2258:	a0 91 02 01 	lds	r26, 0x0102
    225c:	b0 91 03 01 	lds	r27, 0x0103
            while (t->waitsFor) 
    2260:	14 96       	adiw	r26, 0x04	; 4
    2262:	ed 91       	ld	r30, X+
    2264:	fc 91       	ld	r31, X
    2266:	15 97       	sbiw	r26, 0x05	; 5
    2268:	30 97       	sbiw	r30, 0x00	; 0
    226a:	41 f0       	breq	.+16     	; 0x227c <run+0xd4>
	            t = t->waitsFor->ownedBy;
    226c:	a0 81       	ld	r26, Z
    226e:	b1 81       	ldd	r27, Z+1	; 0x01
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
    2270:	14 96       	adiw	r26, 0x04	; 4
    2272:	ed 91       	ld	r30, X+
    2274:	fc 91       	ld	r31, X
    2276:	15 97       	sbiw	r26, 0x05	; 5
    2278:	30 97       	sbiw	r30, 0x00	; 0
    227a:	c1 f7       	brne	.-16     	; 0x226c <run+0xc4>
	            t = t->waitsFor->ownedBy;
            dispatch(t);
    227c:	cd 01       	movw	r24, r26
    227e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <dispatch>
    2282:	92 cf       	rjmp	.-220    	; 0x21a8 <run>

00002284 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2284:	42 31       	cpi	r20, 0x12	; 18
    2286:	b8 f4       	brcc	.+46     	; 0x22b6 <install+0x32>
        char status;
        DISABLE(status);
    2288:	af b7       	in	r26, 0x3f	; 63
    228a:	f8 94       	cli
        otable[i] = obj;
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	44 0f       	add	r20, r20
    2290:	55 1f       	adc	r21, r21
    2292:	fa 01       	movw	r30, r20
    2294:	ea 5d       	subi	r30, 0xDA	; 218
    2296:	fe 4f       	sbci	r31, 0xFE	; 254
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
        mtable[i] = m;
    229c:	fa 01       	movw	r30, r20
    229e:	e2 54       	subi	r30, 0x42	; 66
    22a0:	fe 4f       	sbci	r31, 0xFE	; 254
    22a2:	71 83       	std	Z+1, r23	; 0x01
    22a4:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    22a6:	21 e0       	ldi	r18, 0x01	; 1
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	fc 01       	movw	r30, r24
    22ac:	33 83       	std	Z+3, r19	; 0x03
    22ae:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    22b0:	aa 23       	and	r26, r26
    22b2:	0c f4       	brge	.+2      	; 0x22b6 <install+0x32>
    22b4:	78 94       	sei
    22b6:	08 95       	ret

000022b8 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    22b8:	8c 01       	movw	r16, r24
    22ba:	7b 01       	movw	r14, r22
    22bc:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    22be:	8f b7       	in	r24, 0x3f	; 63
    22c0:	f8 94       	cli
    initialize();
    22c2:	0e 94 2c 05 	call	0xa58	; 0xa58 <initialize>
    ENABLE(1);
    22c6:	78 94       	sei
    if (m != NULL)
    22c8:	e1 14       	cp	r14, r1
    22ca:	f1 04       	cpc	r15, r1
    22cc:	41 f0       	breq	.+16     	; 0x22de <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	a9 01       	movw	r20, r18
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	cb 01       	movw	r24, r22
    22da:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <async>
    DISABLE(status);
    22de:	8f b7       	in	r24, 0x3f	; 63
    22e0:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    22e2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <schedule>
    ENABLE(1);
    22e6:	78 94       	sei
    while (1) {
        SLEEP();
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	83 bf       	out	0x33, r24	; 51
    22ec:	88 95       	sleep
    22ee:	fd cf       	rjmp	.-6      	; 0x22ea <tinytimber+0x32>

000022f0 <write>:
#include "LCD.h"
#include "Pulser.h"
#include "avr/io.h"
void write(Writer *self, int arg)
{
	if (arg == 4)//generator 1
    22f0:	64 30       	cpi	r22, 0x04	; 4
    22f2:	71 05       	cpc	r23, r1
    22f4:	51 f4       	brne	.+20     	; 0x230a <write+0x1a>
	{ 
		LCDDR1 = LCDDR1 ^ 0xFFFF; //test for pulsing without oscilloscope
    22f6:	ed ee       	ldi	r30, 0xED	; 237
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	80 95       	com	r24
    22fe:	80 83       	st	Z, r24
		PORTE = PORTE ^ 16; //XOR toggles between xxx1 xxxx and xxx0 xxxx. also need to keep old value from port 6, not overwrite
    2300:	9e b1       	in	r25, 0x0e	; 14
    2302:	80 e1       	ldi	r24, 0x10	; 16
    2304:	89 27       	eor	r24, r25
    2306:	8e b9       	out	0x0e, r24	; 14
    2308:	08 95       	ret
	}
	else if (arg == 6)//generator 2
    230a:	66 30       	cpi	r22, 0x06	; 6
    230c:	71 05       	cpc	r23, r1
    230e:	21 f4       	brne	.+8      	; 0x2318 <write+0x28>
	{ 
		PORTE = PORTE ^ 64;
    2310:	9e b1       	in	r25, 0x0e	; 14
    2312:	80 e4       	ldi	r24, 0x40	; 64
    2314:	89 27       	eor	r24, r25
    2316:	8e b9       	out	0x0e, r24	; 14
    2318:	08 95       	ret

0000231a <__divmodhi4>:
    231a:	97 fb       	bst	r25, 7
    231c:	07 2e       	mov	r0, r23
    231e:	16 f4       	brtc	.+4      	; 0x2324 <__divmodhi4+0xa>
    2320:	00 94       	com	r0
    2322:	07 d0       	rcall	.+14     	; 0x2332 <__divmodhi4_neg1>
    2324:	77 fd       	sbrc	r23, 7
    2326:	09 d0       	rcall	.+18     	; 0x233a <__divmodhi4_neg2>
    2328:	0e 94 a8 11 	call	0x2350	; 0x2350 <__udivmodhi4>
    232c:	07 fc       	sbrc	r0, 7
    232e:	05 d0       	rcall	.+10     	; 0x233a <__divmodhi4_neg2>
    2330:	3e f4       	brtc	.+14     	; 0x2340 <__divmodhi4_exit>

00002332 <__divmodhi4_neg1>:
    2332:	90 95       	com	r25
    2334:	81 95       	neg	r24
    2336:	9f 4f       	sbci	r25, 0xFF	; 255
    2338:	08 95       	ret

0000233a <__divmodhi4_neg2>:
    233a:	70 95       	com	r23
    233c:	61 95       	neg	r22
    233e:	7f 4f       	sbci	r23, 0xFF	; 255

00002340 <__divmodhi4_exit>:
    2340:	08 95       	ret

00002342 <__usmulhisi3>:
    2342:	0e 94 bc 11 	call	0x2378	; 0x2378 <__umulhisi3>

00002346 <__usmulhisi3_tail>:
    2346:	b7 ff       	sbrs	r27, 7
    2348:	08 95       	ret
    234a:	82 1b       	sub	r24, r18
    234c:	93 0b       	sbc	r25, r19
    234e:	08 95       	ret

00002350 <__udivmodhi4>:
    2350:	aa 1b       	sub	r26, r26
    2352:	bb 1b       	sub	r27, r27
    2354:	51 e1       	ldi	r21, 0x11	; 17
    2356:	07 c0       	rjmp	.+14     	; 0x2366 <__udivmodhi4_ep>

00002358 <__udivmodhi4_loop>:
    2358:	aa 1f       	adc	r26, r26
    235a:	bb 1f       	adc	r27, r27
    235c:	a6 17       	cp	r26, r22
    235e:	b7 07       	cpc	r27, r23
    2360:	10 f0       	brcs	.+4      	; 0x2366 <__udivmodhi4_ep>
    2362:	a6 1b       	sub	r26, r22
    2364:	b7 0b       	sbc	r27, r23

00002366 <__udivmodhi4_ep>:
    2366:	88 1f       	adc	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	5a 95       	dec	r21
    236c:	a9 f7       	brne	.-22     	; 0x2358 <__udivmodhi4_loop>
    236e:	80 95       	com	r24
    2370:	90 95       	com	r25
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	08 95       	ret

00002378 <__umulhisi3>:
    2378:	a2 9f       	mul	r26, r18
    237a:	b0 01       	movw	r22, r0
    237c:	b3 9f       	mul	r27, r19
    237e:	c0 01       	movw	r24, r0
    2380:	a3 9f       	mul	r26, r19
    2382:	70 0d       	add	r23, r0
    2384:	81 1d       	adc	r24, r1
    2386:	11 24       	eor	r1, r1
    2388:	91 1d       	adc	r25, r1
    238a:	b2 9f       	mul	r27, r18
    238c:	70 0d       	add	r23, r0
    238e:	81 1d       	adc	r24, r1
    2390:	11 24       	eor	r1, r1
    2392:	91 1d       	adc	r25, r1
    2394:	08 95       	ret

00002396 <setjmp>:
    2396:	dc 01       	movw	r26, r24
    2398:	2d 92       	st	X+, r2
    239a:	3d 92       	st	X+, r3
    239c:	4d 92       	st	X+, r4
    239e:	5d 92       	st	X+, r5
    23a0:	6d 92       	st	X+, r6
    23a2:	7d 92       	st	X+, r7
    23a4:	8d 92       	st	X+, r8
    23a6:	9d 92       	st	X+, r9
    23a8:	ad 92       	st	X+, r10
    23aa:	bd 92       	st	X+, r11
    23ac:	cd 92       	st	X+, r12
    23ae:	dd 92       	st	X+, r13
    23b0:	ed 92       	st	X+, r14
    23b2:	fd 92       	st	X+, r15
    23b4:	0d 93       	st	X+, r16
    23b6:	1d 93       	st	X+, r17
    23b8:	cd 93       	st	X+, r28
    23ba:	dd 93       	st	X+, r29
    23bc:	ff 91       	pop	r31
    23be:	ef 91       	pop	r30
    23c0:	8d b7       	in	r24, 0x3d	; 61
    23c2:	8d 93       	st	X+, r24
    23c4:	8e b7       	in	r24, 0x3e	; 62
    23c6:	8d 93       	st	X+, r24
    23c8:	8f b7       	in	r24, 0x3f	; 63
    23ca:	8d 93       	st	X+, r24
    23cc:	ed 93       	st	X+, r30
    23ce:	fd 93       	st	X+, r31
    23d0:	88 27       	eor	r24, r24
    23d2:	99 27       	eor	r25, r25
    23d4:	09 94       	ijmp

000023d6 <longjmp>:
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	91 05       	cpc	r25, r1
    23de:	81 1d       	adc	r24, r1
    23e0:	2d 90       	ld	r2, X+
    23e2:	3d 90       	ld	r3, X+
    23e4:	4d 90       	ld	r4, X+
    23e6:	5d 90       	ld	r5, X+
    23e8:	6d 90       	ld	r6, X+
    23ea:	7d 90       	ld	r7, X+
    23ec:	8d 90       	ld	r8, X+
    23ee:	9d 90       	ld	r9, X+
    23f0:	ad 90       	ld	r10, X+
    23f2:	bd 90       	ld	r11, X+
    23f4:	cd 90       	ld	r12, X+
    23f6:	dd 90       	ld	r13, X+
    23f8:	ed 90       	ld	r14, X+
    23fa:	fd 90       	ld	r15, X+
    23fc:	0d 91       	ld	r16, X+
    23fe:	1d 91       	ld	r17, X+
    2400:	cd 91       	ld	r28, X+
    2402:	dd 91       	ld	r29, X+
    2404:	ed 91       	ld	r30, X+
    2406:	fd 91       	ld	r31, X+
    2408:	0d 90       	ld	r0, X+
    240a:	f8 94       	cli
    240c:	fe bf       	out	0x3e, r31	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	ed bf       	out	0x3d, r30	; 61
    2412:	ed 91       	ld	r30, X+
    2414:	fd 91       	ld	r31, X+
    2416:	09 94       	ijmp

00002418 <_exit>:
    2418:	f8 94       	cli

0000241a <__stop_program>:
    241a:	ff cf       	rjmp	.-2      	; 0x241a <__stop_program>
