
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000842  000008d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000842  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000227  00800118  00800118  000008ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000947  00000000  00000000  000009ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000403  00000000  00000000  00001315  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fb  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000234  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028f  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f4  00000000  00000000  00001ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000026cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e4       	ldi	r30, 0x42	; 66
  70:	f8 e0       	ldi	r31, 0x08	; 8
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	af 33       	cpi	r26, 0x3F	; 63
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
  92:	0c 94 1f 04 	jmp	0x83e	; 0x83e <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <is_prime>:
#include <avr/io.h>

int pp;
mutex m = MUTEX_INIT;

int is_prime(long i) {
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	6b 01       	movw	r12, r22
  a8:	7c 01       	movw	r14, r24
	int n = 2;
	while (n < i) {
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	c8 16       	cp	r12, r24
  ae:	d1 04       	cpc	r13, r1
  b0:	e1 04       	cpc	r14, r1
  b2:	f1 04       	cpc	r15, r1
  b4:	7c f1       	brlt	.+94     	; 0x114 <is_prime+0x7a>
		if ((i % n) == 0) {
  b6:	d7 01       	movw	r26, r14
  b8:	c6 01       	movw	r24, r12
  ba:	81 70       	andi	r24, 0x01	; 1
  bc:	99 27       	eor	r25, r25
  be:	aa 27       	eor	r26, r26
  c0:	b0 78       	andi	r27, 0x80	; 128
  c2:	bb 23       	and	r27, r27
  c4:	54 f4       	brge	.+20     	; 0xda <is_prime+0x40>
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	a1 09       	sbc	r26, r1
  ca:	b1 09       	sbc	r27, r1
  cc:	8e 6f       	ori	r24, 0xFE	; 254
  ce:	9f 6f       	ori	r25, 0xFF	; 255
  d0:	af 6f       	ori	r26, 0xFF	; 255
  d2:	bf 6f       	ori	r27, 0xFF	; 255
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	a1 1d       	adc	r26, r1
  d8:	b1 1d       	adc	r27, r1
  da:	89 2b       	or	r24, r25
  dc:	8a 2b       	or	r24, r26
  de:	8b 2b       	or	r24, r27
  e0:	e1 f0       	breq	.+56     	; 0x11a <is_prime+0x80>

int pp;
mutex m = MUTEX_INIT;

int is_prime(long i) {
	int n = 2;
  e2:	c2 e0       	ldi	r28, 0x02	; 2
  e4:	d0 e0       	ldi	r29, 0x00	; 0
  e6:	08 c0       	rjmp	.+16     	; 0xf8 <is_prime+0x5e>
	while (n < i) {
		if ((i % n) == 0) {
  e8:	c7 01       	movw	r24, r14
  ea:	b6 01       	movw	r22, r12
  ec:	0e 94 9d 03 	call	0x73a	; 0x73a <__divmodsi4>
  f0:	67 2b       	or	r22, r23
  f2:	68 2b       	or	r22, r24
  f4:	69 2b       	or	r22, r25
  f6:	a1 f0       	breq	.+40     	; 0x120 <is_prime+0x86>
			return 0;
		}
		n++;
  f8:	21 96       	adiw	r28, 0x01	; 1
int pp;
mutex m = MUTEX_INIT;

int is_prime(long i) {
	int n = 2;
	while (n < i) {
  fa:	9e 01       	movw	r18, r28
  fc:	44 27       	eor	r20, r20
  fe:	37 fd       	sbrc	r19, 7
 100:	40 95       	com	r20
 102:	54 2f       	mov	r21, r20
 104:	2c 15       	cp	r18, r12
 106:	3d 05       	cpc	r19, r13
 108:	4e 05       	cpc	r20, r14
 10a:	5f 05       	cpc	r21, r15
 10c:	6c f3       	brlt	.-38     	; 0xe8 <is_prime+0x4e>
		if ((i % n) == 0) {
			return 0;
		}
		n++;
	}
	return 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 c0       	rjmp	.+16     	; 0x124 <is_prime+0x8a>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	05 c0       	rjmp	.+10     	; 0x124 <is_prime+0x8a>

int is_prime(long i) {
	int n = 2;
	while (n < i) {
		if ((i % n) == 0) {
			return 0;
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <is_prime+0x8a>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
		}
		n++;
	}
	return 1;
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	df 90       	pop	r13
 12e:	cf 90       	pop	r12
 130:	08 95       	ret

00000132 <writeChar>:

void writeChar(char ch, int pos) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	64 97       	sbiw	r28, 0x14	; 20
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
	int numbers[10] = {
 146:	94 e1       	ldi	r25, 0x14	; 20
 148:	e4 e0       	ldi	r30, 0x04	; 4
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	de 01       	movw	r26, r28
 14e:	11 96       	adiw	r26, 0x01	; 1
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	9a 95       	dec	r25
 156:	e1 f7       	brne	.-8      	; 0x150 <writeChar+0x1e>
		0x1F41,
		0x0111,
		0x1F51,
		0x0B51
	};
	if (pos >= 0 && pos <= 5) {
 158:	66 30       	cpi	r22, 0x06	; 6
 15a:	71 05       	cpc	r23, r1
 15c:	08 f0       	brcs	.+2      	; 0x160 <writeChar+0x2e>
 15e:	43 c1       	rjmp	.+646    	; 0x3e6 <writeChar+0x2b4>
		if (ch < 0 || ch > 9){
 160:	8a 30       	cpi	r24, 0x0A	; 10
 162:	08 f0       	brcs	.+2      	; 0x166 <writeChar+0x34>
			ch = ch - '0';
 164:	80 53       	subi	r24, 0x30	; 48
			}
			if (ch>= 0 && ch <9) {
 166:	89 30       	cpi	r24, 0x09	; 9
 168:	08 f0       	brcs	.+2      	; 0x16c <writeChar+0x3a>
 16a:	3d c1       	rjmp	.+634    	; 0x3e6 <writeChar+0x2b4>
			int mask = 0xF;
			int mask2 = 0xF0;
			int towrite = numbers[ch];
 16c:	e8 2f       	mov	r30, r24
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	ec 0f       	add	r30, r28
 176:	fd 1f       	adc	r31, r29
 178:	81 81       	ldd	r24, Z+1	; 0x01
 17a:	92 81       	ldd	r25, Z+2	; 0x02
			
			if (pos == 0) {
 17c:	61 15       	cp	r22, r1
 17e:	71 05       	cpc	r23, r1
 180:	71 f5       	brne	.+92     	; 0x1de <writeChar+0xac>
				LCDDR0 = (mask & towrite) | LCDDR0 & mask2;
 182:	ec ee       	ldi	r30, 0xEC	; 236
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	20 81       	ld	r18, Z
 188:	38 2f       	mov	r19, r24
 18a:	3f 70       	andi	r19, 0x0F	; 15
 18c:	20 7f       	andi	r18, 0xF0	; 240
 18e:	23 2b       	or	r18, r19
 190:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 192:	9c 01       	movw	r18, r24
 194:	35 95       	asr	r19
 196:	27 95       	ror	r18
 198:	35 95       	asr	r19
 19a:	27 95       	ror	r18
 19c:	35 95       	asr	r19
 19e:	27 95       	ror	r18
 1a0:	35 95       	asr	r19
 1a2:	27 95       	ror	r18
				LCDDR5 = (mask & towrite) | LCDDR5 & mask2;
 1a4:	e1 ef       	ldi	r30, 0xF1	; 241
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	30 81       	ld	r19, Z
 1aa:	2f 70       	andi	r18, 0x0F	; 15
 1ac:	30 7f       	andi	r19, 0xF0	; 240
 1ae:	23 2b       	or	r18, r19
 1b0:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) | LCDDR10 & mask2;
 1b2:	e6 ef       	ldi	r30, 0xF6	; 246
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	20 81       	ld	r18, Z
 1b8:	39 2f       	mov	r19, r25
 1ba:	3f 70       	andi	r19, 0x0F	; 15
 1bc:	20 7f       	andi	r18, 0xF0	; 240
 1be:	23 2b       	or	r18, r19
 1c0:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 1c2:	80 e1       	ldi	r24, 0x10	; 16
 1c4:	98 02       	muls	r25, r24
 1c6:	81 2d       	mov	r24, r1
 1c8:	99 0b       	sbc	r25, r25
 1ca:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) | LCDDR15 & mask2;
 1cc:	eb ef       	ldi	r30, 0xFB	; 251
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	20 81       	ld	r18, Z
 1d2:	38 2f       	mov	r19, r24
 1d4:	3f 70       	andi	r19, 0x0F	; 15
 1d6:	20 7f       	andi	r18, 0xF0	; 240
 1d8:	23 2b       	or	r18, r19
 1da:	20 83       	st	Z, r18
 1dc:	66 c0       	rjmp	.+204    	; 0x2aa <writeChar+0x178>
			}
			if (pos == 1) {
 1de:	61 30       	cpi	r22, 0x01	; 1
 1e0:	71 05       	cpc	r23, r1
 1e2:	91 f5       	brne	.+100    	; 0x248 <writeChar+0x116>
				LCDDR0 = (mask & towrite) << 4 | LCDDR0 & mask;
 1e4:	ec ee       	ldi	r30, 0xEC	; 236
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	20 81       	ld	r18, Z
 1ea:	38 2f       	mov	r19, r24
 1ec:	32 95       	swap	r19
 1ee:	30 7f       	andi	r19, 0xF0	; 240
 1f0:	2f 70       	andi	r18, 0x0F	; 15
 1f2:	23 2b       	or	r18, r19
 1f4:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR5 = (mask & towrite) << 4 | LCDDR5 & mask;
 1f6:	e1 ef       	ldi	r30, 0xF1	; 241
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	40 81       	ld	r20, Z
 1fc:	9c 01       	movw	r18, r24
 1fe:	20 7f       	andi	r18, 0xF0	; 240
 200:	33 27       	eor	r19, r19
 202:	34 2f       	mov	r19, r20
 204:	3f 70       	andi	r19, 0x0F	; 15
 206:	23 2b       	or	r18, r19
 208:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) << 4 | LCDDR10 & mask;
 20a:	e6 ef       	ldi	r30, 0xF6	; 246
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	40 81       	ld	r20, Z
 210:	9c 01       	movw	r18, r24
 212:	32 95       	swap	r19
 214:	22 95       	swap	r18
 216:	2f 70       	andi	r18, 0x0F	; 15
 218:	23 27       	eor	r18, r19
 21a:	3f 70       	andi	r19, 0x0F	; 15
 21c:	23 27       	eor	r18, r19
 21e:	20 7f       	andi	r18, 0xF0	; 240
 220:	33 27       	eor	r19, r19
 222:	34 2f       	mov	r19, r20
 224:	3f 70       	andi	r19, 0x0F	; 15
 226:	23 2b       	or	r18, r19
 228:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 22a:	80 e1       	ldi	r24, 0x10	; 16
 22c:	98 02       	muls	r25, r24
 22e:	81 2d       	mov	r24, r1
 230:	99 0b       	sbc	r25, r25
 232:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) << 4 | LCDDR15 & mask;
 234:	eb ef       	ldi	r30, 0xFB	; 251
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	20 81       	ld	r18, Z
 23a:	38 2f       	mov	r19, r24
 23c:	32 95       	swap	r19
 23e:	30 7f       	andi	r19, 0xF0	; 240
 240:	2f 70       	andi	r18, 0x0F	; 15
 242:	23 2b       	or	r18, r19
 244:	20 83       	st	Z, r18
 246:	69 c0       	rjmp	.+210    	; 0x31a <writeChar+0x1e8>
			}
			if (pos == 2) {
 248:	62 30       	cpi	r22, 0x02	; 2
 24a:	71 05       	cpc	r23, r1
 24c:	71 f5       	brne	.+92     	; 0x2aa <writeChar+0x178>
				LCDDR1 = (mask & towrite) | LCDDR1 & mask2;
 24e:	ed ee       	ldi	r30, 0xED	; 237
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	20 81       	ld	r18, Z
 254:	38 2f       	mov	r19, r24
 256:	3f 70       	andi	r19, 0x0F	; 15
 258:	20 7f       	andi	r18, 0xF0	; 240
 25a:	23 2b       	or	r18, r19
 25c:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 25e:	9c 01       	movw	r18, r24
 260:	35 95       	asr	r19
 262:	27 95       	ror	r18
 264:	35 95       	asr	r19
 266:	27 95       	ror	r18
 268:	35 95       	asr	r19
 26a:	27 95       	ror	r18
 26c:	35 95       	asr	r19
 26e:	27 95       	ror	r18
				LCDDR6 = (mask & towrite) | LCDDR6 & mask2;
 270:	e2 ef       	ldi	r30, 0xF2	; 242
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	30 81       	ld	r19, Z
 276:	2f 70       	andi	r18, 0x0F	; 15
 278:	30 7f       	andi	r19, 0xF0	; 240
 27a:	23 2b       	or	r18, r19
 27c:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) | LCDDR11 & mask2;
 27e:	e7 ef       	ldi	r30, 0xF7	; 247
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	20 81       	ld	r18, Z
 284:	39 2f       	mov	r19, r25
 286:	3f 70       	andi	r19, 0x0F	; 15
 288:	20 7f       	andi	r18, 0xF0	; 240
 28a:	23 2b       	or	r18, r19
 28c:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 28e:	80 e1       	ldi	r24, 0x10	; 16
 290:	98 02       	muls	r25, r24
 292:	81 2d       	mov	r24, r1
 294:	99 0b       	sbc	r25, r25
 296:	11 24       	eor	r1, r1
				LCDDR16 = (mask & towrite) | LCDDR16 & mask2;
 298:	ec ef       	ldi	r30, 0xFC	; 252
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	20 81       	ld	r18, Z
 29e:	38 2f       	mov	r19, r24
 2a0:	3f 70       	andi	r19, 0x0F	; 15
 2a2:	20 7f       	andi	r18, 0xF0	; 240
 2a4:	23 2b       	or	r18, r19
 2a6:	20 83       	st	Z, r18
 2a8:	67 c0       	rjmp	.+206    	; 0x378 <writeChar+0x246>
			}
			if (pos == 3) {
 2aa:	63 30       	cpi	r22, 0x03	; 3
 2ac:	71 05       	cpc	r23, r1
 2ae:	a9 f5       	brne	.+106    	; 0x31a <writeChar+0x1e8>
				LCDDR1 = (mask & towrite) << 4| LCDDR1 & mask;
 2b0:	ed ee       	ldi	r30, 0xED	; 237
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	20 81       	ld	r18, Z
 2b6:	38 2f       	mov	r19, r24
 2b8:	32 95       	swap	r19
 2ba:	30 7f       	andi	r19, 0xF0	; 240
 2bc:	2f 70       	andi	r18, 0x0F	; 15
 2be:	23 2b       	or	r18, r19
 2c0:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR6 = (mask & towrite) << 4| LCDDR6 & mask;
 2c2:	e2 ef       	ldi	r30, 0xF2	; 242
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	40 81       	ld	r20, Z
 2c8:	9c 01       	movw	r18, r24
 2ca:	20 7f       	andi	r18, 0xF0	; 240
 2cc:	33 27       	eor	r19, r19
 2ce:	34 2f       	mov	r19, r20
 2d0:	3f 70       	andi	r19, 0x0F	; 15
 2d2:	23 2b       	or	r18, r19
 2d4:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) << 4| LCDDR11 & mask;
 2d6:	e7 ef       	ldi	r30, 0xF7	; 247
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	40 81       	ld	r20, Z
 2dc:	9c 01       	movw	r18, r24
 2de:	32 95       	swap	r19
 2e0:	22 95       	swap	r18
 2e2:	2f 70       	andi	r18, 0x0F	; 15
 2e4:	23 27       	eor	r18, r19
 2e6:	3f 70       	andi	r19, 0x0F	; 15
 2e8:	23 27       	eor	r18, r19
 2ea:	20 7f       	andi	r18, 0xF0	; 240
 2ec:	33 27       	eor	r19, r19
 2ee:	34 2f       	mov	r19, r20
 2f0:	3f 70       	andi	r19, 0x0F	; 15
 2f2:	23 2b       	or	r18, r19
 2f4:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR16 = (mask & towrite) << 4| LCDDR16 & mask;
 2f6:	ec ef       	ldi	r30, 0xFC	; 252
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	20 81       	ld	r18, Z
 2fc:	89 2f       	mov	r24, r25
 2fe:	99 27       	eor	r25, r25
 300:	82 95       	swap	r24
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	82 95       	swap	r24
 306:	92 95       	swap	r25
 308:	90 7f       	andi	r25, 0xF0	; 240
 30a:	98 27       	eor	r25, r24
 30c:	80 7f       	andi	r24, 0xF0	; 240
 30e:	98 27       	eor	r25, r24
 310:	92 2f       	mov	r25, r18
 312:	9f 70       	andi	r25, 0x0F	; 15
 314:	89 2b       	or	r24, r25
 316:	80 83       	st	Z, r24
 318:	66 c0       	rjmp	.+204    	; 0x3e6 <writeChar+0x2b4>
			}
			if (pos == 4) {
 31a:	64 30       	cpi	r22, 0x04	; 4
 31c:	71 05       	cpc	r23, r1
 31e:	61 f5       	brne	.+88     	; 0x378 <writeChar+0x246>
				LCDDR2 = (mask & towrite) | LCDDR2 & mask2 ;
 320:	ee ee       	ldi	r30, 0xEE	; 238
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	20 81       	ld	r18, Z
 326:	38 2f       	mov	r19, r24
 328:	3f 70       	andi	r19, 0x0F	; 15
 32a:	20 7f       	andi	r18, 0xF0	; 240
 32c:	23 2b       	or	r18, r19
 32e:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 330:	9c 01       	movw	r18, r24
 332:	35 95       	asr	r19
 334:	27 95       	ror	r18
 336:	35 95       	asr	r19
 338:	27 95       	ror	r18
 33a:	35 95       	asr	r19
 33c:	27 95       	ror	r18
 33e:	35 95       	asr	r19
 340:	27 95       	ror	r18
				LCDDR7 = (mask & towrite) | LCDDR7 & mask2;
 342:	e3 ef       	ldi	r30, 0xF3	; 243
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	2f 70       	andi	r18, 0x0F	; 15
 34a:	80 7f       	andi	r24, 0xF0	; 240
 34c:	28 2b       	or	r18, r24
 34e:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite)| LCDDR12 & mask2;
 350:	e8 ef       	ldi	r30, 0xF8	; 248
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	29 2f       	mov	r18, r25
 358:	2f 70       	andi	r18, 0x0F	; 15
 35a:	80 7f       	andi	r24, 0xF0	; 240
 35c:	82 2b       	or	r24, r18
 35e:	80 83       	st	Z, r24
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite)| LCDDR17 & mask2;
 360:	ed ef       	ldi	r30, 0xFD	; 253
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
				LCDDR2 = (mask & towrite) | LCDDR2 & mask2 ;
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) | LCDDR7 & mask2;
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite)| LCDDR12 & mask2;
				towrite = (towrite >> 4);
 366:	95 95       	asr	r25
 368:	95 95       	asr	r25
 36a:	95 95       	asr	r25
 36c:	95 95       	asr	r25
				LCDDR17 = (mask & towrite)| LCDDR17 & mask2;
 36e:	9f 70       	andi	r25, 0x0F	; 15
 370:	80 7f       	andi	r24, 0xF0	; 240
 372:	89 2b       	or	r24, r25
 374:	80 83       	st	Z, r24
 376:	37 c0       	rjmp	.+110    	; 0x3e6 <writeChar+0x2b4>
			}
			if (pos == 5) {
 378:	65 30       	cpi	r22, 0x05	; 5
 37a:	71 05       	cpc	r23, r1
 37c:	a1 f5       	brne	.+104    	; 0x3e6 <writeChar+0x2b4>
				LCDDR2 = (mask & towrite) << 4| LCDDR2 & mask;
 37e:	ee ee       	ldi	r30, 0xEE	; 238
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	20 81       	ld	r18, Z
 384:	38 2f       	mov	r19, r24
 386:	32 95       	swap	r19
 388:	30 7f       	andi	r19, 0xF0	; 240
 38a:	2f 70       	andi	r18, 0x0F	; 15
 38c:	23 2b       	or	r18, r19
 38e:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) << 4| LCDDR7 & mask;
 390:	e3 ef       	ldi	r30, 0xF3	; 243
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	40 81       	ld	r20, Z
 396:	9c 01       	movw	r18, r24
 398:	20 7f       	andi	r18, 0xF0	; 240
 39a:	33 27       	eor	r19, r19
 39c:	34 2f       	mov	r19, r20
 39e:	3f 70       	andi	r19, 0x0F	; 15
 3a0:	23 2b       	or	r18, r19
 3a2:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite) << 4| LCDDR12 & mask;
 3a4:	e8 ef       	ldi	r30, 0xF8	; 248
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	40 81       	ld	r20, Z
 3aa:	9c 01       	movw	r18, r24
 3ac:	32 95       	swap	r19
 3ae:	22 95       	swap	r18
 3b0:	2f 70       	andi	r18, 0x0F	; 15
 3b2:	23 27       	eor	r18, r19
 3b4:	3f 70       	andi	r19, 0x0F	; 15
 3b6:	23 27       	eor	r18, r19
 3b8:	20 7f       	andi	r18, 0xF0	; 240
 3ba:	33 27       	eor	r19, r19
 3bc:	34 2f       	mov	r19, r20
 3be:	3f 70       	andi	r19, 0x0F	; 15
 3c0:	23 2b       	or	r18, r19
 3c2:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite) << 4| LCDDR17 & mask;
 3c4:	ed ef       	ldi	r30, 0xFD	; 253
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	20 81       	ld	r18, Z
 3ca:	89 2f       	mov	r24, r25
 3cc:	99 27       	eor	r25, r25
 3ce:	82 95       	swap	r24
 3d0:	8f 70       	andi	r24, 0x0F	; 15
 3d2:	82 95       	swap	r24
 3d4:	92 95       	swap	r25
 3d6:	90 7f       	andi	r25, 0xF0	; 240
 3d8:	98 27       	eor	r25, r24
 3da:	80 7f       	andi	r24, 0xF0	; 240
 3dc:	98 27       	eor	r25, r24
 3de:	92 2f       	mov	r25, r18
 3e0:	9f 70       	andi	r25, 0x0F	; 15
 3e2:	89 2b       	or	r24, r25
 3e4:	80 83       	st	Z, r24
			}
		}
	}
}
 3e6:	64 96       	adiw	r28, 0x14	; 20
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <LCD_init>:
void LCD_init(void) {
	/* 1/3 bias, 1/4 duty cycle, 25 segments */
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
 3f8:	87 eb       	ldi	r24, 0xB7	; 183
 3fa:	80 93 e5 00 	sts	0x00E5, r24

	/* 16 prescaler (no change needed), 8 clock divide*/
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 3fe:	87 e0       	ldi	r24, 0x07	; 7
 400:	80 93 e6 00 	sts	0x00E6, r24

	/*300 Mu s driver time and output voltage 3.35V*/
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
 404:	8f e0       	ldi	r24, 0x0F	; 15
 406:	80 93 e7 00 	sts	0x00E7, r24

	/*enable lcd with low power waveform and no interrupt and no blanking(on update)*/
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
 40a:	80 ec       	ldi	r24, 0xC0	; 192
 40c:	80 93 e4 00 	sts	0x00E4, r24
 410:	08 95       	ret

00000412 <printAt>:
}

void printAt(long num, int pos) {
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	c6 2f       	mov	r28, r22
	//lock(&m);
    pp = pos;
 418:	50 93 1d 01 	sts	0x011D, r21
 41c:	40 93 1c 01 	sts	0x011C, r20
    writeChar( (char)num % 100 / 10 + '0', pp);
 420:	89 e2       	ldi	r24, 0x29	; 41
 422:	68 9f       	mul	r22, r24
 424:	81 2d       	mov	r24, r1
 426:	11 24       	eor	r1, r1
 428:	82 95       	swap	r24
 42a:	8f 70       	andi	r24, 0x0F	; 15
 42c:	96 2f       	mov	r25, r22
 42e:	24 e6       	ldi	r18, 0x64	; 100
 430:	82 9f       	mul	r24, r18
 432:	90 19       	sub	r25, r0
 434:	11 24       	eor	r1, r1
 436:	dd ec       	ldi	r29, 0xCD	; 205
 438:	9d 9f       	mul	r25, r29
 43a:	81 2d       	mov	r24, r1
 43c:	11 24       	eor	r1, r1
 43e:	86 95       	lsr	r24
 440:	86 95       	lsr	r24
 442:	86 95       	lsr	r24
 444:	ba 01       	movw	r22, r20
 446:	80 5d       	subi	r24, 0xD0	; 208
 448:	0e 94 99 00 	call	0x132	; 0x132 <writeChar>
	/*for (int i=0;i<1000;i++)
	{
	}*/
    pp++;
 44c:	20 91 1c 01 	lds	r18, 0x011C
 450:	30 91 1d 01 	lds	r19, 0x011D
 454:	b9 01       	movw	r22, r18
 456:	6f 5f       	subi	r22, 0xFF	; 255
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	70 93 1d 01 	sts	0x011D, r23
 45e:	60 93 1c 01 	sts	0x011C, r22
    writeChar( (char)num % 10 + '0', pp);
 462:	cd 9f       	mul	r28, r29
 464:	d1 2d       	mov	r29, r1
 466:	11 24       	eor	r1, r1
 468:	d6 95       	lsr	r29
 46a:	d6 95       	lsr	r29
 46c:	d6 95       	lsr	r29
 46e:	dd 0f       	add	r29, r29
 470:	8d 2f       	mov	r24, r29
 472:	88 0f       	add	r24, r24
 474:	88 0f       	add	r24, r24
 476:	d8 0f       	add	r29, r24
 478:	8c 2f       	mov	r24, r28
 47a:	8d 1b       	sub	r24, r29
 47c:	80 5d       	subi	r24, 0xD0	; 208
 47e:	0e 94 99 00 	call	0x132	; 0x132 <writeChar>
	//unlock(&m);
}
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <computePrimes>:

void computePrimes(int pos) {
 488:	ec 01       	movw	r28, r24
    long n;

    for(n = 1;; n++) {
 48a:	c1 2c       	mov	r12, r1
 48c:	d1 2c       	mov	r13, r1
 48e:	76 01       	movw	r14, r12
 490:	c3 94       	inc	r12
        if (is_prime(n) == 1) {
 492:	c7 01       	movw	r24, r14
 494:	b6 01       	movw	r22, r12
 496:	0e 94 4d 00 	call	0x9a	; 0x9a <is_prime>
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	29 f4       	brne	.+10     	; 0x4a8 <computePrimes+0x20>
            printAt(n, pos);
 49e:	ae 01       	movw	r20, r28
 4a0:	c7 01       	movw	r24, r14
 4a2:	b6 01       	movw	r22, r12
 4a4:	0e 94 09 02 	call	0x412	; 0x412 <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1;; n++) {
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	c8 1a       	sub	r12, r24
 4ac:	d8 0a       	sbc	r13, r24
 4ae:	e8 0a       	sbc	r14, r24
 4b0:	f8 0a       	sbc	r15, r24
        if (is_prime(n) == 1) {
            printAt(n, pos);
        }
    }
 4b2:	ef cf       	rjmp	.-34     	; 0x492 <computePrimes+0xa>

000004b4 <init>:
}
void init() {
	CLKPR = 0x80;
 4b4:	e1 e6       	ldi	r30, 0x61	; 97
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 e8       	ldi	r24, 0x80	; 128
 4ba:	80 83       	st	Z, r24
	CLKPR = 0x00;
 4bc:	10 82       	st	Z, r1
	LCD_init();
 4be:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_init>
 4c2:	08 95       	ret

000004c4 <main>:
}

int main() {
	init();
 4c4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <init>

	spawn(computePrimes, 0);
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	84 e4       	ldi	r24, 0x44	; 68
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	0e 94 b6 02 	call	0x56c	; 0x56c <spawn>
    computePrimes(3);
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 44 02 	call	0x488	; 0x488 <computePrimes>

000004dc <enqueue>:
ISR(TIMER1_COMPA_vect) {
	yield();
}

static void enqueue(thread p, thread *queue) {
	DISABLE();
 4dc:	f8 94       	cli
    p->next = NULL;
 4de:	dc 01       	movw	r26, r24
 4e0:	15 96       	adiw	r26, 0x05	; 5
 4e2:	1c 92       	st	X, r1
 4e4:	1e 92       	st	-X, r1
 4e6:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 4e8:	db 01       	movw	r26, r22
 4ea:	ed 91       	ld	r30, X+
 4ec:	fc 91       	ld	r31, X
 4ee:	11 97       	sbiw	r26, 0x01	; 1
 4f0:	30 97       	sbiw	r30, 0x00	; 0
 4f2:	19 f4       	brne	.+6      	; 0x4fa <enqueue+0x1e>
        *queue = p;
 4f4:	8d 93       	st	X+, r24
 4f6:	9c 93       	st	X, r25
 4f8:	09 c0       	rjmp	.+18     	; 0x50c <__stack+0xd>
    } else {
        thread q = *queue;
        while (q->next)
 4fa:	24 81       	ldd	r18, Z+4	; 0x04
 4fc:	35 81       	ldd	r19, Z+5	; 0x05
 4fe:	21 15       	cp	r18, r1
 500:	31 05       	cpc	r19, r1
 502:	11 f0       	breq	.+4      	; 0x508 <__stack+0x9>
            q = q->next;
 504:	f9 01       	movw	r30, r18
 506:	f9 cf       	rjmp	.-14     	; 0x4fa <enqueue+0x1e>
        q->next = p;
 508:	95 83       	std	Z+5, r25	; 0x05
 50a:	84 83       	std	Z+4, r24	; 0x04
    }
	ENABLE();
 50c:	78 94       	sei
 50e:	08 95       	ret

00000510 <dequeue>:
}

static thread dequeue(thread *queue) {
	DISABLE();
 510:	f8 94       	cli
    thread p = *queue;
 512:	dc 01       	movw	r26, r24
 514:	ed 91       	ld	r30, X+
 516:	fc 91       	ld	r31, X
 518:	11 97       	sbiw	r26, 0x01	; 1
    if (*queue) {
 51a:	30 97       	sbiw	r30, 0x00	; 0
 51c:	09 f4       	brne	.+2      	; 0x520 <dequeue+0x10>
 51e:	ff cf       	rjmp	.-2      	; 0x51e <dequeue+0xe>
        *queue = (*queue)->next;
 520:	24 81       	ldd	r18, Z+4	; 0x04
 522:	35 81       	ldd	r19, Z+5	; 0x05
 524:	2d 93       	st	X+, r18
 526:	3c 93       	st	X, r19
        // Empty queue, kernel panic!!!
        while (1) ;  // not much else to do...
    }
    return p;
	ENABLE();
}
 528:	cf 01       	movw	r24, r30
 52a:	08 95       	ret

0000052c <dispatch>:

static void dispatch(thread next) {
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	00 d0       	rcall	.+0      	; 0x532 <dispatch+0x6>
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	9a 83       	std	Y+2, r25	; 0x02
 538:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 53a:	80 91 00 01 	lds	r24, 0x0100
 53e:	90 91 01 01 	lds	r25, 0x0101
 542:	06 96       	adiw	r24, 0x06	; 6
 544:	0e 94 de 03 	call	0x7bc	; 0x7bc <setjmp>
 548:	89 2b       	or	r24, r25
 54a:	59 f4       	brne	.+22     	; 0x562 <dispatch+0x36>
        current = next;
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	9a 81       	ldd	r25, Y+2	; 0x02
 550:	90 93 01 01 	sts	0x0101, r25
 554:	80 93 00 01 	sts	0x0100, r24
        longjmp(next->context,1);
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	06 96       	adiw	r24, 0x06	; 6
 55e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <longjmp>
    }
}
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <spawn>:

void spawn(void (* function)(int), int arg) {
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	00 d0       	rcall	.+0      	; 0x57a <spawn+0xe>
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	7c 01       	movw	r14, r24
 580:	8b 01       	movw	r16, r22
    thread newp;

    DISABLE();
 582:	f8 94       	cli
    if (!initialized) initialize();
 584:	80 91 18 01 	lds	r24, 0x0118
 588:	90 91 19 01 	lds	r25, 0x0119
 58c:	89 2b       	or	r24, r25
 58e:	a1 f5       	brne	.+104    	; 0x5f8 <spawn+0x8c>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 590:	88 ef       	ldi	r24, 0xF8	; 248
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	90 93 90 01 	sts	0x0190, r25
 598:	80 93 8f 01 	sts	0x018F, r24
 59c:	85 e6       	ldi	r24, 0x65	; 101
 59e:	92 e0       	ldi	r25, 0x02	; 2
 5a0:	90 93 fd 01 	sts	0x01FD, r25
 5a4:	80 93 fc 01 	sts	0x01FC, r24
 5a8:	82 ed       	ldi	r24, 0xD2	; 210
 5aa:	92 e0       	ldi	r25, 0x02	; 2
 5ac:	90 93 6a 02 	sts	0x026A, r25
 5b0:	80 93 69 02 	sts	0x0269, r24
    threads[NTHREADS-1].next = NULL;
 5b4:	10 92 d7 02 	sts	0x02D7, r1
 5b8:	10 92 d6 02 	sts	0x02D6, r1

	PORTB = EIMSK = PCMSK1 = 128;
 5bc:	80 e8       	ldi	r24, 0x80	; 128
 5be:	80 93 6c 00 	sts	0x006C, r24
 5c2:	8d bb       	out	0x1d, r24	; 29
 5c4:	85 b9       	out	0x05, r24	; 5
	
	TCCR1A = 192;
 5c6:	80 ec       	ldi	r24, 0xC0	; 192
 5c8:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 13;
 5cc:	8d e0       	ldi	r24, 0x0D	; 13
 5ce:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0x0000;
 5d2:	10 92 85 00 	sts	0x0085, r1
 5d6:	10 92 84 00 	sts	0x0084, r1
	OCR1A = (8000000/1024)*0.05; //1s * 0.01 = 10ms
 5da:	86 e8       	ldi	r24, 0x86	; 134
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	90 93 89 00 	sts	0x0089, r25
 5e2:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 2;
 5e6:	82 e0       	ldi	r24, 0x02	; 2
 5e8:	80 93 6f 00 	sts	0x006F, r24
    initialized = 1;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	90 93 19 01 	sts	0x0119, r25
 5f4:	80 93 18 01 	sts	0x0118, r24
    thread newp;

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	0e 94 88 02 	call	0x510	; 0x510 <dequeue>
 600:	9a 83       	std	Y+2, r25	; 0x02
 602:	89 83       	std	Y+1, r24	; 0x01
    newp->function = function;
 604:	fc 01       	movw	r30, r24
 606:	f1 82       	std	Z+1, r15	; 0x01
 608:	e0 82       	st	Z, r14
    newp->arg = arg;
 60a:	13 83       	std	Z+3, r17	; 0x03
 60c:	02 83       	std	Z+2, r16	; 0x02
    newp->next = NULL;
 60e:	15 82       	std	Z+5, r1	; 0x05
 610:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 612:	06 96       	adiw	r24, 0x06	; 6
 614:	0e 94 de 03 	call	0x7bc	; 0x7bc <setjmp>
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	e1 f4       	brne	.+56     	; 0x654 <spawn+0xe8>
        ENABLE();
 61c:	78 94       	sei
        current->function(current->arg);
 61e:	a0 91 00 01 	lds	r26, 0x0100
 622:	b0 91 01 01 	lds	r27, 0x0101
 626:	ed 91       	ld	r30, X+
 628:	fc 91       	ld	r31, X
 62a:	11 97       	sbiw	r26, 0x01	; 1
 62c:	12 96       	adiw	r26, 0x02	; 2
 62e:	8d 91       	ld	r24, X+
 630:	9c 91       	ld	r25, X
 632:	13 97       	sbiw	r26, 0x03	; 3
 634:	09 95       	icall
        DISABLE();
 636:	f8 94       	cli
        enqueue(current, &freeQ);
 638:	62 e0       	ldi	r22, 0x02	; 2
 63a:	71 e0       	ldi	r23, 0x01	; 1
 63c:	80 91 00 01 	lds	r24, 0x0100
 640:	90 91 01 01 	lds	r25, 0x0101
 644:	0e 94 6e 02 	call	0x4dc	; 0x4dc <enqueue>
        dispatch(dequeue(&readyQ));
 648:	8a e1       	ldi	r24, 0x1A	; 26
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	0e 94 88 02 	call	0x510	; 0x510 <dequeue>
 650:	0e 94 96 02 	call	0x52c	; 0x52c <dispatch>
    }
    SETSTACK(&newp->context, &newp->stack);
 654:	89 81       	ldd	r24, Y+1	; 0x01
 656:	9a 81       	ldd	r25, Y+2	; 0x02
 658:	87 59       	subi	r24, 0x97	; 151
 65a:	9f 4f       	sbci	r25, 0xFF	; 255
 65c:	e9 81       	ldd	r30, Y+1	; 0x01
 65e:	fa 81       	ldd	r31, Y+2	; 0x02
 660:	97 8b       	std	Z+23, r25	; 0x17
 662:	86 8b       	std	Z+22, r24	; 0x16
 664:	91 8f       	std	Z+25, r25	; 0x19
 666:	80 8f       	std	Z+24, r24	; 0x18

    enqueue(newp, &readyQ);
 668:	6a e1       	ldi	r22, 0x1A	; 26
 66a:	71 e0       	ldi	r23, 0x01	; 1
 66c:	cf 01       	movw	r24, r30
 66e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <enqueue>
    ENABLE();
 672:	78 94       	sei
}
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	1f 91       	pop	r17
 67e:	0f 91       	pop	r16
 680:	ff 90       	pop	r15
 682:	ef 90       	pop	r14
 684:	08 95       	ret

00000686 <yield>:

void yield(void) {
	DISABLE();
 686:	f8 94       	cli
	enqueue(current,&readyQ);
 688:	6a e1       	ldi	r22, 0x1A	; 26
 68a:	71 e0       	ldi	r23, 0x01	; 1
 68c:	80 91 00 01 	lds	r24, 0x0100
 690:	90 91 01 01 	lds	r25, 0x0101
 694:	0e 94 6e 02 	call	0x4dc	; 0x4dc <enqueue>
	dispatch(dequeue(&readyQ));
 698:	8a e1       	ldi	r24, 0x1A	; 26
 69a:	91 e0       	ldi	r25, 0x01	; 1
 69c:	0e 94 88 02 	call	0x510	; 0x510 <dequeue>
 6a0:	0e 94 96 02 	call	0x52c	; 0x52c <dispatch>
	ENABLE();
 6a4:	78 94       	sei
 6a6:	08 95       	ret

000006a8 <__vector_3>:
	TCNT1 = 0x0000;
	OCR1A = (8000000/1024)*0.05; //1s * 0.01 = 10ms
	TIMSK1 = 2;
    initialized = 1;
}
ISR(PCINT1_vect) {
 6a8:	1f 92       	push	r1
 6aa:	0f 92       	push	r0
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	0f 92       	push	r0
 6b0:	11 24       	eor	r1, r1
 6b2:	2f 93       	push	r18
 6b4:	3f 93       	push	r19
 6b6:	4f 93       	push	r20
 6b8:	5f 93       	push	r21
 6ba:	6f 93       	push	r22
 6bc:	7f 93       	push	r23
 6be:	8f 93       	push	r24
 6c0:	9f 93       	push	r25
 6c2:	af 93       	push	r26
 6c4:	bf 93       	push	r27
 6c6:	ef 93       	push	r30
 6c8:	ff 93       	push	r31
	if ((PINB & 128) == 0) {
 6ca:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 6cc:	0e 94 43 03 	call	0x686	; 0x686 <yield>
	}
}
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	bf 91       	pop	r27
 6d6:	af 91       	pop	r26
 6d8:	9f 91       	pop	r25
 6da:	8f 91       	pop	r24
 6dc:	7f 91       	pop	r23
 6de:	6f 91       	pop	r22
 6e0:	5f 91       	pop	r21
 6e2:	4f 91       	pop	r20
 6e4:	3f 91       	pop	r19
 6e6:	2f 91       	pop	r18
 6e8:	0f 90       	pop	r0
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	0f 90       	pop	r0
 6ee:	1f 90       	pop	r1
 6f0:	18 95       	reti

000006f2 <__vector_7>:
ISR(TIMER1_COMPA_vect) {
 6f2:	1f 92       	push	r1
 6f4:	0f 92       	push	r0
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	0f 92       	push	r0
 6fa:	11 24       	eor	r1, r1
 6fc:	2f 93       	push	r18
 6fe:	3f 93       	push	r19
 700:	4f 93       	push	r20
 702:	5f 93       	push	r21
 704:	6f 93       	push	r22
 706:	7f 93       	push	r23
 708:	8f 93       	push	r24
 70a:	9f 93       	push	r25
 70c:	af 93       	push	r26
 70e:	bf 93       	push	r27
 710:	ef 93       	push	r30
 712:	ff 93       	push	r31
	yield();
 714:	0e 94 43 03 	call	0x686	; 0x686 <yield>
}
 718:	ff 91       	pop	r31
 71a:	ef 91       	pop	r30
 71c:	bf 91       	pop	r27
 71e:	af 91       	pop	r26
 720:	9f 91       	pop	r25
 722:	8f 91       	pop	r24
 724:	7f 91       	pop	r23
 726:	6f 91       	pop	r22
 728:	5f 91       	pop	r21
 72a:	4f 91       	pop	r20
 72c:	3f 91       	pop	r19
 72e:	2f 91       	pop	r18
 730:	0f 90       	pop	r0
 732:	0f be       	out	0x3f, r0	; 63
 734:	0f 90       	pop	r0
 736:	1f 90       	pop	r1
 738:	18 95       	reti

0000073a <__divmodsi4>:
 73a:	05 2e       	mov	r0, r21
 73c:	97 fb       	bst	r25, 7
 73e:	1e f4       	brtc	.+6      	; 0x746 <__divmodsi4+0xc>
 740:	00 94       	com	r0
 742:	0e 94 b4 03 	call	0x768	; 0x768 <__negsi2>
 746:	57 fd       	sbrc	r21, 7
 748:	07 d0       	rcall	.+14     	; 0x758 <__divmodsi4_neg2>
 74a:	0e 94 bc 03 	call	0x778	; 0x778 <__udivmodsi4>
 74e:	07 fc       	sbrc	r0, 7
 750:	03 d0       	rcall	.+6      	; 0x758 <__divmodsi4_neg2>
 752:	4e f4       	brtc	.+18     	; 0x766 <__divmodsi4_exit>
 754:	0c 94 b4 03 	jmp	0x768	; 0x768 <__negsi2>

00000758 <__divmodsi4_neg2>:
 758:	50 95       	com	r21
 75a:	40 95       	com	r20
 75c:	30 95       	com	r19
 75e:	21 95       	neg	r18
 760:	3f 4f       	sbci	r19, 0xFF	; 255
 762:	4f 4f       	sbci	r20, 0xFF	; 255
 764:	5f 4f       	sbci	r21, 0xFF	; 255

00000766 <__divmodsi4_exit>:
 766:	08 95       	ret

00000768 <__negsi2>:
 768:	90 95       	com	r25
 76a:	80 95       	com	r24
 76c:	70 95       	com	r23
 76e:	61 95       	neg	r22
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	8f 4f       	sbci	r24, 0xFF	; 255
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	08 95       	ret

00000778 <__udivmodsi4>:
 778:	a1 e2       	ldi	r26, 0x21	; 33
 77a:	1a 2e       	mov	r1, r26
 77c:	aa 1b       	sub	r26, r26
 77e:	bb 1b       	sub	r27, r27
 780:	fd 01       	movw	r30, r26
 782:	0d c0       	rjmp	.+26     	; 0x79e <__udivmodsi4_ep>

00000784 <__udivmodsi4_loop>:
 784:	aa 1f       	adc	r26, r26
 786:	bb 1f       	adc	r27, r27
 788:	ee 1f       	adc	r30, r30
 78a:	ff 1f       	adc	r31, r31
 78c:	a2 17       	cp	r26, r18
 78e:	b3 07       	cpc	r27, r19
 790:	e4 07       	cpc	r30, r20
 792:	f5 07       	cpc	r31, r21
 794:	20 f0       	brcs	.+8      	; 0x79e <__udivmodsi4_ep>
 796:	a2 1b       	sub	r26, r18
 798:	b3 0b       	sbc	r27, r19
 79a:	e4 0b       	sbc	r30, r20
 79c:	f5 0b       	sbc	r31, r21

0000079e <__udivmodsi4_ep>:
 79e:	66 1f       	adc	r22, r22
 7a0:	77 1f       	adc	r23, r23
 7a2:	88 1f       	adc	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	1a 94       	dec	r1
 7a8:	69 f7       	brne	.-38     	; 0x784 <__udivmodsi4_loop>
 7aa:	60 95       	com	r22
 7ac:	70 95       	com	r23
 7ae:	80 95       	com	r24
 7b0:	90 95       	com	r25
 7b2:	9b 01       	movw	r18, r22
 7b4:	ac 01       	movw	r20, r24
 7b6:	bd 01       	movw	r22, r26
 7b8:	cf 01       	movw	r24, r30
 7ba:	08 95       	ret

000007bc <setjmp>:
 7bc:	dc 01       	movw	r26, r24
 7be:	2d 92       	st	X+, r2
 7c0:	3d 92       	st	X+, r3
 7c2:	4d 92       	st	X+, r4
 7c4:	5d 92       	st	X+, r5
 7c6:	6d 92       	st	X+, r6
 7c8:	7d 92       	st	X+, r7
 7ca:	8d 92       	st	X+, r8
 7cc:	9d 92       	st	X+, r9
 7ce:	ad 92       	st	X+, r10
 7d0:	bd 92       	st	X+, r11
 7d2:	cd 92       	st	X+, r12
 7d4:	dd 92       	st	X+, r13
 7d6:	ed 92       	st	X+, r14
 7d8:	fd 92       	st	X+, r15
 7da:	0d 93       	st	X+, r16
 7dc:	1d 93       	st	X+, r17
 7de:	cd 93       	st	X+, r28
 7e0:	dd 93       	st	X+, r29
 7e2:	ff 91       	pop	r31
 7e4:	ef 91       	pop	r30
 7e6:	8d b7       	in	r24, 0x3d	; 61
 7e8:	8d 93       	st	X+, r24
 7ea:	8e b7       	in	r24, 0x3e	; 62
 7ec:	8d 93       	st	X+, r24
 7ee:	8f b7       	in	r24, 0x3f	; 63
 7f0:	8d 93       	st	X+, r24
 7f2:	ed 93       	st	X+, r30
 7f4:	fd 93       	st	X+, r31
 7f6:	88 27       	eor	r24, r24
 7f8:	99 27       	eor	r25, r25
 7fa:	09 94       	ijmp

000007fc <longjmp>:
 7fc:	dc 01       	movw	r26, r24
 7fe:	cb 01       	movw	r24, r22
 800:	81 30       	cpi	r24, 0x01	; 1
 802:	91 05       	cpc	r25, r1
 804:	81 1d       	adc	r24, r1
 806:	2d 90       	ld	r2, X+
 808:	3d 90       	ld	r3, X+
 80a:	4d 90       	ld	r4, X+
 80c:	5d 90       	ld	r5, X+
 80e:	6d 90       	ld	r6, X+
 810:	7d 90       	ld	r7, X+
 812:	8d 90       	ld	r8, X+
 814:	9d 90       	ld	r9, X+
 816:	ad 90       	ld	r10, X+
 818:	bd 90       	ld	r11, X+
 81a:	cd 90       	ld	r12, X+
 81c:	dd 90       	ld	r13, X+
 81e:	ed 90       	ld	r14, X+
 820:	fd 90       	ld	r15, X+
 822:	0d 91       	ld	r16, X+
 824:	1d 91       	ld	r17, X+
 826:	cd 91       	ld	r28, X+
 828:	dd 91       	ld	r29, X+
 82a:	ed 91       	ld	r30, X+
 82c:	fd 91       	ld	r31, X+
 82e:	0d 90       	ld	r0, X+
 830:	f8 94       	cli
 832:	fe bf       	out	0x3e, r31	; 62
 834:	0f be       	out	0x3f, r0	; 63
 836:	ed bf       	out	0x3d, r30	; 61
 838:	ed 91       	ld	r30, X+
 83a:	fd 91       	ld	r31, X+
 83c:	09 94       	ijmp

0000083e <_exit>:
 83e:	f8 94       	cli

00000840 <__stop_program>:
 840:	ff cf       	rjmp	.-2      	; 0x840 <__stop_program>
