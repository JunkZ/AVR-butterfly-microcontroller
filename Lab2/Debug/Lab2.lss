
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000008d0  00000964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800118  00800118  0000097c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ac  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000403  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e7  00000000  00000000  0000180b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  00001af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028f  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000081e  00000000  00000000  00001fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000027dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 ed       	ldi	r30, 0xD0	; 208
  70:	f8 e0       	ldi	r31, 0x08	; 8
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 6f 02 	call	0x4de	; 0x4de <main>
  92:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <is_prime>:
#include <avr/io.h>

int pp;
mutex m = MUTEX_INIT;

int is_prime(long i) {
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	6b 01       	movw	r12, r22
  a8:	7c 01       	movw	r14, r24
	int n = 2;
	while (n < i) {
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	c8 16       	cp	r12, r24
  ae:	d1 04       	cpc	r13, r1
  b0:	e1 04       	cpc	r14, r1
  b2:	f1 04       	cpc	r15, r1
  b4:	7c f1       	brlt	.+94     	; 0x114 <is_prime+0x7a>
		if ((i % n) == 0) {
  b6:	d7 01       	movw	r26, r14
  b8:	c6 01       	movw	r24, r12
  ba:	81 70       	andi	r24, 0x01	; 1
  bc:	99 27       	eor	r25, r25
  be:	aa 27       	eor	r26, r26
  c0:	b0 78       	andi	r27, 0x80	; 128
  c2:	bb 23       	and	r27, r27
  c4:	54 f4       	brge	.+20     	; 0xda <is_prime+0x40>
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	a1 09       	sbc	r26, r1
  ca:	b1 09       	sbc	r27, r1
  cc:	8e 6f       	ori	r24, 0xFE	; 254
  ce:	9f 6f       	ori	r25, 0xFF	; 255
  d0:	af 6f       	ori	r26, 0xFF	; 255
  d2:	bf 6f       	ori	r27, 0xFF	; 255
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	a1 1d       	adc	r26, r1
  d8:	b1 1d       	adc	r27, r1
  da:	89 2b       	or	r24, r25
  dc:	8a 2b       	or	r24, r26
  de:	8b 2b       	or	r24, r27
  e0:	e1 f0       	breq	.+56     	; 0x11a <is_prime+0x80>

int pp;
mutex m = MUTEX_INIT;

int is_prime(long i) {
	int n = 2;
  e2:	c2 e0       	ldi	r28, 0x02	; 2
  e4:	d0 e0       	ldi	r29, 0x00	; 0
  e6:	08 c0       	rjmp	.+16     	; 0xf8 <is_prime+0x5e>
	while (n < i) {
		if ((i % n) == 0) {
  e8:	c7 01       	movw	r24, r14
  ea:	b6 01       	movw	r22, r12
  ec:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__divmodsi4>
  f0:	67 2b       	or	r22, r23
  f2:	68 2b       	or	r22, r24
  f4:	69 2b       	or	r22, r25
  f6:	a1 f0       	breq	.+40     	; 0x120 <is_prime+0x86>
			return 0;
		}
		n++;
  f8:	21 96       	adiw	r28, 0x01	; 1
int pp;
mutex m = MUTEX_INIT;

int is_prime(long i) {
	int n = 2;
	while (n < i) {
  fa:	9e 01       	movw	r18, r28
  fc:	44 27       	eor	r20, r20
  fe:	37 fd       	sbrc	r19, 7
 100:	40 95       	com	r20
 102:	54 2f       	mov	r21, r20
 104:	2c 15       	cp	r18, r12
 106:	3d 05       	cpc	r19, r13
 108:	4e 05       	cpc	r20, r14
 10a:	5f 05       	cpc	r21, r15
 10c:	6c f3       	brlt	.-38     	; 0xe8 <is_prime+0x4e>
		if ((i % n) == 0) {
			return 0;
		}
		n++;
	}
	return 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 c0       	rjmp	.+16     	; 0x124 <is_prime+0x8a>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	05 c0       	rjmp	.+10     	; 0x124 <is_prime+0x8a>

int is_prime(long i) {
	int n = 2;
	while (n < i) {
		if ((i % n) == 0) {
			return 0;
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <is_prime+0x8a>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
		}
		n++;
	}
	return 1;
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	df 90       	pop	r13
 12e:	cf 90       	pop	r12
 130:	08 95       	ret

00000132 <writeChar>:

void writeChar(char ch, int pos) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	64 97       	sbiw	r28, 0x14	; 20
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
	int numbers[10] = {
 146:	94 e1       	ldi	r25, 0x14	; 20
 148:	e4 e0       	ldi	r30, 0x04	; 4
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	de 01       	movw	r26, r28
 14e:	11 96       	adiw	r26, 0x01	; 1
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	9a 95       	dec	r25
 156:	e1 f7       	brne	.-8      	; 0x150 <writeChar+0x1e>
		0x1F41,
		0x0111,
		0x1F51,
		0x0B51
	};
	if (pos >= 0 && pos <= 5) {
 158:	66 30       	cpi	r22, 0x06	; 6
 15a:	71 05       	cpc	r23, r1
 15c:	08 f0       	brcs	.+2      	; 0x160 <writeChar+0x2e>
 15e:	43 c1       	rjmp	.+646    	; 0x3e6 <writeChar+0x2b4>
		if (ch < 0 || ch > 9){
 160:	8a 30       	cpi	r24, 0x0A	; 10
 162:	08 f0       	brcs	.+2      	; 0x166 <writeChar+0x34>
			ch = ch - '0';
 164:	80 53       	subi	r24, 0x30	; 48
			}
			if (ch>= 0 && ch <9) {
 166:	89 30       	cpi	r24, 0x09	; 9
 168:	08 f0       	brcs	.+2      	; 0x16c <writeChar+0x3a>
 16a:	3d c1       	rjmp	.+634    	; 0x3e6 <writeChar+0x2b4>
			int mask = 0xF;
			int mask2 = 0xF0;
			int towrite = numbers[ch];
 16c:	e8 2f       	mov	r30, r24
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	ec 0f       	add	r30, r28
 176:	fd 1f       	adc	r31, r29
 178:	81 81       	ldd	r24, Z+1	; 0x01
 17a:	92 81       	ldd	r25, Z+2	; 0x02
			
			if (pos == 0) {
 17c:	61 15       	cp	r22, r1
 17e:	71 05       	cpc	r23, r1
 180:	71 f5       	brne	.+92     	; 0x1de <writeChar+0xac>
				LCDDR0 = (mask & towrite) | LCDDR0 & mask2;
 182:	ec ee       	ldi	r30, 0xEC	; 236
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	20 81       	ld	r18, Z
 188:	38 2f       	mov	r19, r24
 18a:	3f 70       	andi	r19, 0x0F	; 15
 18c:	20 7f       	andi	r18, 0xF0	; 240
 18e:	23 2b       	or	r18, r19
 190:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 192:	9c 01       	movw	r18, r24
 194:	35 95       	asr	r19
 196:	27 95       	ror	r18
 198:	35 95       	asr	r19
 19a:	27 95       	ror	r18
 19c:	35 95       	asr	r19
 19e:	27 95       	ror	r18
 1a0:	35 95       	asr	r19
 1a2:	27 95       	ror	r18
				LCDDR5 = (mask & towrite) | LCDDR5 & mask2;
 1a4:	e1 ef       	ldi	r30, 0xF1	; 241
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	30 81       	ld	r19, Z
 1aa:	2f 70       	andi	r18, 0x0F	; 15
 1ac:	30 7f       	andi	r19, 0xF0	; 240
 1ae:	23 2b       	or	r18, r19
 1b0:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) | LCDDR10 & mask2;
 1b2:	e6 ef       	ldi	r30, 0xF6	; 246
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	20 81       	ld	r18, Z
 1b8:	39 2f       	mov	r19, r25
 1ba:	3f 70       	andi	r19, 0x0F	; 15
 1bc:	20 7f       	andi	r18, 0xF0	; 240
 1be:	23 2b       	or	r18, r19
 1c0:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 1c2:	80 e1       	ldi	r24, 0x10	; 16
 1c4:	98 02       	muls	r25, r24
 1c6:	81 2d       	mov	r24, r1
 1c8:	99 0b       	sbc	r25, r25
 1ca:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) | LCDDR15 & mask2;
 1cc:	eb ef       	ldi	r30, 0xFB	; 251
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	20 81       	ld	r18, Z
 1d2:	38 2f       	mov	r19, r24
 1d4:	3f 70       	andi	r19, 0x0F	; 15
 1d6:	20 7f       	andi	r18, 0xF0	; 240
 1d8:	23 2b       	or	r18, r19
 1da:	20 83       	st	Z, r18
 1dc:	66 c0       	rjmp	.+204    	; 0x2aa <writeChar+0x178>
			}
			if (pos == 1) {
 1de:	61 30       	cpi	r22, 0x01	; 1
 1e0:	71 05       	cpc	r23, r1
 1e2:	91 f5       	brne	.+100    	; 0x248 <writeChar+0x116>
				LCDDR0 = (mask & towrite) << 4 | LCDDR0 & mask;
 1e4:	ec ee       	ldi	r30, 0xEC	; 236
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	20 81       	ld	r18, Z
 1ea:	38 2f       	mov	r19, r24
 1ec:	32 95       	swap	r19
 1ee:	30 7f       	andi	r19, 0xF0	; 240
 1f0:	2f 70       	andi	r18, 0x0F	; 15
 1f2:	23 2b       	or	r18, r19
 1f4:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR5 = (mask & towrite) << 4 | LCDDR5 & mask;
 1f6:	e1 ef       	ldi	r30, 0xF1	; 241
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	40 81       	ld	r20, Z
 1fc:	9c 01       	movw	r18, r24
 1fe:	20 7f       	andi	r18, 0xF0	; 240
 200:	33 27       	eor	r19, r19
 202:	34 2f       	mov	r19, r20
 204:	3f 70       	andi	r19, 0x0F	; 15
 206:	23 2b       	or	r18, r19
 208:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR10 = (mask & towrite) << 4 | LCDDR10 & mask;
 20a:	e6 ef       	ldi	r30, 0xF6	; 246
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	40 81       	ld	r20, Z
 210:	9c 01       	movw	r18, r24
 212:	32 95       	swap	r19
 214:	22 95       	swap	r18
 216:	2f 70       	andi	r18, 0x0F	; 15
 218:	23 27       	eor	r18, r19
 21a:	3f 70       	andi	r19, 0x0F	; 15
 21c:	23 27       	eor	r18, r19
 21e:	20 7f       	andi	r18, 0xF0	; 240
 220:	33 27       	eor	r19, r19
 222:	34 2f       	mov	r19, r20
 224:	3f 70       	andi	r19, 0x0F	; 15
 226:	23 2b       	or	r18, r19
 228:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 22a:	80 e1       	ldi	r24, 0x10	; 16
 22c:	98 02       	muls	r25, r24
 22e:	81 2d       	mov	r24, r1
 230:	99 0b       	sbc	r25, r25
 232:	11 24       	eor	r1, r1
				LCDDR15 = (mask & towrite) << 4 | LCDDR15 & mask;
 234:	eb ef       	ldi	r30, 0xFB	; 251
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	20 81       	ld	r18, Z
 23a:	38 2f       	mov	r19, r24
 23c:	32 95       	swap	r19
 23e:	30 7f       	andi	r19, 0xF0	; 240
 240:	2f 70       	andi	r18, 0x0F	; 15
 242:	23 2b       	or	r18, r19
 244:	20 83       	st	Z, r18
 246:	69 c0       	rjmp	.+210    	; 0x31a <writeChar+0x1e8>
			}
			if (pos == 2) {
 248:	62 30       	cpi	r22, 0x02	; 2
 24a:	71 05       	cpc	r23, r1
 24c:	71 f5       	brne	.+92     	; 0x2aa <writeChar+0x178>
				LCDDR1 = (mask & towrite) | LCDDR1 & mask2;
 24e:	ed ee       	ldi	r30, 0xED	; 237
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	20 81       	ld	r18, Z
 254:	38 2f       	mov	r19, r24
 256:	3f 70       	andi	r19, 0x0F	; 15
 258:	20 7f       	andi	r18, 0xF0	; 240
 25a:	23 2b       	or	r18, r19
 25c:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 25e:	9c 01       	movw	r18, r24
 260:	35 95       	asr	r19
 262:	27 95       	ror	r18
 264:	35 95       	asr	r19
 266:	27 95       	ror	r18
 268:	35 95       	asr	r19
 26a:	27 95       	ror	r18
 26c:	35 95       	asr	r19
 26e:	27 95       	ror	r18
				LCDDR6 = (mask & towrite) | LCDDR6 & mask2;
 270:	e2 ef       	ldi	r30, 0xF2	; 242
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	30 81       	ld	r19, Z
 276:	2f 70       	andi	r18, 0x0F	; 15
 278:	30 7f       	andi	r19, 0xF0	; 240
 27a:	23 2b       	or	r18, r19
 27c:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) | LCDDR11 & mask2;
 27e:	e7 ef       	ldi	r30, 0xF7	; 247
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	20 81       	ld	r18, Z
 284:	39 2f       	mov	r19, r25
 286:	3f 70       	andi	r19, 0x0F	; 15
 288:	20 7f       	andi	r18, 0xF0	; 240
 28a:	23 2b       	or	r18, r19
 28c:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 28e:	80 e1       	ldi	r24, 0x10	; 16
 290:	98 02       	muls	r25, r24
 292:	81 2d       	mov	r24, r1
 294:	99 0b       	sbc	r25, r25
 296:	11 24       	eor	r1, r1
				LCDDR16 = (mask & towrite) | LCDDR16 & mask2;
 298:	ec ef       	ldi	r30, 0xFC	; 252
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	20 81       	ld	r18, Z
 29e:	38 2f       	mov	r19, r24
 2a0:	3f 70       	andi	r19, 0x0F	; 15
 2a2:	20 7f       	andi	r18, 0xF0	; 240
 2a4:	23 2b       	or	r18, r19
 2a6:	20 83       	st	Z, r18
 2a8:	67 c0       	rjmp	.+206    	; 0x378 <writeChar+0x246>
			}
			if (pos == 3) {
 2aa:	63 30       	cpi	r22, 0x03	; 3
 2ac:	71 05       	cpc	r23, r1
 2ae:	a9 f5       	brne	.+106    	; 0x31a <writeChar+0x1e8>
				LCDDR1 = (mask & towrite) << 4| LCDDR1 & mask;
 2b0:	ed ee       	ldi	r30, 0xED	; 237
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	20 81       	ld	r18, Z
 2b6:	38 2f       	mov	r19, r24
 2b8:	32 95       	swap	r19
 2ba:	30 7f       	andi	r19, 0xF0	; 240
 2bc:	2f 70       	andi	r18, 0x0F	; 15
 2be:	23 2b       	or	r18, r19
 2c0:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR6 = (mask & towrite) << 4| LCDDR6 & mask;
 2c2:	e2 ef       	ldi	r30, 0xF2	; 242
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	40 81       	ld	r20, Z
 2c8:	9c 01       	movw	r18, r24
 2ca:	20 7f       	andi	r18, 0xF0	; 240
 2cc:	33 27       	eor	r19, r19
 2ce:	34 2f       	mov	r19, r20
 2d0:	3f 70       	andi	r19, 0x0F	; 15
 2d2:	23 2b       	or	r18, r19
 2d4:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR11 = (mask & towrite) << 4| LCDDR11 & mask;
 2d6:	e7 ef       	ldi	r30, 0xF7	; 247
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	40 81       	ld	r20, Z
 2dc:	9c 01       	movw	r18, r24
 2de:	32 95       	swap	r19
 2e0:	22 95       	swap	r18
 2e2:	2f 70       	andi	r18, 0x0F	; 15
 2e4:	23 27       	eor	r18, r19
 2e6:	3f 70       	andi	r19, 0x0F	; 15
 2e8:	23 27       	eor	r18, r19
 2ea:	20 7f       	andi	r18, 0xF0	; 240
 2ec:	33 27       	eor	r19, r19
 2ee:	34 2f       	mov	r19, r20
 2f0:	3f 70       	andi	r19, 0x0F	; 15
 2f2:	23 2b       	or	r18, r19
 2f4:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR16 = (mask & towrite) << 4| LCDDR16 & mask;
 2f6:	ec ef       	ldi	r30, 0xFC	; 252
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	20 81       	ld	r18, Z
 2fc:	89 2f       	mov	r24, r25
 2fe:	99 27       	eor	r25, r25
 300:	82 95       	swap	r24
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	82 95       	swap	r24
 306:	92 95       	swap	r25
 308:	90 7f       	andi	r25, 0xF0	; 240
 30a:	98 27       	eor	r25, r24
 30c:	80 7f       	andi	r24, 0xF0	; 240
 30e:	98 27       	eor	r25, r24
 310:	92 2f       	mov	r25, r18
 312:	9f 70       	andi	r25, 0x0F	; 15
 314:	89 2b       	or	r24, r25
 316:	80 83       	st	Z, r24
 318:	66 c0       	rjmp	.+204    	; 0x3e6 <writeChar+0x2b4>
			}
			if (pos == 4) {
 31a:	64 30       	cpi	r22, 0x04	; 4
 31c:	71 05       	cpc	r23, r1
 31e:	61 f5       	brne	.+88     	; 0x378 <writeChar+0x246>
				LCDDR2 = (mask & towrite) | LCDDR2 & mask2 ;
 320:	ee ee       	ldi	r30, 0xEE	; 238
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	20 81       	ld	r18, Z
 326:	38 2f       	mov	r19, r24
 328:	3f 70       	andi	r19, 0x0F	; 15
 32a:	20 7f       	andi	r18, 0xF0	; 240
 32c:	23 2b       	or	r18, r19
 32e:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
 330:	9c 01       	movw	r18, r24
 332:	35 95       	asr	r19
 334:	27 95       	ror	r18
 336:	35 95       	asr	r19
 338:	27 95       	ror	r18
 33a:	35 95       	asr	r19
 33c:	27 95       	ror	r18
 33e:	35 95       	asr	r19
 340:	27 95       	ror	r18
				LCDDR7 = (mask & towrite) | LCDDR7 & mask2;
 342:	e3 ef       	ldi	r30, 0xF3	; 243
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	2f 70       	andi	r18, 0x0F	; 15
 34a:	80 7f       	andi	r24, 0xF0	; 240
 34c:	28 2b       	or	r18, r24
 34e:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite)| LCDDR12 & mask2;
 350:	e8 ef       	ldi	r30, 0xF8	; 248
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	29 2f       	mov	r18, r25
 358:	2f 70       	andi	r18, 0x0F	; 15
 35a:	80 7f       	andi	r24, 0xF0	; 240
 35c:	82 2b       	or	r24, r18
 35e:	80 83       	st	Z, r24
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite)| LCDDR17 & mask2;
 360:	ed ef       	ldi	r30, 0xFD	; 253
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
				LCDDR2 = (mask & towrite) | LCDDR2 & mask2 ;
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) | LCDDR7 & mask2;
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite)| LCDDR12 & mask2;
				towrite = (towrite >> 4);
 366:	95 95       	asr	r25
 368:	95 95       	asr	r25
 36a:	95 95       	asr	r25
 36c:	95 95       	asr	r25
				LCDDR17 = (mask & towrite)| LCDDR17 & mask2;
 36e:	9f 70       	andi	r25, 0x0F	; 15
 370:	80 7f       	andi	r24, 0xF0	; 240
 372:	89 2b       	or	r24, r25
 374:	80 83       	st	Z, r24
 376:	37 c0       	rjmp	.+110    	; 0x3e6 <writeChar+0x2b4>
			}
			if (pos == 5) {
 378:	65 30       	cpi	r22, 0x05	; 5
 37a:	71 05       	cpc	r23, r1
 37c:	a1 f5       	brne	.+104    	; 0x3e6 <writeChar+0x2b4>
				LCDDR2 = (mask & towrite) << 4| LCDDR2 & mask;
 37e:	ee ee       	ldi	r30, 0xEE	; 238
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	20 81       	ld	r18, Z
 384:	38 2f       	mov	r19, r24
 386:	32 95       	swap	r19
 388:	30 7f       	andi	r19, 0xF0	; 240
 38a:	2f 70       	andi	r18, 0x0F	; 15
 38c:	23 2b       	or	r18, r19
 38e:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR7 = (mask & towrite) << 4| LCDDR7 & mask;
 390:	e3 ef       	ldi	r30, 0xF3	; 243
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	40 81       	ld	r20, Z
 396:	9c 01       	movw	r18, r24
 398:	20 7f       	andi	r18, 0xF0	; 240
 39a:	33 27       	eor	r19, r19
 39c:	34 2f       	mov	r19, r20
 39e:	3f 70       	andi	r19, 0x0F	; 15
 3a0:	23 2b       	or	r18, r19
 3a2:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR12 = (mask & towrite) << 4| LCDDR12 & mask;
 3a4:	e8 ef       	ldi	r30, 0xF8	; 248
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	40 81       	ld	r20, Z
 3aa:	9c 01       	movw	r18, r24
 3ac:	32 95       	swap	r19
 3ae:	22 95       	swap	r18
 3b0:	2f 70       	andi	r18, 0x0F	; 15
 3b2:	23 27       	eor	r18, r19
 3b4:	3f 70       	andi	r19, 0x0F	; 15
 3b6:	23 27       	eor	r18, r19
 3b8:	20 7f       	andi	r18, 0xF0	; 240
 3ba:	33 27       	eor	r19, r19
 3bc:	34 2f       	mov	r19, r20
 3be:	3f 70       	andi	r19, 0x0F	; 15
 3c0:	23 2b       	or	r18, r19
 3c2:	20 83       	st	Z, r18
				towrite = (towrite >> 4);
				LCDDR17 = (mask & towrite) << 4| LCDDR17 & mask;
 3c4:	ed ef       	ldi	r30, 0xFD	; 253
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	20 81       	ld	r18, Z
 3ca:	89 2f       	mov	r24, r25
 3cc:	99 27       	eor	r25, r25
 3ce:	82 95       	swap	r24
 3d0:	8f 70       	andi	r24, 0x0F	; 15
 3d2:	82 95       	swap	r24
 3d4:	92 95       	swap	r25
 3d6:	90 7f       	andi	r25, 0xF0	; 240
 3d8:	98 27       	eor	r25, r24
 3da:	80 7f       	andi	r24, 0xF0	; 240
 3dc:	98 27       	eor	r25, r24
 3de:	92 2f       	mov	r25, r18
 3e0:	9f 70       	andi	r25, 0x0F	; 15
 3e2:	89 2b       	or	r24, r25
 3e4:	80 83       	st	Z, r24
			}
		}
	}
}
 3e6:	64 96       	adiw	r28, 0x14	; 20
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <LCD_init>:
void LCD_init(void) {
	/* 1/3 bias, 1/4 duty cycle, 25 segments */
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
 3f8:	87 eb       	ldi	r24, 0xB7	; 183
 3fa:	80 93 e5 00 	sts	0x00E5, r24

	/* 16 prescaler (no change needed), 8 clock divide*/
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 3fe:	87 e0       	ldi	r24, 0x07	; 7
 400:	80 93 e6 00 	sts	0x00E6, r24

	/*300 Mu s driver time and output voltage 3.35V*/
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
 404:	8f e0       	ldi	r24, 0x0F	; 15
 406:	80 93 e7 00 	sts	0x00E7, r24

	/*enable lcd with low power waveform and no interrupt and no blanking(on update)*/
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
 40a:	80 ec       	ldi	r24, 0xC0	; 192
 40c:	80 93 e4 00 	sts	0x00E4, r24
 410:	08 95       	ret

00000412 <printAt>:
}

void printAt(long num, int pos) {
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	16 2f       	mov	r17, r22
 41c:	ea 01       	movw	r28, r20
	lock(&m);
 41e:	88 e1       	ldi	r24, 0x18	; 24
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 aa 03 	call	0x754	; 0x754 <lock>
    pp = pos;
 426:	d0 93 21 01 	sts	0x0121, r29
 42a:	c0 93 20 01 	sts	0x0120, r28
    writeChar( (char)num % 100 / 10 + '0', pp);
 42e:	89 e2       	ldi	r24, 0x29	; 41
 430:	18 9f       	mul	r17, r24
 432:	81 2d       	mov	r24, r1
 434:	11 24       	eor	r1, r1
 436:	82 95       	swap	r24
 438:	8f 70       	andi	r24, 0x0F	; 15
 43a:	91 2f       	mov	r25, r17
 43c:	24 e6       	ldi	r18, 0x64	; 100
 43e:	82 9f       	mul	r24, r18
 440:	90 19       	sub	r25, r0
 442:	11 24       	eor	r1, r1
 444:	0d ec       	ldi	r16, 0xCD	; 205
 446:	90 9f       	mul	r25, r16
 448:	81 2d       	mov	r24, r1
 44a:	11 24       	eor	r1, r1
 44c:	86 95       	lsr	r24
 44e:	86 95       	lsr	r24
 450:	86 95       	lsr	r24
 452:	be 01       	movw	r22, r28
 454:	80 5d       	subi	r24, 0xD0	; 208
 456:	0e 94 99 00 	call	0x132	; 0x132 <writeChar>
    pp++;
 45a:	20 91 20 01 	lds	r18, 0x0120
 45e:	30 91 21 01 	lds	r19, 0x0121
 462:	b9 01       	movw	r22, r18
 464:	6f 5f       	subi	r22, 0xFF	; 255
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	70 93 21 01 	sts	0x0121, r23
 46c:	60 93 20 01 	sts	0x0120, r22
    writeChar( (char)num % 10 + '0', pp);
 470:	10 9f       	mul	r17, r16
 472:	01 2d       	mov	r16, r1
 474:	11 24       	eor	r1, r1
 476:	06 95       	lsr	r16
 478:	06 95       	lsr	r16
 47a:	06 95       	lsr	r16
 47c:	00 0f       	add	r16, r16
 47e:	80 2f       	mov	r24, r16
 480:	88 0f       	add	r24, r24
 482:	88 0f       	add	r24, r24
 484:	08 0f       	add	r16, r24
 486:	81 2f       	mov	r24, r17
 488:	80 1b       	sub	r24, r16
 48a:	80 5d       	subi	r24, 0xD0	; 208
 48c:	0e 94 99 00 	call	0x132	; 0x132 <writeChar>
	unlock(&m);
 490:	88 e1       	ldi	r24, 0x18	; 24
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 c6 03 	call	0x78c	; 0x78c <unlock>
}
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	08 95       	ret

000004a2 <computePrimes>:

void computePrimes(int pos) {
 4a2:	ec 01       	movw	r28, r24
    long n;

    for(n = 1;; n++) {
 4a4:	c1 2c       	mov	r12, r1
 4a6:	d1 2c       	mov	r13, r1
 4a8:	76 01       	movw	r14, r12
 4aa:	c3 94       	inc	r12
        if (is_prime(n) == 1) {
 4ac:	c7 01       	movw	r24, r14
 4ae:	b6 01       	movw	r22, r12
 4b0:	0e 94 4d 00 	call	0x9a	; 0x9a <is_prime>
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	29 f4       	brne	.+10     	; 0x4c2 <computePrimes+0x20>
            printAt(n, pos);
 4b8:	ae 01       	movw	r20, r28
 4ba:	c7 01       	movw	r24, r14
 4bc:	b6 01       	movw	r22, r12
 4be:	0e 94 09 02 	call	0x412	; 0x412 <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1;; n++) {
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	c8 1a       	sub	r12, r24
 4c6:	d8 0a       	sbc	r13, r24
 4c8:	e8 0a       	sbc	r14, r24
 4ca:	f8 0a       	sbc	r15, r24
        if (is_prime(n) == 1) {
            printAt(n, pos);
        }
    }
 4cc:	ef cf       	rjmp	.-34     	; 0x4ac <computePrimes+0xa>

000004ce <init>:
}
void init() {
	CLKPR = 0x80;
 4ce:	e1 e6       	ldi	r30, 0x61	; 97
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	80 83       	st	Z, r24
	CLKPR = 0x00;
 4d6:	10 82       	st	Z, r1
	LCD_init();
 4d8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_init>
 4dc:	08 95       	ret

000004de <main>:
}

int main() {
	init();
 4de:	0e 94 67 02 	call	0x4ce	; 0x4ce <init>

	spawn(computePrimes, 0);
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	81 e5       	ldi	r24, 0x51	; 81
 4e8:	92 e0       	ldi	r25, 0x02	; 2
 4ea:	0e 94 c3 02 	call	0x586	; 0x586 <spawn>
    computePrimes(3);
 4ee:	83 e0       	ldi	r24, 0x03	; 3
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <computePrimes>

000004f6 <enqueue>:
ISR(TIMER1_COMPA_vect) {
	yield();
}

static void enqueue(thread p, thread *queue) {
	DISABLE();
 4f6:	f8 94       	cli
    p->next = NULL;
 4f8:	dc 01       	movw	r26, r24
 4fa:	15 96       	adiw	r26, 0x05	; 5
 4fc:	1c 92       	st	X, r1
 4fe:	1e 92       	st	-X, r1
 500:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 502:	db 01       	movw	r26, r22
 504:	ed 91       	ld	r30, X+
 506:	fc 91       	ld	r31, X
 508:	11 97       	sbiw	r26, 0x01	; 1
 50a:	30 97       	sbiw	r30, 0x00	; 0
 50c:	19 f4       	brne	.+6      	; 0x514 <__stack+0x15>
        *queue = p;
 50e:	8d 93       	st	X+, r24
 510:	9c 93       	st	X, r25
 512:	09 c0       	rjmp	.+18     	; 0x526 <__stack+0x27>
    } else {
        thread q = *queue;
        while (q->next)
 514:	24 81       	ldd	r18, Z+4	; 0x04
 516:	35 81       	ldd	r19, Z+5	; 0x05
 518:	21 15       	cp	r18, r1
 51a:	31 05       	cpc	r19, r1
 51c:	11 f0       	breq	.+4      	; 0x522 <__stack+0x23>
            q = q->next;
 51e:	f9 01       	movw	r30, r18
 520:	f9 cf       	rjmp	.-14     	; 0x514 <__stack+0x15>
        q->next = p;
 522:	95 83       	std	Z+5, r25	; 0x05
 524:	84 83       	std	Z+4, r24	; 0x04
    }
	ENABLE();
 526:	78 94       	sei
 528:	08 95       	ret

0000052a <dequeue>:
}

static thread dequeue(thread *queue) {
	DISABLE();
 52a:	f8 94       	cli
    thread p = *queue;
 52c:	dc 01       	movw	r26, r24
 52e:	ed 91       	ld	r30, X+
 530:	fc 91       	ld	r31, X
 532:	11 97       	sbiw	r26, 0x01	; 1
    if (*queue) {
 534:	30 97       	sbiw	r30, 0x00	; 0
 536:	09 f4       	brne	.+2      	; 0x53a <dequeue+0x10>
 538:	ff cf       	rjmp	.-2      	; 0x538 <dequeue+0xe>
        *queue = (*queue)->next;
 53a:	24 81       	ldd	r18, Z+4	; 0x04
 53c:	35 81       	ldd	r19, Z+5	; 0x05
 53e:	2d 93       	st	X+, r18
 540:	3c 93       	st	X, r19
        // Empty queue, kernel panic!!!
        while (1) ;  // not much else to do...
    }
    return p;
	ENABLE();
}
 542:	cf 01       	movw	r24, r30
 544:	08 95       	ret

00000546 <dispatch>:

static void dispatch(thread next) {
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	00 d0       	rcall	.+0      	; 0x54c <dispatch+0x6>
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
 550:	9a 83       	std	Y+2, r25	; 0x02
 552:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 554:	80 91 00 01 	lds	r24, 0x0100
 558:	90 91 01 01 	lds	r25, 0x0101
 55c:	06 96       	adiw	r24, 0x06	; 6
 55e:	0e 94 25 04 	call	0x84a	; 0x84a <setjmp>
 562:	89 2b       	or	r24, r25
 564:	59 f4       	brne	.+22     	; 0x57c <dispatch+0x36>
        current = next;
 566:	89 81       	ldd	r24, Y+1	; 0x01
 568:	9a 81       	ldd	r25, Y+2	; 0x02
 56a:	90 93 01 01 	sts	0x0101, r25
 56e:	80 93 00 01 	sts	0x0100, r24
        longjmp(next->context,1);
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	06 96       	adiw	r24, 0x06	; 6
 578:	0e 94 45 04 	call	0x88a	; 0x88a <longjmp>
    }
}
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <spawn>:

void spawn(void (* function)(int), int arg) {
 586:	ef 92       	push	r14
 588:	ff 92       	push	r15
 58a:	0f 93       	push	r16
 58c:	1f 93       	push	r17
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	00 d0       	rcall	.+0      	; 0x594 <spawn+0xe>
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	7c 01       	movw	r14, r24
 59a:	8b 01       	movw	r16, r22
    thread newp;

    DISABLE();
 59c:	f8 94       	cli
    if (!initialized) initialize();
 59e:	80 91 1c 01 	lds	r24, 0x011C
 5a2:	90 91 1d 01 	lds	r25, 0x011D
 5a6:	89 2b       	or	r24, r25
 5a8:	a1 f5       	brne	.+104    	; 0x612 <spawn+0x8c>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 5aa:	8c ef       	ldi	r24, 0xFC	; 252
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	90 93 94 01 	sts	0x0194, r25
 5b2:	80 93 93 01 	sts	0x0193, r24
 5b6:	89 e6       	ldi	r24, 0x69	; 105
 5b8:	92 e0       	ldi	r25, 0x02	; 2
 5ba:	90 93 01 02 	sts	0x0201, r25
 5be:	80 93 00 02 	sts	0x0200, r24
 5c2:	86 ed       	ldi	r24, 0xD6	; 214
 5c4:	92 e0       	ldi	r25, 0x02	; 2
 5c6:	90 93 6e 02 	sts	0x026E, r25
 5ca:	80 93 6d 02 	sts	0x026D, r24
    threads[NTHREADS-1].next = NULL;
 5ce:	10 92 db 02 	sts	0x02DB, r1
 5d2:	10 92 da 02 	sts	0x02DA, r1

	PORTB = EIMSK = PCMSK1 = 128;
 5d6:	80 e8       	ldi	r24, 0x80	; 128
 5d8:	80 93 6c 00 	sts	0x006C, r24
 5dc:	8d bb       	out	0x1d, r24	; 29
 5de:	85 b9       	out	0x05, r24	; 5
	
	TCCR1A = 192;
 5e0:	80 ec       	ldi	r24, 0xC0	; 192
 5e2:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 13;
 5e6:	8d e0       	ldi	r24, 0x0D	; 13
 5e8:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0x0000;
 5ec:	10 92 85 00 	sts	0x0085, r1
 5f0:	10 92 84 00 	sts	0x0084, r1
	OCR1A = (8000000/1024)*0.05; //1s * 0.01 = 10ms
 5f4:	86 e8       	ldi	r24, 0x86	; 134
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	90 93 89 00 	sts	0x0089, r25
 5fc:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 2;
 600:	82 e0       	ldi	r24, 0x02	; 2
 602:	80 93 6f 00 	sts	0x006F, r24
    initialized = 1;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	90 93 1d 01 	sts	0x011D, r25
 60e:	80 93 1c 01 	sts	0x011C, r24
    thread newp;

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	0e 94 95 02 	call	0x52a	; 0x52a <dequeue>
 61a:	9a 83       	std	Y+2, r25	; 0x02
 61c:	89 83       	std	Y+1, r24	; 0x01
    newp->function = function;
 61e:	fc 01       	movw	r30, r24
 620:	f1 82       	std	Z+1, r15	; 0x01
 622:	e0 82       	st	Z, r14
    newp->arg = arg;
 624:	13 83       	std	Z+3, r17	; 0x03
 626:	02 83       	std	Z+2, r16	; 0x02
    newp->next = NULL;
 628:	15 82       	std	Z+5, r1	; 0x05
 62a:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 62c:	06 96       	adiw	r24, 0x06	; 6
 62e:	0e 94 25 04 	call	0x84a	; 0x84a <setjmp>
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	e1 f4       	brne	.+56     	; 0x66e <spawn+0xe8>
        ENABLE();
 636:	78 94       	sei
        current->function(current->arg);
 638:	a0 91 00 01 	lds	r26, 0x0100
 63c:	b0 91 01 01 	lds	r27, 0x0101
 640:	ed 91       	ld	r30, X+
 642:	fc 91       	ld	r31, X
 644:	11 97       	sbiw	r26, 0x01	; 1
 646:	12 96       	adiw	r26, 0x02	; 2
 648:	8d 91       	ld	r24, X+
 64a:	9c 91       	ld	r25, X
 64c:	13 97       	sbiw	r26, 0x03	; 3
 64e:	09 95       	icall
        DISABLE();
 650:	f8 94       	cli
        enqueue(current, &freeQ);
 652:	62 e0       	ldi	r22, 0x02	; 2
 654:	71 e0       	ldi	r23, 0x01	; 1
 656:	80 91 00 01 	lds	r24, 0x0100
 65a:	90 91 01 01 	lds	r25, 0x0101
 65e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <enqueue>
        dispatch(dequeue(&readyQ));
 662:	8e e1       	ldi	r24, 0x1E	; 30
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	0e 94 95 02 	call	0x52a	; 0x52a <dequeue>
 66a:	0e 94 a3 02 	call	0x546	; 0x546 <dispatch>
    }
    SETSTACK(&newp->context, &newp->stack);
 66e:	89 81       	ldd	r24, Y+1	; 0x01
 670:	9a 81       	ldd	r25, Y+2	; 0x02
 672:	87 59       	subi	r24, 0x97	; 151
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	e9 81       	ldd	r30, Y+1	; 0x01
 678:	fa 81       	ldd	r31, Y+2	; 0x02
 67a:	97 8b       	std	Z+23, r25	; 0x17
 67c:	86 8b       	std	Z+22, r24	; 0x16
 67e:	91 8f       	std	Z+25, r25	; 0x19
 680:	80 8f       	std	Z+24, r24	; 0x18

    enqueue(newp, &readyQ);
 682:	6e e1       	ldi	r22, 0x1E	; 30
 684:	71 e0       	ldi	r23, 0x01	; 1
 686:	cf 01       	movw	r24, r30
 688:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <enqueue>
    ENABLE();
 68c:	78 94       	sei
}
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	ff 90       	pop	r15
 69c:	ef 90       	pop	r14
 69e:	08 95       	ret

000006a0 <yield>:

void yield(void) {
	DISABLE();
 6a0:	f8 94       	cli
	enqueue(current,&readyQ);
 6a2:	6e e1       	ldi	r22, 0x1E	; 30
 6a4:	71 e0       	ldi	r23, 0x01	; 1
 6a6:	80 91 00 01 	lds	r24, 0x0100
 6aa:	90 91 01 01 	lds	r25, 0x0101
 6ae:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <enqueue>
	dispatch(dequeue(&readyQ));
 6b2:	8e e1       	ldi	r24, 0x1E	; 30
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 95 02 	call	0x52a	; 0x52a <dequeue>
 6ba:	0e 94 a3 02 	call	0x546	; 0x546 <dispatch>
	ENABLE();
 6be:	78 94       	sei
 6c0:	08 95       	ret

000006c2 <__vector_3>:
	TCNT1 = 0x0000;
	OCR1A = (8000000/1024)*0.05; //1s * 0.01 = 10ms
	TIMSK1 = 2;
    initialized = 1;
}
ISR(PCINT1_vect) {
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	0f 92       	push	r0
 6ca:	11 24       	eor	r1, r1
 6cc:	2f 93       	push	r18
 6ce:	3f 93       	push	r19
 6d0:	4f 93       	push	r20
 6d2:	5f 93       	push	r21
 6d4:	6f 93       	push	r22
 6d6:	7f 93       	push	r23
 6d8:	8f 93       	push	r24
 6da:	9f 93       	push	r25
 6dc:	af 93       	push	r26
 6de:	bf 93       	push	r27
 6e0:	ef 93       	push	r30
 6e2:	ff 93       	push	r31
	if ((PINB & 128) == 0) {
 6e4:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 6e6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <yield>
	}
}
 6ea:	ff 91       	pop	r31
 6ec:	ef 91       	pop	r30
 6ee:	bf 91       	pop	r27
 6f0:	af 91       	pop	r26
 6f2:	9f 91       	pop	r25
 6f4:	8f 91       	pop	r24
 6f6:	7f 91       	pop	r23
 6f8:	6f 91       	pop	r22
 6fa:	5f 91       	pop	r21
 6fc:	4f 91       	pop	r20
 6fe:	3f 91       	pop	r19
 700:	2f 91       	pop	r18
 702:	0f 90       	pop	r0
 704:	0f be       	out	0x3f, r0	; 63
 706:	0f 90       	pop	r0
 708:	1f 90       	pop	r1
 70a:	18 95       	reti

0000070c <__vector_7>:
ISR(TIMER1_COMPA_vect) {
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
	yield();
 72e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <yield>
}
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	0f 90       	pop	r0
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	0f 90       	pop	r0
 750:	1f 90       	pop	r1
 752:	18 95       	reti

00000754 <lock>:
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
	DISABLE();
 754:	f8 94       	cli
	if (!m ->locked) {
 756:	fc 01       	movw	r30, r24
 758:	20 81       	ld	r18, Z
 75a:	31 81       	ldd	r19, Z+1	; 0x01
 75c:	23 2b       	or	r18, r19
 75e:	29 f4       	brne	.+10     	; 0x76a <lock+0x16>
		m->locked=1;
 760:	21 e0       	ldi	r18, 0x01	; 1
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	31 83       	std	Z+1, r19	; 0x01
 766:	20 83       	st	Z, r18
 768:	0f c0       	rjmp	.+30     	; 0x788 <lock+0x34>
	} else {
		enqueue(current, &(m->waitQ));
 76a:	bc 01       	movw	r22, r24
 76c:	6e 5f       	subi	r22, 0xFE	; 254
 76e:	7f 4f       	sbci	r23, 0xFF	; 255
 770:	80 91 00 01 	lds	r24, 0x0100
 774:	90 91 01 01 	lds	r25, 0x0101
 778:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <enqueue>
		dispatch(dequeue(&readyQ));
 77c:	8e e1       	ldi	r24, 0x1E	; 30
 77e:	91 e0       	ldi	r25, 0x01	; 1
 780:	0e 94 95 02 	call	0x52a	; 0x52a <dequeue>
 784:	0e 94 a3 02 	call	0x546	; 0x546 <dispatch>
	}
	ENABLE();
 788:	78 94       	sei
 78a:	08 95       	ret

0000078c <unlock>:
}

void unlock(mutex *m) {
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
	DISABLE();
 790:	f8 94       	cli
	if (m->waitQ != NULL) {
 792:	fc 01       	movw	r30, r24
 794:	22 81       	ldd	r18, Z+2	; 0x02
 796:	33 81       	ldd	r19, Z+3	; 0x03
 798:	23 2b       	or	r18, r19
 79a:	79 f0       	breq	.+30     	; 0x7ba <unlock+0x2e>
		enqueue(current, &(m->waitQ));
 79c:	ec 01       	movw	r28, r24
 79e:	22 96       	adiw	r28, 0x02	; 2
 7a0:	be 01       	movw	r22, r28
 7a2:	80 91 00 01 	lds	r24, 0x0100
 7a6:	90 91 01 01 	lds	r25, 0x0101
 7aa:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <enqueue>
		dispatch(dequeue(&(m->waitQ)));
 7ae:	ce 01       	movw	r24, r28
 7b0:	0e 94 95 02 	call	0x52a	; 0x52a <dequeue>
 7b4:	0e 94 a3 02 	call	0x546	; 0x546 <dispatch>
 7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <unlock+0x34>
	} else {
		m->locked = 0;
 7ba:	fc 01       	movw	r30, r24
 7bc:	11 82       	std	Z+1, r1	; 0x01
 7be:	10 82       	st	Z, r1
	}
	ENABLE();
 7c0:	78 94       	sei
}
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <__divmodsi4>:
 7c8:	05 2e       	mov	r0, r21
 7ca:	97 fb       	bst	r25, 7
 7cc:	1e f4       	brtc	.+6      	; 0x7d4 <__divmodsi4+0xc>
 7ce:	00 94       	com	r0
 7d0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__negsi2>
 7d4:	57 fd       	sbrc	r21, 7
 7d6:	07 d0       	rcall	.+14     	; 0x7e6 <__divmodsi4_neg2>
 7d8:	0e 94 03 04 	call	0x806	; 0x806 <__udivmodsi4>
 7dc:	07 fc       	sbrc	r0, 7
 7de:	03 d0       	rcall	.+6      	; 0x7e6 <__divmodsi4_neg2>
 7e0:	4e f4       	brtc	.+18     	; 0x7f4 <__divmodsi4_exit>
 7e2:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__negsi2>

000007e6 <__divmodsi4_neg2>:
 7e6:	50 95       	com	r21
 7e8:	40 95       	com	r20
 7ea:	30 95       	com	r19
 7ec:	21 95       	neg	r18
 7ee:	3f 4f       	sbci	r19, 0xFF	; 255
 7f0:	4f 4f       	sbci	r20, 0xFF	; 255
 7f2:	5f 4f       	sbci	r21, 0xFF	; 255

000007f4 <__divmodsi4_exit>:
 7f4:	08 95       	ret

000007f6 <__negsi2>:
 7f6:	90 95       	com	r25
 7f8:	80 95       	com	r24
 7fa:	70 95       	com	r23
 7fc:	61 95       	neg	r22
 7fe:	7f 4f       	sbci	r23, 0xFF	; 255
 800:	8f 4f       	sbci	r24, 0xFF	; 255
 802:	9f 4f       	sbci	r25, 0xFF	; 255
 804:	08 95       	ret

00000806 <__udivmodsi4>:
 806:	a1 e2       	ldi	r26, 0x21	; 33
 808:	1a 2e       	mov	r1, r26
 80a:	aa 1b       	sub	r26, r26
 80c:	bb 1b       	sub	r27, r27
 80e:	fd 01       	movw	r30, r26
 810:	0d c0       	rjmp	.+26     	; 0x82c <__udivmodsi4_ep>

00000812 <__udivmodsi4_loop>:
 812:	aa 1f       	adc	r26, r26
 814:	bb 1f       	adc	r27, r27
 816:	ee 1f       	adc	r30, r30
 818:	ff 1f       	adc	r31, r31
 81a:	a2 17       	cp	r26, r18
 81c:	b3 07       	cpc	r27, r19
 81e:	e4 07       	cpc	r30, r20
 820:	f5 07       	cpc	r31, r21
 822:	20 f0       	brcs	.+8      	; 0x82c <__udivmodsi4_ep>
 824:	a2 1b       	sub	r26, r18
 826:	b3 0b       	sbc	r27, r19
 828:	e4 0b       	sbc	r30, r20
 82a:	f5 0b       	sbc	r31, r21

0000082c <__udivmodsi4_ep>:
 82c:	66 1f       	adc	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	1a 94       	dec	r1
 836:	69 f7       	brne	.-38     	; 0x812 <__udivmodsi4_loop>
 838:	60 95       	com	r22
 83a:	70 95       	com	r23
 83c:	80 95       	com	r24
 83e:	90 95       	com	r25
 840:	9b 01       	movw	r18, r22
 842:	ac 01       	movw	r20, r24
 844:	bd 01       	movw	r22, r26
 846:	cf 01       	movw	r24, r30
 848:	08 95       	ret

0000084a <setjmp>:
 84a:	dc 01       	movw	r26, r24
 84c:	2d 92       	st	X+, r2
 84e:	3d 92       	st	X+, r3
 850:	4d 92       	st	X+, r4
 852:	5d 92       	st	X+, r5
 854:	6d 92       	st	X+, r6
 856:	7d 92       	st	X+, r7
 858:	8d 92       	st	X+, r8
 85a:	9d 92       	st	X+, r9
 85c:	ad 92       	st	X+, r10
 85e:	bd 92       	st	X+, r11
 860:	cd 92       	st	X+, r12
 862:	dd 92       	st	X+, r13
 864:	ed 92       	st	X+, r14
 866:	fd 92       	st	X+, r15
 868:	0d 93       	st	X+, r16
 86a:	1d 93       	st	X+, r17
 86c:	cd 93       	st	X+, r28
 86e:	dd 93       	st	X+, r29
 870:	ff 91       	pop	r31
 872:	ef 91       	pop	r30
 874:	8d b7       	in	r24, 0x3d	; 61
 876:	8d 93       	st	X+, r24
 878:	8e b7       	in	r24, 0x3e	; 62
 87a:	8d 93       	st	X+, r24
 87c:	8f b7       	in	r24, 0x3f	; 63
 87e:	8d 93       	st	X+, r24
 880:	ed 93       	st	X+, r30
 882:	fd 93       	st	X+, r31
 884:	88 27       	eor	r24, r24
 886:	99 27       	eor	r25, r25
 888:	09 94       	ijmp

0000088a <longjmp>:
 88a:	dc 01       	movw	r26, r24
 88c:	cb 01       	movw	r24, r22
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	91 05       	cpc	r25, r1
 892:	81 1d       	adc	r24, r1
 894:	2d 90       	ld	r2, X+
 896:	3d 90       	ld	r3, X+
 898:	4d 90       	ld	r4, X+
 89a:	5d 90       	ld	r5, X+
 89c:	6d 90       	ld	r6, X+
 89e:	7d 90       	ld	r7, X+
 8a0:	8d 90       	ld	r8, X+
 8a2:	9d 90       	ld	r9, X+
 8a4:	ad 90       	ld	r10, X+
 8a6:	bd 90       	ld	r11, X+
 8a8:	cd 90       	ld	r12, X+
 8aa:	dd 90       	ld	r13, X+
 8ac:	ed 90       	ld	r14, X+
 8ae:	fd 90       	ld	r15, X+
 8b0:	0d 91       	ld	r16, X+
 8b2:	1d 91       	ld	r17, X+
 8b4:	cd 91       	ld	r28, X+
 8b6:	dd 91       	ld	r29, X+
 8b8:	ed 91       	ld	r30, X+
 8ba:	fd 91       	ld	r31, X+
 8bc:	0d 90       	ld	r0, X+
 8be:	f8 94       	cli
 8c0:	fe bf       	out	0x3e, r31	; 62
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	ed bf       	out	0x3d, r30	; 61
 8c6:	ed 91       	ld	r30, X+
 8c8:	fd 91       	ld	r31, X+
 8ca:	09 94       	ijmp

000008cc <_exit>:
 8cc:	f8 94       	cli

000008ce <__stop_program>:
 8ce:	ff cf       	rjmp	.-2      	; 0x8ce <__stop_program>
